// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=15,HLS_SYN_FF=3736,HLS_SYN_LUT=4269,HLS_VERSION=2019_1}" *)

module Conv (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 72'd1;
parameter    ap_ST_fsm_state2 = 72'd2;
parameter    ap_ST_fsm_state3 = 72'd4;
parameter    ap_ST_fsm_state4 = 72'd8;
parameter    ap_ST_fsm_state5 = 72'd16;
parameter    ap_ST_fsm_state6 = 72'd32;
parameter    ap_ST_fsm_state7 = 72'd64;
parameter    ap_ST_fsm_state8 = 72'd128;
parameter    ap_ST_fsm_state9 = 72'd256;
parameter    ap_ST_fsm_state10 = 72'd512;
parameter    ap_ST_fsm_state11 = 72'd1024;
parameter    ap_ST_fsm_state12 = 72'd2048;
parameter    ap_ST_fsm_state13 = 72'd4096;
parameter    ap_ST_fsm_state14 = 72'd8192;
parameter    ap_ST_fsm_state15 = 72'd16384;
parameter    ap_ST_fsm_state16 = 72'd32768;
parameter    ap_ST_fsm_state17 = 72'd65536;
parameter    ap_ST_fsm_state18 = 72'd131072;
parameter    ap_ST_fsm_state19 = 72'd262144;
parameter    ap_ST_fsm_state20 = 72'd524288;
parameter    ap_ST_fsm_state21 = 72'd1048576;
parameter    ap_ST_fsm_state22 = 72'd2097152;
parameter    ap_ST_fsm_state23 = 72'd4194304;
parameter    ap_ST_fsm_state24 = 72'd8388608;
parameter    ap_ST_fsm_state25 = 72'd16777216;
parameter    ap_ST_fsm_state26 = 72'd33554432;
parameter    ap_ST_fsm_state27 = 72'd67108864;
parameter    ap_ST_fsm_state28 = 72'd134217728;
parameter    ap_ST_fsm_state29 = 72'd268435456;
parameter    ap_ST_fsm_state30 = 72'd536870912;
parameter    ap_ST_fsm_state31 = 72'd1073741824;
parameter    ap_ST_fsm_state32 = 72'd2147483648;
parameter    ap_ST_fsm_state33 = 72'd4294967296;
parameter    ap_ST_fsm_state34 = 72'd8589934592;
parameter    ap_ST_fsm_state35 = 72'd17179869184;
parameter    ap_ST_fsm_state36 = 72'd34359738368;
parameter    ap_ST_fsm_state37 = 72'd68719476736;
parameter    ap_ST_fsm_state38 = 72'd137438953472;
parameter    ap_ST_fsm_state39 = 72'd274877906944;
parameter    ap_ST_fsm_state40 = 72'd549755813888;
parameter    ap_ST_fsm_state41 = 72'd1099511627776;
parameter    ap_ST_fsm_state42 = 72'd2199023255552;
parameter    ap_ST_fsm_state43 = 72'd4398046511104;
parameter    ap_ST_fsm_state44 = 72'd8796093022208;
parameter    ap_ST_fsm_state45 = 72'd17592186044416;
parameter    ap_ST_fsm_state46 = 72'd35184372088832;
parameter    ap_ST_fsm_state47 = 72'd70368744177664;
parameter    ap_ST_fsm_state48 = 72'd140737488355328;
parameter    ap_ST_fsm_state49 = 72'd281474976710656;
parameter    ap_ST_fsm_state50 = 72'd562949953421312;
parameter    ap_ST_fsm_state51 = 72'd1125899906842624;
parameter    ap_ST_fsm_state52 = 72'd2251799813685248;
parameter    ap_ST_fsm_state53 = 72'd4503599627370496;
parameter    ap_ST_fsm_state54 = 72'd9007199254740992;
parameter    ap_ST_fsm_state55 = 72'd18014398509481984;
parameter    ap_ST_fsm_state56 = 72'd36028797018963968;
parameter    ap_ST_fsm_state57 = 72'd72057594037927936;
parameter    ap_ST_fsm_state58 = 72'd144115188075855872;
parameter    ap_ST_fsm_state59 = 72'd288230376151711744;
parameter    ap_ST_fsm_state60 = 72'd576460752303423488;
parameter    ap_ST_fsm_state61 = 72'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 72'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 72'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 72'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 72'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 72'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 72'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 72'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 72'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 72'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 72'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 72'd2361183241434822606848;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [71:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [15:0] CHout_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [0:0] mode_V;
wire   [0:0] relu_en_V;
wire   [31:0] feature_in;
wire   [31:0] W;
wire   [31:0] bias;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln57_fu_912_p2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state66;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state67;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state72;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [0:0] relu_en_V_read_reg_1213;
reg   [7:0] Sy_V_read_reg_1218;
reg   [7:0] Sx_V_read_reg_1224;
reg   [7:0] Ky_V_read_reg_1230;
reg   [7:0] Kx_V_read_reg_1236;
reg   [15:0] CHout_V_read_reg_1243;
reg   [15:0] Win_V_read_reg_1250;
reg   [15:0] Hin_V_read_reg_1256;
reg   [15:0] CHin_V_read_reg_1261;
reg   [29:0] tmp_3_reg_1268;
reg   [29:0] tmp_4_reg_1273;
reg   [29:0] tmp_5_reg_1278;
reg   [29:0] tmp_6_reg_1283;
wire   [7:0] select_ln43_fu_640_p3;
reg   [7:0] select_ln43_reg_1288;
wire   [7:0] select_ln43_1_fu_648_p3;
reg   [7:0] select_ln43_1_reg_1294;
wire   [16:0] zext_ln1371_4_fu_667_p1;
reg   [16:0] zext_ln1371_4_reg_1300;
wire    ap_CS_fsm_state2;
wire   [16:0] zext_ln1371_9_fu_713_p1;
reg   [16:0] zext_ln1371_9_reg_1315;
wire   [48:0] p_cast26_fu_748_p1;
reg   [48:0] p_cast26_reg_1330;
wire    ap_CS_fsm_state24;
wire   [30:0] p_cast25_fu_751_p1;
reg   [30:0] p_cast25_reg_1335;
wire   [48:0] p_cast24_fu_754_p1;
reg   [48:0] p_cast24_reg_1340;
wire   [47:0] p_cast_fu_757_p1;
reg   [47:0] p_cast_reg_1345;
wire   [15:0] Wout_V_fu_764_p2;
reg   [15:0] Wout_V_reg_1350;
wire   [15:0] add_ln51_fu_774_p2;
reg   [15:0] add_ln51_reg_1355;
wire   [15:0] zext_ln68_fu_780_p1;
reg   [15:0] zext_ln68_reg_1360;
wire   [15:0] zext_ln68_1_fu_783_p1;
reg   [15:0] zext_ln68_1_reg_1365;
wire   [31:0] rhs_V_1_cast_fu_786_p1;
reg   [31:0] rhs_V_1_cast_reg_1370;
wire   [31:0] rhs_V_1_fu_790_p1;
reg   [31:0] rhs_V_1_reg_1375;
wire   [15:0] zext_ln68_2_fu_793_p1;
reg   [15:0] zext_ln68_2_reg_1382;
wire   [15:0] zext_ln68_3_fu_796_p1;
reg   [15:0] zext_ln68_3_reg_1387;
wire   [47:0] rhs_V_2_fu_799_p1;
reg   [47:0] rhs_V_2_reg_1392;
wire   [15:0] zext_ln215_1_fu_802_p1;
reg   [15:0] zext_ln215_1_reg_1397;
wire   [47:0] rhs_V_11_cast3_fu_805_p1;
reg   [47:0] rhs_V_11_cast3_reg_1402;
wire   [23:0] zext_ln215_2_fu_808_p1;
reg   [23:0] zext_ln215_2_reg_1408;
wire   [31:0] zext_ln51_fu_811_p1;
reg   [31:0] zext_ln51_reg_1413;
wire   [15:0] cout_fu_819_p2;
reg   [15:0] cout_reg_1422;
wire    ap_CS_fsm_state25;
wire   [31:0] zext_ln73_fu_829_p1;
reg   [31:0] zext_ln73_reg_1427;
wire   [0:0] icmp_ln51_fu_814_p2;
reg   [31:0] gmem_addr_reg_1433;
wire   [15:0] add_ln1598_fu_848_p2;
reg   [15:0] add_ln1598_reg_1439;
wire    ap_CS_fsm_state26;
wire   [15:0] i_fu_862_p2;
reg   [15:0] i_reg_1447;
wire   [31:0] ret_V_1_fu_1192_p2;
reg   [31:0] ret_V_1_reg_1452;
wire   [0:0] icmp_ln52_fu_857_p2;
wire   [15:0] sub_ln68_fu_868_p2;
reg   [15:0] sub_ln68_reg_1457;
wire   [47:0] ret_V_2_fu_876_p2;
reg   [47:0] ret_V_2_reg_1462;
wire    ap_CS_fsm_state27;
wire   [15:0] add_ln1598_1_fu_881_p2;
reg   [15:0] add_ln1598_1_reg_1467;
wire    ap_CS_fsm_state28;
wire   [31:0] add_ln1598_2_fu_886_p2;
reg   [31:0] add_ln1598_2_reg_1472;
wire   [15:0] j_fu_896_p2;
reg   [15:0] j_reg_1480;
wire   [15:0] sub_ln68_1_fu_902_p2;
reg   [15:0] sub_ln68_1_reg_1485;
wire   [0:0] icmp_ln53_fu_891_p2;
wire   [15:0] add_ln1598_3_fu_907_p2;
reg   [15:0] add_ln1598_3_reg_1490;
reg    ap_block_state29_io;
wire   [7:0] ii_fu_917_p2;
reg   [7:0] ii_reg_1498;
wire  signed [15:0] h_V_fu_927_p2;
reg  signed [15:0] h_V_reg_1503;
wire  signed [31:0] ret_V_4_fu_1197_p2;
reg  signed [31:0] ret_V_4_reg_1508;
wire   [0:0] icmp_ln62_fu_940_p2;
reg   [0:0] icmp_ln62_reg_1513;
wire   [47:0] add_ln544_1_fu_954_p2;
reg   [47:0] add_ln544_1_reg_1518;
wire   [47:0] ret_V_5_fu_962_p2;
reg   [47:0] ret_V_5_reg_1523;
wire    ap_CS_fsm_state30;
wire   [31:0] ret_V_10_fu_1202_p2;
reg   [31:0] ret_V_10_reg_1528;
wire   [0:0] xor_ln62_fu_971_p2;
reg   [0:0] xor_ln62_reg_1533;
wire   [23:0] add_ln1598_4_fu_976_p2;
reg   [23:0] add_ln1598_4_reg_1538;
wire    ap_CS_fsm_state31;
wire   [7:0] jj_fu_986_p2;
reg   [7:0] jj_reg_1546;
wire  signed [47:0] grp_fu_1207_p3;
reg  signed [47:0] ret_V_7_reg_1557;
wire   [0:0] icmp_ln58_fu_981_p2;
wire   [0:0] or_ln62_1_fu_1014_p2;
wire   [0:0] icmp_ln887_fu_1027_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_fu_1036_p2;
reg   [31:0] tmp_reg_1562;
wire   [47:0] tmp1639_fu_1044_p2;
reg   [47:0] tmp1639_reg_1567;
wire    ap_CS_fsm_state32;
wire   [15:0] cin_fu_1054_p2;
reg   [15:0] cin_reg_1575;
wire    ap_CS_fsm_state33;
reg   [31:0] gmem_addr_2_reg_1580;
wire   [0:0] icmp_ln64_fu_1049_p2;
wire   [31:0] add_ln1352_fu_1084_p2;
reg   [31:0] add_ln1352_reg_1586;
wire   [47:0] add_ln544_3_fu_1098_p2;
reg   [47:0] add_ln544_3_reg_1591;
reg   [31:0] gmem_addr_3_reg_1596;
reg   [31:0] gmem_addr_2_read_reg_1602;
reg   [31:0] gmem_addr_3_read_reg_1607;
wire   [31:0] grp_fu_475_p2;
reg   [31:0] tp_reg_1612;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_469_p2;
wire    ap_CS_fsm_state51;
reg   [31:0] gmem_addr_1_reg_1622;
wire    ap_CS_fsm_state53;
reg   [31:0] gmem_addr_read_reg_1628;
reg   [31:0] sum_reg_1633;
wire    ap_CS_fsm_state64;
wire   [31:0] select_ln74_fu_1185_p3;
reg   [31:0] select_ln74_reg_1640;
reg   [15:0] i_op_assign_15_reg_284;
reg   [15:0] i_op_assign_16_reg_295;
reg   [15:0] phi_mul22_reg_306;
reg   [15:0] i_op_assign_17_reg_317;
reg   [31:0] ret_V_3_reg_328;
reg   [15:0] phi_mul19_reg_340;
reg   [31:0] sum_0_reg_351;
reg   [7:0] i_op_assign_18_reg_363;
reg   [15:0] ret_V_9_reg_374;
reg   [7:0] i_op_assign_19_reg_386;
wire    ap_CS_fsm_state52;
reg   [31:0] sum_1_reg_397;
reg   [23:0] ret_V_11_reg_409;
reg   [15:0] i_op_assign_reg_420;
reg   [31:0] sum_2_reg_431;
reg   [31:0] ret_V_12_reg_442;
reg   [31:0] sum_1_be_reg_453;
wire   [63:0] zext_ln73_2_fu_838_p1;
wire  signed [63:0] sext_ln67_fu_1074_p1;
wire   [63:0] zext_ln67_1_fu_1111_p1;
wire   [63:0] zext_ln75_1_fu_1129_p1;
reg   [31:0] grp_fu_469_p0;
reg   [31:0] grp_fu_469_p1;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state65;
wire   [8:0] zext_ln1371_fu_524_p1;
wire   [8:0] add_ln1371_fu_528_p2;
wire   [8:0] sub_ln1371_fu_542_p2;
wire   [7:0] trunc_ln1371_1_fu_548_p4;
wire   [0:0] tmp_7_fu_534_p3;
wire   [7:0] sub_ln1371_1_fu_568_p2;
wire   [7:0] trunc_ln1371_2_fu_558_p4;
wire   [8:0] zext_ln1371_1_fu_582_p1;
wire   [8:0] add_ln1371_1_fu_586_p2;
wire   [8:0] sub_ln1371_2_fu_600_p2;
wire   [7:0] trunc_ln1371_4_fu_606_p4;
wire   [0:0] tmp_8_fu_592_p3;
wire   [7:0] sub_ln1371_3_fu_626_p2;
wire   [7:0] trunc_ln1371_5_fu_616_p4;
wire   [7:0] pad_x_V_fu_574_p3;
wire   [7:0] pad_y_V_fu_632_p3;
wire   [8:0] shl_ln_fu_656_p3;
wire   [16:0] zext_ln1371_2_fu_663_p1;
wire   [16:0] add_ln1371_2_fu_670_p2;
wire   [17:0] zext_ln1371_5_fu_676_p1;
wire   [17:0] zext_ln1371_6_fu_680_p1;
wire   [17:0] sub_ln1371_4_fu_683_p2;
wire  signed [18:0] grp_fu_696_p0;
wire   [8:0] grp_fu_696_p1;
wire   [8:0] shl_ln1371_1_fu_702_p3;
wire   [16:0] zext_ln1371_8_fu_709_p1;
wire   [16:0] add_ln1371_3_fu_716_p2;
wire   [17:0] zext_ln1371_10_fu_722_p1;
wire   [17:0] zext_ln1371_11_fu_726_p1;
wire   [17:0] sub_ln1371_5_fu_729_p2;
wire  signed [18:0] grp_fu_742_p0;
wire   [8:0] grp_fu_742_p1;
wire   [15:0] grp_fu_696_p2;
wire   [15:0] trunc_ln214_fu_760_p1;
wire   [15:0] grp_fu_742_p2;
wire   [15:0] empty_fu_770_p1;
wire   [30:0] zext_ln73_1_fu_825_p1;
wire   [30:0] add_ln73_fu_833_p2;
wire   [31:0] ret_V_2_fu_876_p0;
wire   [15:0] ret_V_2_fu_876_p1;
wire   [15:0] zext_ln68_4_fu_923_p1;
wire  signed [16:0] sext_ln1352_fu_936_p1;
wire   [31:0] add_ln544_fu_945_p2;
wire   [47:0] zext_ln544_fu_950_p1;
wire  signed [31:0] ret_V_5_fu_962_p0;
wire   [15:0] ret_V_5_fu_962_p1;
wire   [15:0] zext_ln68_5_fu_992_p1;
wire  signed [15:0] w_V_fu_996_p2;
wire   [15:0] or_ln62_fu_1001_p2;
wire   [0:0] tmp_9_fu_1006_p3;
wire  signed [16:0] sext_ln887_2_fu_1023_p1;
wire   [31:0] lhs_V_11_cast_fu_1032_p1;
wire   [31:0] tmp1639_fu_1044_p0;
wire   [15:0] tmp1639_fu_1044_p1;
wire   [47:0] zext_ln215_fu_1060_p1;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_8_fu_1064_p2;
wire   [47:0] add_ln67_fu_1069_p2;
wire   [31:0] add_ln544_2_fu_1089_p2;
wire   [47:0] zext_ln544_1_fu_1094_p1;
wire   [48:0] zext_ln67_fu_1103_p1;
wire   [48:0] add_ln67_1_fu_1106_p2;
wire   [48:0] zext_ln75_fu_1121_p1;
wire   [48:0] add_ln75_fu_1124_p2;
wire   [31:0] bitcast_ln74_fu_1139_p1;
wire   [7:0] tmp_1_fu_1142_p4;
wire   [22:0] trunc_ln74_fu_1152_p1;
wire   [0:0] icmp_ln74_1_fu_1162_p2;
wire   [0:0] icmp_ln74_fu_1156_p2;
wire   [0:0] or_ln74_fu_1168_p2;
wire   [0:0] grp_fu_479_p2;
wire   [0:0] rhs_V_fu_1174_p2;
wire   [0:0] ret_V_fu_1180_p2;
wire   [15:0] ret_V_1_fu_1192_p0;
wire   [15:0] ret_V_1_fu_1192_p1;
wire   [15:0] ret_V_4_fu_1197_p1;
wire   [15:0] ret_V_10_fu_1202_p0;
wire   [15:0] ret_V_10_fu_1202_p1;
wire   [15:0] grp_fu_1207_p1;
reg    grp_fu_479_ce;
reg    grp_fu_696_ap_start;
wire    grp_fu_696_ap_done;
reg    grp_fu_742_ap_start;
wire    grp_fu_742_ap_done;
reg   [71:0] ap_NS_fsm;
wire   [18:0] grp_fu_696_p10;
wire   [18:0] grp_fu_742_p10;
wire   [31:0] ret_V_10_fu_1202_p00;
wire   [31:0] ret_V_1_fu_1192_p00;
wire   [47:0] ret_V_2_fu_876_p00;
wire   [47:0] tmp1639_fu_1044_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 72'd1;
end

Conv_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Conv_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .CHout_V(CHout_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .mode_V(mode_V),
    .relu_en_V(relu_en_V),
    .feature_in(feature_in),
    .W(W),
    .bias(bias),
    .feature_out(feature_out)
);

Conv_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Conv_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_1622),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(select_ln74_reg_1640),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_469_p0),
    .din1(grp_fu_469_p1),
    .ce(1'b1),
    .dout(grp_fu_469_p2)
);

Conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_2_read_reg_1602),
    .din1(gmem_addr_3_read_reg_1607),
    .ce(1'b1),
    .dout(grp_fu_475_p2)
);

Conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_reg_1633),
    .din1(32'd0),
    .ce(grp_fu_479_ce),
    .opcode(5'd4),
    .dout(grp_fu_479_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_696_ap_start),
    .done(grp_fu_696_ap_done),
    .din0(grp_fu_696_p0),
    .din1(grp_fu_696_p1),
    .ce(1'b1),
    .dout(grp_fu_696_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_742_ap_start),
    .done(grp_fu_742_ap_done),
    .din0(grp_fu_742_p0),
    .din1(grp_fu_742_p1),
    .ce(1'b1),
    .dout(grp_fu_742_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U6(
    .din0(ret_V_1_fu_1192_p0),
    .din1(ret_V_1_fu_1192_p1),
    .dout(ret_V_1_fu_1192_p2)
);

Conv_mul_mul_16s_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16s_g8j_U7(
    .din0(h_V_fu_927_p2),
    .din1(ret_V_4_fu_1197_p1),
    .dout(ret_V_4_fu_1197_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U8(
    .din0(ret_V_10_fu_1202_p0),
    .din1(ret_V_10_fu_1202_p1),
    .dout(ret_V_10_fu_1202_p2)
);

Conv_mac_muladd_1hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Conv_mac_muladd_1hbi_U9(
    .din0(w_V_fu_996_p2),
    .din1(grp_fu_1207_p1),
    .din2(ret_V_5_reg_1523),
    .dout(grp_fu_1207_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln52_fu_857_p2 == 1'd1))) begin
        i_op_assign_15_reg_284 <= cout_reg_1422;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_op_assign_15_reg_284 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln53_fu_891_p2 == 1'd1))) begin
        i_op_assign_16_reg_295 <= i_reg_1447;
    end else if (((icmp_ln51_fu_814_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        i_op_assign_16_reg_295 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_op_assign_17_reg_317 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        i_op_assign_17_reg_317 <= j_reg_1480;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln58_fu_981_p2 == 1'd1))) begin
        i_op_assign_18_reg_363 <= ii_reg_1498;
    end else if (((icmp_ln53_fu_891_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        i_op_assign_18_reg_363 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        i_op_assign_19_reg_386 <= jj_reg_1546;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i_op_assign_19_reg_386 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_op_assign_reg_420 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        i_op_assign_reg_420 <= cin_reg_1575;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        phi_mul19_reg_340 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        phi_mul19_reg_340 <= add_ln1598_1_reg_1467;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln53_fu_891_p2 == 1'd1))) begin
        phi_mul22_reg_306 <= add_ln1598_reg_1439;
    end else if (((icmp_ln51_fu_814_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        phi_mul22_reg_306 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        ret_V_11_reg_409 <= add_ln1598_4_reg_1538;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        ret_V_11_reg_409 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ret_V_12_reg_442 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        ret_V_12_reg_442 <= add_ln1352_reg_1586;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ret_V_3_reg_328 <= 32'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        ret_V_3_reg_328 <= add_ln1598_2_reg_1472;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln58_fu_981_p2 == 1'd1))) begin
        ret_V_9_reg_374 <= add_ln1598_3_reg_1490;
    end else if (((icmp_ln53_fu_891_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        ret_V_9_reg_374 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln58_fu_981_p2 == 1'd1))) begin
        sum_0_reg_351 <= sum_1_reg_397;
    end else if (((icmp_ln53_fu_891_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        sum_0_reg_351 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln64_fu_1049_p2 == 1'd1))) begin
        sum_1_be_reg_453 <= sum_2_reg_431;
    end else if ((((icmp_ln58_fu_981_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31) & (or_ln62_1_fu_1014_p2 == 1'd1)) | ((icmp_ln887_fu_1027_p2 == 1'd0) & (or_ln62_1_fu_1014_p2 == 1'd0) & (icmp_ln58_fu_981_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31)))) begin
        sum_1_be_reg_453 <= sum_1_reg_397;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        sum_1_reg_397 <= sum_1_be_reg_453;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        sum_1_reg_397 <= sum_0_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sum_2_reg_431 <= sum_1_reg_397;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        sum_2_reg_431 <= grp_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        CHin_V_read_reg_1261 <= CHin_V;
        CHout_V_read_reg_1243 <= CHout_V;
        Hin_V_read_reg_1256 <= Hin_V;
        Kx_V_read_reg_1236 <= Kx_V;
        Ky_V_read_reg_1230 <= Ky_V;
        Sx_V_read_reg_1224 <= Sx_V;
        Sy_V_read_reg_1218 <= Sy_V;
        Win_V_read_reg_1250 <= Win_V;
        relu_en_V_read_reg_1213 <= relu_en_V;
        select_ln43_1_reg_1294 <= select_ln43_1_fu_648_p3;
        select_ln43_reg_1288 <= select_ln43_fu_640_p3;
        tmp_3_reg_1268 <= {{feature_out[31:2]}};
        tmp_4_reg_1273 <= {{bias[31:2]}};
        tmp_5_reg_1278 <= {{W[31:2]}};
        tmp_6_reg_1283 <= {{feature_in[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        Wout_V_reg_1350 <= Wout_V_fu_764_p2;
        add_ln51_reg_1355 <= add_ln51_fu_774_p2;
        p_cast24_reg_1340[29 : 0] <= p_cast24_fu_754_p1[29 : 0];
        p_cast25_reg_1335[29 : 0] <= p_cast25_fu_751_p1[29 : 0];
        p_cast26_reg_1330[29 : 0] <= p_cast26_fu_748_p1[29 : 0];
        p_cast_reg_1345[29 : 0] <= p_cast_fu_757_p1[29 : 0];
        rhs_V_11_cast3_reg_1402[15 : 0] <= rhs_V_11_cast3_fu_805_p1[15 : 0];
        rhs_V_1_cast_reg_1370[15 : 0] <= rhs_V_1_cast_fu_786_p1[15 : 0];
        rhs_V_1_reg_1375[15 : 0] <= rhs_V_1_fu_790_p1[15 : 0];
        rhs_V_2_reg_1392[15 : 0] <= rhs_V_2_fu_799_p1[15 : 0];
        zext_ln215_1_reg_1397[7 : 0] <= zext_ln215_1_fu_802_p1[7 : 0];
        zext_ln215_2_reg_1408[15 : 0] <= zext_ln215_2_fu_808_p1[15 : 0];
        zext_ln51_reg_1413[15 : 0] <= zext_ln51_fu_811_p1[15 : 0];
        zext_ln68_1_reg_1365[7 : 0] <= zext_ln68_1_fu_783_p1[7 : 0];
        zext_ln68_2_reg_1382[7 : 0] <= zext_ln68_2_fu_793_p1[7 : 0];
        zext_ln68_3_reg_1387[7 : 0] <= zext_ln68_3_fu_796_p1[7 : 0];
        zext_ln68_reg_1360[7 : 0] <= zext_ln68_fu_780_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_1049_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        add_ln1352_reg_1586 <= add_ln1352_fu_1084_p2;
        add_ln544_3_reg_1591 <= add_ln544_3_fu_1098_p2;
        gmem_addr_2_reg_1580 <= sext_ln67_fu_1074_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln1598_1_reg_1467 <= add_ln1598_1_fu_881_p2;
        add_ln1598_2_reg_1472 <= add_ln1598_2_fu_886_p2;
        j_reg_1480 <= j_fu_896_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29))) begin
        add_ln1598_3_reg_1490 <= add_ln1598_3_fu_907_p2;
        ii_reg_1498 <= ii_fu_917_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        add_ln1598_4_reg_1538 <= add_ln1598_4_fu_976_p2;
        jj_reg_1546 <= jj_fu_986_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln1598_reg_1439 <= add_ln1598_fu_848_p2;
        i_reg_1447 <= i_fu_862_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln57_fu_912_p2 == 1'd1))) begin
        add_ln544_1_reg_1518 <= add_ln544_1_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        cin_reg_1575 <= cin_fu_1054_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        cout_reg_1422 <= cout_fu_819_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        gmem_addr_1_reg_1622 <= zext_ln75_1_fu_1129_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        gmem_addr_2_read_reg_1602 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        gmem_addr_3_read_reg_1607 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem_addr_3_reg_1596 <= zext_ln67_1_fu_1111_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        gmem_addr_read_reg_1628 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_814_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        gmem_addr_reg_1433[30 : 0] <= zext_ln73_2_fu_838_p1[30 : 0];
        zext_ln73_reg_1427[15 : 0] <= zext_ln73_fu_829_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln57_fu_912_p2 == 1'd0))) begin
        h_V_reg_1503 <= h_V_fu_927_p2;
        icmp_ln62_reg_1513 <= icmp_ln62_fu_940_p2;
        ret_V_4_reg_1508 <= ret_V_4_fu_1197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ret_V_10_reg_1528 <= ret_V_10_fu_1202_p2;
        ret_V_5_reg_1523 <= ret_V_5_fu_962_p2;
        xor_ln62_reg_1533 <= xor_ln62_fu_971_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_857_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        ret_V_1_reg_1452 <= ret_V_1_fu_1192_p2;
        sub_ln68_reg_1457 <= sub_ln68_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ret_V_2_reg_1462 <= ret_V_2_fu_876_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln62_1_fu_1014_p2 == 1'd0) & (icmp_ln58_fu_981_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln887_fu_1027_p2 == 1'd1))) begin
        ret_V_7_reg_1557 <= grp_fu_1207_p3;
        tmp_reg_1562 <= tmp_fu_1036_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        select_ln74_reg_1640 <= select_ln74_fu_1185_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_891_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        sub_ln68_1_reg_1485 <= sub_ln68_1_fu_902_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        sum_reg_1633 <= grp_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp1639_reg_1567 <= tmp1639_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tp_reg_1612 <= grp_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln1371_4_reg_1300[15 : 0] <= zext_ln1371_4_fu_667_p1[15 : 0];
        zext_ln1371_9_reg_1315[15 : 0] <= zext_ln1371_9_fu_713_p1[15 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln51_fu_814_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln51_fu_814_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        gmem_ARADDR = gmem_addr_3_reg_1596;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem_ARADDR = gmem_addr_2_reg_1580;
    end else if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln57_fu_912_p2 == 1'd1))) begin
        gmem_ARADDR = gmem_addr_reg_1433;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln57_fu_912_p2 == 1'd1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | ((1'b1 == ap_CS_fsm_state29) & (icmp_ln57_fu_912_p2 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state59))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_469_p0 = sum_0_reg_351;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_469_p0 = sum_2_reg_431;
    end else begin
        grp_fu_469_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_469_p1 = gmem_addr_read_reg_1628;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_469_p1 = tp_reg_1612;
    end else begin
        grp_fu_469_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66)))) begin
        grp_fu_479_ce = 1'b1;
    end else begin
        grp_fu_479_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_696_ap_start = 1'b1;
    end else begin
        grp_fu_696_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_742_ap_start = 1'b1;
    end else begin
        grp_fu_742_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln51_fu_814_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln52_fu_857_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln53_fu_891_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln57_fu_912_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln57_fu_912_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln58_fu_981_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((or_ln62_1_fu_1014_p2 == 1'd0) & (icmp_ln58_fu_981_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln887_fu_1027_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln64_fu_1049_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Wout_V_fu_764_p2 = (16'd1 + trunc_ln214_fu_760_p1);

assign add_ln1352_fu_1084_p2 = (zext_ln51_reg_1413 + ret_V_12_reg_442);

assign add_ln1371_1_fu_586_p2 = ($signed(9'd511) + $signed(zext_ln1371_1_fu_582_p1));

assign add_ln1371_2_fu_670_p2 = (zext_ln1371_4_fu_667_p1 + zext_ln1371_2_fu_663_p1);

assign add_ln1371_3_fu_716_p2 = (zext_ln1371_9_fu_713_p1 + zext_ln1371_8_fu_709_p1);

assign add_ln1371_fu_528_p2 = ($signed(9'd511) + $signed(zext_ln1371_fu_524_p1));

assign add_ln1598_1_fu_881_p2 = (phi_mul19_reg_340 + zext_ln68_3_reg_1387);

assign add_ln1598_2_fu_886_p2 = (ret_V_3_reg_328 + zext_ln51_reg_1413);

assign add_ln1598_3_fu_907_p2 = (ret_V_9_reg_374 + zext_ln215_1_reg_1397);

assign add_ln1598_4_fu_976_p2 = (ret_V_11_reg_409 + zext_ln215_2_reg_1408);

assign add_ln1598_fu_848_p2 = (phi_mul22_reg_306 + zext_ln68_2_reg_1382);

assign add_ln51_fu_774_p2 = (16'd1 + empty_fu_770_p1);

assign add_ln544_1_fu_954_p2 = (ret_V_2_reg_1462 + zext_ln544_fu_950_p1);

assign add_ln544_2_fu_1089_p2 = (zext_ln73_reg_1427 + ret_V_12_reg_442);

assign add_ln544_3_fu_1098_p2 = (tmp1639_reg_1567 + zext_ln544_1_fu_1094_p1);

assign add_ln544_fu_945_p2 = (zext_ln73_reg_1427 + ret_V_3_reg_328);

assign add_ln67_1_fu_1106_p2 = (zext_ln67_fu_1103_p1 + p_cast24_reg_1340);

assign add_ln67_fu_1069_p2 = (ret_V_8_fu_1064_p2 + p_cast_reg_1345);

assign add_ln73_fu_833_p2 = (zext_ln73_1_fu_825_p1 + p_cast25_reg_1335);

assign add_ln75_fu_1124_p2 = (p_cast26_reg_1330 + zext_ln75_fu_1121_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

always @ (*) begin
    ap_block_state29_io = ((gmem_ARREADY == 1'b0) & (icmp_ln57_fu_912_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln74_fu_1139_p1 = sum_reg_1633;

assign cin_fu_1054_p2 = (i_op_assign_reg_420 + 16'd1);

assign cout_fu_819_p2 = (i_op_assign_15_reg_284 + 16'd1);

assign empty_fu_770_p1 = grp_fu_742_p2[15:0];

assign grp_fu_1207_p1 = rhs_V_1_reg_1375;

assign grp_fu_696_p0 = $signed(sub_ln1371_4_fu_683_p2);

assign grp_fu_696_p1 = grp_fu_696_p10;

assign grp_fu_696_p10 = Sx_V_read_reg_1224;

assign grp_fu_742_p0 = $signed(sub_ln1371_5_fu_729_p2);

assign grp_fu_742_p1 = grp_fu_742_p10;

assign grp_fu_742_p10 = Sy_V_read_reg_1218;

assign h_V_fu_927_p2 = (sub_ln68_reg_1457 + zext_ln68_4_fu_923_p1);

assign i_fu_862_p2 = (i_op_assign_16_reg_295 + 16'd1);

assign icmp_ln51_fu_814_p2 = ((i_op_assign_15_reg_284 == CHout_V_read_reg_1243) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_857_p2 = ((i_op_assign_16_reg_295 == add_ln51_reg_1355) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_891_p2 = ((i_op_assign_17_reg_317 == Wout_V_reg_1350) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_912_p2 = ((i_op_assign_18_reg_363 == Ky_V_read_reg_1230) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_981_p2 = ((i_op_assign_19_reg_386 == Kx_V_read_reg_1236) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_940_p2 = (($signed(sext_ln1352_fu_936_p1) < $signed(zext_ln1371_9_reg_1315)) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_1049_p2 = ((i_op_assign_reg_420 == CHin_V_read_reg_1261) ? 1'b1 : 1'b0);

assign icmp_ln74_1_fu_1162_p2 = ((trunc_ln74_fu_1152_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_1156_p2 = ((tmp_1_fu_1142_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_1027_p2 = (($signed(sext_ln887_2_fu_1023_p1) < $signed(zext_ln1371_4_reg_1300)) ? 1'b1 : 1'b0);

assign ii_fu_917_p2 = (i_op_assign_18_reg_363 + 8'd1);

assign j_fu_896_p2 = (i_op_assign_17_reg_317 + 16'd1);

assign jj_fu_986_p2 = (i_op_assign_19_reg_386 + 8'd1);

assign lhs_V_11_cast_fu_1032_p1 = ret_V_11_reg_409;

assign or_ln62_1_fu_1014_p2 = (xor_ln62_reg_1533 | tmp_9_fu_1006_p3);

assign or_ln62_fu_1001_p2 = (w_V_fu_996_p2 | h_V_reg_1503);

assign or_ln74_fu_1168_p2 = (icmp_ln74_fu_1156_p2 | icmp_ln74_1_fu_1162_p2);

assign p_cast24_fu_754_p1 = tmp_5_reg_1278;

assign p_cast25_fu_751_p1 = tmp_4_reg_1273;

assign p_cast26_fu_748_p1 = tmp_3_reg_1268;

assign p_cast_fu_757_p1 = tmp_6_reg_1283;

assign pad_x_V_fu_574_p3 = ((tmp_7_fu_534_p3[0:0] === 1'b1) ? sub_ln1371_1_fu_568_p2 : trunc_ln1371_2_fu_558_p4);

assign pad_y_V_fu_632_p3 = ((tmp_8_fu_592_p3[0:0] === 1'b1) ? sub_ln1371_3_fu_626_p2 : trunc_ln1371_5_fu_616_p4);

assign ret_V_10_fu_1202_p0 = ret_V_10_fu_1202_p00;

assign ret_V_10_fu_1202_p00 = ret_V_9_reg_374;

assign ret_V_10_fu_1202_p1 = rhs_V_1_reg_1375;

assign ret_V_1_fu_1192_p0 = ret_V_1_fu_1192_p00;

assign ret_V_1_fu_1192_p00 = i_op_assign_16_reg_295;

assign ret_V_1_fu_1192_p1 = rhs_V_1_cast_reg_1370;

assign ret_V_2_fu_876_p0 = ret_V_2_fu_876_p00;

assign ret_V_2_fu_876_p00 = ret_V_1_reg_1452;

assign ret_V_2_fu_876_p1 = rhs_V_11_cast3_reg_1402;

assign ret_V_2_fu_876_p2 = (ret_V_2_fu_876_p0 * ret_V_2_fu_876_p1);

assign ret_V_4_fu_1197_p1 = rhs_V_1_reg_1375;

assign ret_V_5_fu_962_p0 = ret_V_4_reg_1508;

assign ret_V_5_fu_962_p1 = rhs_V_2_reg_1392;

assign ret_V_5_fu_962_p2 = ($signed(ret_V_5_fu_962_p0) * $signed({{1'b0}, {ret_V_5_fu_962_p1}}));

assign ret_V_8_fu_1064_p2 = ($signed(zext_ln215_fu_1060_p1) + $signed(ret_V_7_reg_1557));

assign ret_V_fu_1180_p2 = (rhs_V_fu_1174_p2 & relu_en_V_read_reg_1213);

assign rhs_V_11_cast3_fu_805_p1 = CHout_V_read_reg_1243;

assign rhs_V_1_cast_fu_786_p1 = Wout_V_fu_764_p2;

assign rhs_V_1_fu_790_p1 = CHin_V_read_reg_1261;

assign rhs_V_2_fu_799_p1 = Win_V_read_reg_1250;

assign rhs_V_fu_1174_p2 = (or_ln74_fu_1168_p2 & grp_fu_479_p2);

assign select_ln43_1_fu_648_p3 = ((mode_V[0:0] === 1'b1) ? pad_y_V_fu_632_p3 : 8'd0);

assign select_ln43_fu_640_p3 = ((mode_V[0:0] === 1'b1) ? pad_x_V_fu_574_p3 : 8'd0);

assign select_ln74_fu_1185_p3 = ((ret_V_fu_1180_p2[0:0] === 1'b1) ? 32'd0 : sum_reg_1633);

assign sext_ln1352_fu_936_p1 = h_V_fu_927_p2;

assign sext_ln67_fu_1074_p1 = $signed(add_ln67_fu_1069_p2);

assign sext_ln887_2_fu_1023_p1 = w_V_fu_996_p2;

assign shl_ln1371_1_fu_702_p3 = {{select_ln43_1_reg_1294}, {1'd0}};

assign shl_ln_fu_656_p3 = {{select_ln43_reg_1288}, {1'd0}};

assign sub_ln1371_1_fu_568_p2 = (8'd0 - trunc_ln1371_1_fu_548_p4);

assign sub_ln1371_2_fu_600_p2 = (9'd1 - zext_ln1371_1_fu_582_p1);

assign sub_ln1371_3_fu_626_p2 = (8'd0 - trunc_ln1371_4_fu_606_p4);

assign sub_ln1371_4_fu_683_p2 = (zext_ln1371_5_fu_676_p1 - zext_ln1371_6_fu_680_p1);

assign sub_ln1371_5_fu_729_p2 = (zext_ln1371_10_fu_722_p1 - zext_ln1371_11_fu_726_p1);

assign sub_ln1371_fu_542_p2 = (9'd1 - zext_ln1371_fu_524_p1);

assign sub_ln68_1_fu_902_p2 = (phi_mul19_reg_340 - zext_ln68_1_reg_1365);

assign sub_ln68_fu_868_p2 = (phi_mul22_reg_306 - zext_ln68_reg_1360);

assign tmp1639_fu_1044_p0 = tmp1639_fu_1044_p00;

assign tmp1639_fu_1044_p00 = tmp_reg_1562;

assign tmp1639_fu_1044_p1 = rhs_V_11_cast3_reg_1402;

assign tmp1639_fu_1044_p2 = (tmp1639_fu_1044_p0 * tmp1639_fu_1044_p1);

assign tmp_1_fu_1142_p4 = {{bitcast_ln74_fu_1139_p1[30:23]}};

assign tmp_7_fu_534_p3 = add_ln1371_fu_528_p2[32'd8];

assign tmp_8_fu_592_p3 = add_ln1371_1_fu_586_p2[32'd8];

assign tmp_9_fu_1006_p3 = or_ln62_fu_1001_p2[32'd15];

assign tmp_fu_1036_p2 = (ret_V_10_reg_1528 + lhs_V_11_cast_fu_1032_p1);

assign trunc_ln1371_1_fu_548_p4 = {{sub_ln1371_fu_542_p2[8:1]}};

assign trunc_ln1371_2_fu_558_p4 = {{add_ln1371_fu_528_p2[8:1]}};

assign trunc_ln1371_4_fu_606_p4 = {{sub_ln1371_2_fu_600_p2[8:1]}};

assign trunc_ln1371_5_fu_616_p4 = {{add_ln1371_1_fu_586_p2[8:1]}};

assign trunc_ln214_fu_760_p1 = grp_fu_696_p2[15:0];

assign trunc_ln74_fu_1152_p1 = bitcast_ln74_fu_1139_p1[22:0];

assign w_V_fu_996_p2 = (sub_ln68_1_reg_1485 + zext_ln68_5_fu_992_p1);

assign xor_ln62_fu_971_p2 = (icmp_ln62_reg_1513 ^ 1'd1);

assign zext_ln1371_10_fu_722_p1 = add_ln1371_3_fu_716_p2;

assign zext_ln1371_11_fu_726_p1 = Ky_V_read_reg_1230;

assign zext_ln1371_1_fu_582_p1 = Ky_V;

assign zext_ln1371_2_fu_663_p1 = shl_ln_fu_656_p3;

assign zext_ln1371_4_fu_667_p1 = Win_V_read_reg_1250;

assign zext_ln1371_5_fu_676_p1 = add_ln1371_2_fu_670_p2;

assign zext_ln1371_6_fu_680_p1 = Kx_V_read_reg_1236;

assign zext_ln1371_8_fu_709_p1 = shl_ln1371_1_fu_702_p3;

assign zext_ln1371_9_fu_713_p1 = Hin_V_read_reg_1256;

assign zext_ln1371_fu_524_p1 = Kx_V;

assign zext_ln215_1_fu_802_p1 = Kx_V_read_reg_1236;

assign zext_ln215_2_fu_808_p1 = CHin_V_read_reg_1261;

assign zext_ln215_fu_1060_p1 = i_op_assign_reg_420;

assign zext_ln51_fu_811_p1 = CHout_V_read_reg_1243;

assign zext_ln544_1_fu_1094_p1 = add_ln544_2_fu_1089_p2;

assign zext_ln544_fu_950_p1 = add_ln544_fu_945_p2;

assign zext_ln67_1_fu_1111_p1 = add_ln67_1_fu_1106_p2;

assign zext_ln67_fu_1103_p1 = add_ln544_3_reg_1591;

assign zext_ln68_1_fu_783_p1 = select_ln43_reg_1288;

assign zext_ln68_2_fu_793_p1 = Sy_V_read_reg_1218;

assign zext_ln68_3_fu_796_p1 = Sx_V_read_reg_1224;

assign zext_ln68_4_fu_923_p1 = i_op_assign_18_reg_363;

assign zext_ln68_5_fu_992_p1 = i_op_assign_19_reg_386;

assign zext_ln68_fu_780_p1 = select_ln43_1_reg_1294;

assign zext_ln73_1_fu_825_p1 = i_op_assign_15_reg_284;

assign zext_ln73_2_fu_838_p1 = add_ln73_fu_833_p2;

assign zext_ln73_fu_829_p1 = i_op_assign_15_reg_284;

assign zext_ln75_1_fu_1129_p1 = add_ln75_fu_1124_p2;

assign zext_ln75_fu_1121_p1 = add_ln544_1_reg_1518;

always @ (posedge ap_clk) begin
    zext_ln1371_4_reg_1300[16] <= 1'b0;
    zext_ln1371_9_reg_1315[16] <= 1'b0;
    p_cast26_reg_1330[48:30] <= 19'b0000000000000000000;
    p_cast25_reg_1335[30] <= 1'b0;
    p_cast24_reg_1340[48:30] <= 19'b0000000000000000000;
    p_cast_reg_1345[47:30] <= 18'b000000000000000000;
    zext_ln68_reg_1360[15:8] <= 8'b00000000;
    zext_ln68_1_reg_1365[15:8] <= 8'b00000000;
    rhs_V_1_cast_reg_1370[31:16] <= 16'b0000000000000000;
    rhs_V_1_reg_1375[31:16] <= 16'b0000000000000000;
    zext_ln68_2_reg_1382[15:8] <= 8'b00000000;
    zext_ln68_3_reg_1387[15:8] <= 8'b00000000;
    rhs_V_2_reg_1392[47:16] <= 32'b00000000000000000000000000000000;
    zext_ln215_1_reg_1397[15:8] <= 8'b00000000;
    rhs_V_11_cast3_reg_1402[47:16] <= 32'b00000000000000000000000000000000;
    zext_ln215_2_reg_1408[23:16] <= 8'b00000000;
    zext_ln51_reg_1413[31:16] <= 16'b0000000000000000;
    zext_ln73_reg_1427[31:16] <= 16'b0000000000000000;
    gmem_addr_reg_1433[31] <= 1'b0;
end

endmodule //Conv
