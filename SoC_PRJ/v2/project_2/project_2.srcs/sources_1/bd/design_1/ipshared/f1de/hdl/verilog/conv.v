// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=35,HLS_SYN_FF=8352,HLS_SYN_LUT=9070,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst_n,
        m_axi_AXI_F_AWVALID,
        m_axi_AXI_F_AWREADY,
        m_axi_AXI_F_AWADDR,
        m_axi_AXI_F_AWID,
        m_axi_AXI_F_AWLEN,
        m_axi_AXI_F_AWSIZE,
        m_axi_AXI_F_AWBURST,
        m_axi_AXI_F_AWLOCK,
        m_axi_AXI_F_AWCACHE,
        m_axi_AXI_F_AWPROT,
        m_axi_AXI_F_AWQOS,
        m_axi_AXI_F_AWREGION,
        m_axi_AXI_F_AWUSER,
        m_axi_AXI_F_WVALID,
        m_axi_AXI_F_WREADY,
        m_axi_AXI_F_WDATA,
        m_axi_AXI_F_WSTRB,
        m_axi_AXI_F_WLAST,
        m_axi_AXI_F_WID,
        m_axi_AXI_F_WUSER,
        m_axi_AXI_F_ARVALID,
        m_axi_AXI_F_ARREADY,
        m_axi_AXI_F_ARADDR,
        m_axi_AXI_F_ARID,
        m_axi_AXI_F_ARLEN,
        m_axi_AXI_F_ARSIZE,
        m_axi_AXI_F_ARBURST,
        m_axi_AXI_F_ARLOCK,
        m_axi_AXI_F_ARCACHE,
        m_axi_AXI_F_ARPROT,
        m_axi_AXI_F_ARQOS,
        m_axi_AXI_F_ARREGION,
        m_axi_AXI_F_ARUSER,
        m_axi_AXI_F_RVALID,
        m_axi_AXI_F_RREADY,
        m_axi_AXI_F_RDATA,
        m_axi_AXI_F_RLAST,
        m_axi_AXI_F_RID,
        m_axi_AXI_F_RUSER,
        m_axi_AXI_F_RRESP,
        m_axi_AXI_F_BVALID,
        m_axi_AXI_F_BREADY,
        m_axi_AXI_F_BRESP,
        m_axi_AXI_F_BID,
        m_axi_AXI_F_BUSER,
        m_axi_AXI_W_AWVALID,
        m_axi_AXI_W_AWREADY,
        m_axi_AXI_W_AWADDR,
        m_axi_AXI_W_AWID,
        m_axi_AXI_W_AWLEN,
        m_axi_AXI_W_AWSIZE,
        m_axi_AXI_W_AWBURST,
        m_axi_AXI_W_AWLOCK,
        m_axi_AXI_W_AWCACHE,
        m_axi_AXI_W_AWPROT,
        m_axi_AXI_W_AWQOS,
        m_axi_AXI_W_AWREGION,
        m_axi_AXI_W_AWUSER,
        m_axi_AXI_W_WVALID,
        m_axi_AXI_W_WREADY,
        m_axi_AXI_W_WDATA,
        m_axi_AXI_W_WSTRB,
        m_axi_AXI_W_WLAST,
        m_axi_AXI_W_WID,
        m_axi_AXI_W_WUSER,
        m_axi_AXI_W_ARVALID,
        m_axi_AXI_W_ARREADY,
        m_axi_AXI_W_ARADDR,
        m_axi_AXI_W_ARID,
        m_axi_AXI_W_ARLEN,
        m_axi_AXI_W_ARSIZE,
        m_axi_AXI_W_ARBURST,
        m_axi_AXI_W_ARLOCK,
        m_axi_AXI_W_ARCACHE,
        m_axi_AXI_W_ARPROT,
        m_axi_AXI_W_ARQOS,
        m_axi_AXI_W_ARREGION,
        m_axi_AXI_W_ARUSER,
        m_axi_AXI_W_RVALID,
        m_axi_AXI_W_RREADY,
        m_axi_AXI_W_RDATA,
        m_axi_AXI_W_RLAST,
        m_axi_AXI_W_RID,
        m_axi_AXI_W_RUSER,
        m_axi_AXI_W_RRESP,
        m_axi_AXI_W_BVALID,
        m_axi_AXI_W_BREADY,
        m_axi_AXI_W_BRESP,
        m_axi_AXI_W_BID,
        m_axi_AXI_W_BUSER,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 95'd1;
parameter    ap_ST_fsm_state2 = 95'd2;
parameter    ap_ST_fsm_state3 = 95'd4;
parameter    ap_ST_fsm_state4 = 95'd8;
parameter    ap_ST_fsm_state5 = 95'd16;
parameter    ap_ST_fsm_state6 = 95'd32;
parameter    ap_ST_fsm_state7 = 95'd64;
parameter    ap_ST_fsm_state8 = 95'd128;
parameter    ap_ST_fsm_state9 = 95'd256;
parameter    ap_ST_fsm_state10 = 95'd512;
parameter    ap_ST_fsm_state11 = 95'd1024;
parameter    ap_ST_fsm_state12 = 95'd2048;
parameter    ap_ST_fsm_state13 = 95'd4096;
parameter    ap_ST_fsm_state14 = 95'd8192;
parameter    ap_ST_fsm_state15 = 95'd16384;
parameter    ap_ST_fsm_state16 = 95'd32768;
parameter    ap_ST_fsm_state17 = 95'd65536;
parameter    ap_ST_fsm_state18 = 95'd131072;
parameter    ap_ST_fsm_state19 = 95'd262144;
parameter    ap_ST_fsm_state20 = 95'd524288;
parameter    ap_ST_fsm_state21 = 95'd1048576;
parameter    ap_ST_fsm_state22 = 95'd2097152;
parameter    ap_ST_fsm_state23 = 95'd4194304;
parameter    ap_ST_fsm_state24 = 95'd8388608;
parameter    ap_ST_fsm_state25 = 95'd16777216;
parameter    ap_ST_fsm_state26 = 95'd33554432;
parameter    ap_ST_fsm_state27 = 95'd67108864;
parameter    ap_ST_fsm_state28 = 95'd134217728;
parameter    ap_ST_fsm_state29 = 95'd268435456;
parameter    ap_ST_fsm_state30 = 95'd536870912;
parameter    ap_ST_fsm_state31 = 95'd1073741824;
parameter    ap_ST_fsm_state32 = 95'd2147483648;
parameter    ap_ST_fsm_state33 = 95'd4294967296;
parameter    ap_ST_fsm_state34 = 95'd8589934592;
parameter    ap_ST_fsm_state35 = 95'd17179869184;
parameter    ap_ST_fsm_state36 = 95'd34359738368;
parameter    ap_ST_fsm_state37 = 95'd68719476736;
parameter    ap_ST_fsm_state38 = 95'd137438953472;
parameter    ap_ST_fsm_state39 = 95'd274877906944;
parameter    ap_ST_fsm_state40 = 95'd549755813888;
parameter    ap_ST_fsm_state41 = 95'd1099511627776;
parameter    ap_ST_fsm_state42 = 95'd2199023255552;
parameter    ap_ST_fsm_state43 = 95'd4398046511104;
parameter    ap_ST_fsm_state44 = 95'd8796093022208;
parameter    ap_ST_fsm_state45 = 95'd17592186044416;
parameter    ap_ST_fsm_state46 = 95'd35184372088832;
parameter    ap_ST_fsm_state47 = 95'd70368744177664;
parameter    ap_ST_fsm_state48 = 95'd140737488355328;
parameter    ap_ST_fsm_state49 = 95'd281474976710656;
parameter    ap_ST_fsm_state50 = 95'd562949953421312;
parameter    ap_ST_fsm_state51 = 95'd1125899906842624;
parameter    ap_ST_fsm_state52 = 95'd2251799813685248;
parameter    ap_ST_fsm_state53 = 95'd4503599627370496;
parameter    ap_ST_fsm_state54 = 95'd9007199254740992;
parameter    ap_ST_fsm_state55 = 95'd18014398509481984;
parameter    ap_ST_fsm_state56 = 95'd36028797018963968;
parameter    ap_ST_fsm_state57 = 95'd72057594037927936;
parameter    ap_ST_fsm_state58 = 95'd144115188075855872;
parameter    ap_ST_fsm_state59 = 95'd288230376151711744;
parameter    ap_ST_fsm_state60 = 95'd576460752303423488;
parameter    ap_ST_fsm_state61 = 95'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 95'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 95'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 95'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 95'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 95'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 95'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 95'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 95'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 95'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 95'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 95'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 95'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 95'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 95'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 95'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 95'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 95'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 95'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 95'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 95'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 95'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 95'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 95'd9671406556917033397649408;
parameter    ap_ST_fsm_pp0_stage0 = 95'd19342813113834066795298816;
parameter    ap_ST_fsm_state97 = 95'd38685626227668133590597632;
parameter    ap_ST_fsm_state98 = 95'd77371252455336267181195264;
parameter    ap_ST_fsm_state99 = 95'd154742504910672534362390528;
parameter    ap_ST_fsm_state100 = 95'd309485009821345068724781056;
parameter    ap_ST_fsm_state101 = 95'd618970019642690137449562112;
parameter    ap_ST_fsm_state102 = 95'd1237940039285380274899124224;
parameter    ap_ST_fsm_state103 = 95'd2475880078570760549798248448;
parameter    ap_ST_fsm_state104 = 95'd4951760157141521099596496896;
parameter    ap_ST_fsm_state105 = 95'd9903520314283042199192993792;
parameter    ap_ST_fsm_state106 = 95'd19807040628566084398385987584;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_F_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_F_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_F_DATA_WIDTH = 128;
parameter    C_M_AXI_AXI_F_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_F_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_F_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_F_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_F_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_F_USER_VALUE = 0;
parameter    C_M_AXI_AXI_F_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_F_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_W_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_W_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_W_DATA_WIDTH = 128;
parameter    C_M_AXI_AXI_W_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_W_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_W_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_W_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_W_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_W_USER_VALUE = 0;
parameter    C_M_AXI_AXI_W_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_W_CACHE_VALUE = 3;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_F_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_W_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_AXI_F_AWVALID;
input   m_axi_AXI_F_AWREADY;
output  [C_M_AXI_AXI_F_ADDR_WIDTH - 1:0] m_axi_AXI_F_AWADDR;
output  [C_M_AXI_AXI_F_ID_WIDTH - 1:0] m_axi_AXI_F_AWID;
output  [7:0] m_axi_AXI_F_AWLEN;
output  [2:0] m_axi_AXI_F_AWSIZE;
output  [1:0] m_axi_AXI_F_AWBURST;
output  [1:0] m_axi_AXI_F_AWLOCK;
output  [3:0] m_axi_AXI_F_AWCACHE;
output  [2:0] m_axi_AXI_F_AWPROT;
output  [3:0] m_axi_AXI_F_AWQOS;
output  [3:0] m_axi_AXI_F_AWREGION;
output  [C_M_AXI_AXI_F_AWUSER_WIDTH - 1:0] m_axi_AXI_F_AWUSER;
output   m_axi_AXI_F_WVALID;
input   m_axi_AXI_F_WREADY;
output  [C_M_AXI_AXI_F_DATA_WIDTH - 1:0] m_axi_AXI_F_WDATA;
output  [C_M_AXI_AXI_F_WSTRB_WIDTH - 1:0] m_axi_AXI_F_WSTRB;
output   m_axi_AXI_F_WLAST;
output  [C_M_AXI_AXI_F_ID_WIDTH - 1:0] m_axi_AXI_F_WID;
output  [C_M_AXI_AXI_F_WUSER_WIDTH - 1:0] m_axi_AXI_F_WUSER;
output   m_axi_AXI_F_ARVALID;
input   m_axi_AXI_F_ARREADY;
output  [C_M_AXI_AXI_F_ADDR_WIDTH - 1:0] m_axi_AXI_F_ARADDR;
output  [C_M_AXI_AXI_F_ID_WIDTH - 1:0] m_axi_AXI_F_ARID;
output  [7:0] m_axi_AXI_F_ARLEN;
output  [2:0] m_axi_AXI_F_ARSIZE;
output  [1:0] m_axi_AXI_F_ARBURST;
output  [1:0] m_axi_AXI_F_ARLOCK;
output  [3:0] m_axi_AXI_F_ARCACHE;
output  [2:0] m_axi_AXI_F_ARPROT;
output  [3:0] m_axi_AXI_F_ARQOS;
output  [3:0] m_axi_AXI_F_ARREGION;
output  [C_M_AXI_AXI_F_ARUSER_WIDTH - 1:0] m_axi_AXI_F_ARUSER;
input   m_axi_AXI_F_RVALID;
output   m_axi_AXI_F_RREADY;
input  [C_M_AXI_AXI_F_DATA_WIDTH - 1:0] m_axi_AXI_F_RDATA;
input   m_axi_AXI_F_RLAST;
input  [C_M_AXI_AXI_F_ID_WIDTH - 1:0] m_axi_AXI_F_RID;
input  [C_M_AXI_AXI_F_RUSER_WIDTH - 1:0] m_axi_AXI_F_RUSER;
input  [1:0] m_axi_AXI_F_RRESP;
input   m_axi_AXI_F_BVALID;
output   m_axi_AXI_F_BREADY;
input  [1:0] m_axi_AXI_F_BRESP;
input  [C_M_AXI_AXI_F_ID_WIDTH - 1:0] m_axi_AXI_F_BID;
input  [C_M_AXI_AXI_F_BUSER_WIDTH - 1:0] m_axi_AXI_F_BUSER;
output   m_axi_AXI_W_AWVALID;
input   m_axi_AXI_W_AWREADY;
output  [C_M_AXI_AXI_W_ADDR_WIDTH - 1:0] m_axi_AXI_W_AWADDR;
output  [C_M_AXI_AXI_W_ID_WIDTH - 1:0] m_axi_AXI_W_AWID;
output  [7:0] m_axi_AXI_W_AWLEN;
output  [2:0] m_axi_AXI_W_AWSIZE;
output  [1:0] m_axi_AXI_W_AWBURST;
output  [1:0] m_axi_AXI_W_AWLOCK;
output  [3:0] m_axi_AXI_W_AWCACHE;
output  [2:0] m_axi_AXI_W_AWPROT;
output  [3:0] m_axi_AXI_W_AWQOS;
output  [3:0] m_axi_AXI_W_AWREGION;
output  [C_M_AXI_AXI_W_AWUSER_WIDTH - 1:0] m_axi_AXI_W_AWUSER;
output   m_axi_AXI_W_WVALID;
input   m_axi_AXI_W_WREADY;
output  [C_M_AXI_AXI_W_DATA_WIDTH - 1:0] m_axi_AXI_W_WDATA;
output  [C_M_AXI_AXI_W_WSTRB_WIDTH - 1:0] m_axi_AXI_W_WSTRB;
output   m_axi_AXI_W_WLAST;
output  [C_M_AXI_AXI_W_ID_WIDTH - 1:0] m_axi_AXI_W_WID;
output  [C_M_AXI_AXI_W_WUSER_WIDTH - 1:0] m_axi_AXI_W_WUSER;
output   m_axi_AXI_W_ARVALID;
input   m_axi_AXI_W_ARREADY;
output  [C_M_AXI_AXI_W_ADDR_WIDTH - 1:0] m_axi_AXI_W_ARADDR;
output  [C_M_AXI_AXI_W_ID_WIDTH - 1:0] m_axi_AXI_W_ARID;
output  [7:0] m_axi_AXI_W_ARLEN;
output  [2:0] m_axi_AXI_W_ARSIZE;
output  [1:0] m_axi_AXI_W_ARBURST;
output  [1:0] m_axi_AXI_W_ARLOCK;
output  [3:0] m_axi_AXI_W_ARCACHE;
output  [2:0] m_axi_AXI_W_ARPROT;
output  [3:0] m_axi_AXI_W_ARQOS;
output  [3:0] m_axi_AXI_W_ARREGION;
output  [C_M_AXI_AXI_W_ARUSER_WIDTH - 1:0] m_axi_AXI_W_ARUSER;
input   m_axi_AXI_W_RVALID;
output   m_axi_AXI_W_RREADY;
input  [C_M_AXI_AXI_W_DATA_WIDTH - 1:0] m_axi_AXI_W_RDATA;
input   m_axi_AXI_W_RLAST;
input  [C_M_AXI_AXI_W_ID_WIDTH - 1:0] m_axi_AXI_W_RID;
input  [C_M_AXI_AXI_W_RUSER_WIDTH - 1:0] m_axi_AXI_W_RUSER;
input  [1:0] m_axi_AXI_W_RRESP;
input   m_axi_AXI_W_BVALID;
output   m_axi_AXI_W_BREADY;
input  [1:0] m_axi_AXI_W_BRESP;
input  [C_M_AXI_AXI_W_ID_WIDTH - 1:0] m_axi_AXI_W_BID;
input  [C_M_AXI_AXI_W_BUSER_WIDTH - 1:0] m_axi_AXI_W_BUSER;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [94:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [15:0] CHout_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [0:0] mode_V;
wire   [0:0] relu_en_V;
wire   [31:0] feature_in_V;
wire   [3:0] feature_in_precision_V;
wire   [31:0] W_V;
wire   [3:0] W_precision_V;
wire   [31:0] B_V;
wire   [3:0] B_precision_V;
wire   [31:0] feature_out_V;
wire   [3:0] feature_out_precision_V;
reg    AXI_F_blk_n_AR;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln90_reg_2858;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter1_reg;
reg   [0:0] select_ln1598_20_reg_2897;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter1_reg;
reg    AXI_F_blk_n_R;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter8_reg;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter8_reg;
reg    AXI_F_blk_n_AW;
wire    ap_CS_fsm_state100;
reg    AXI_F_blk_n_W;
wire    ap_CS_fsm_state101;
reg    AXI_F_blk_n_B;
wire    ap_CS_fsm_state106;
reg   [0:0] or_ln135_reg_2988;
reg    AXI_W_blk_n_AR;
reg    AXI_W_blk_n_R;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state76;
wire   [0:0] empty_21_fu_1194_p2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state83;
reg    AXI_F_AWVALID;
wire    AXI_F_AWREADY;
wire   [31:0] AXI_F_AWADDR;
reg    AXI_F_WVALID;
wire    AXI_F_WREADY;
reg    AXI_F_ARVALID;
wire    AXI_F_ARREADY;
wire   [31:0] AXI_F_ARADDR;
wire    AXI_F_RVALID;
reg    AXI_F_RREADY;
wire   [127:0] AXI_F_RDATA;
wire    AXI_F_RLAST;
wire   [0:0] AXI_F_RID;
wire   [0:0] AXI_F_RUSER;
wire   [1:0] AXI_F_RRESP;
wire    AXI_F_BVALID;
reg    AXI_F_BREADY;
wire   [1:0] AXI_F_BRESP;
wire   [0:0] AXI_F_BID;
wire   [0:0] AXI_F_BUSER;
wire    AXI_W_AWREADY;
wire    AXI_W_WREADY;
reg    AXI_W_ARVALID;
wire    AXI_W_ARREADY;
wire   [31:0] AXI_W_ARADDR;
wire    AXI_W_RVALID;
reg    AXI_W_RREADY;
wire   [127:0] AXI_W_RDATA;
wire    AXI_W_RLAST;
wire   [0:0] AXI_W_RID;
wire   [0:0] AXI_W_RUSER;
wire   [1:0] AXI_W_RRESP;
wire    AXI_W_BVALID;
wire   [1:0] AXI_W_BRESP;
wire   [0:0] AXI_W_BID;
wire   [0:0] AXI_W_BUSER;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [29:0] indvar_flatten39_reg_478;
reg   [7:0] i_op_assign_12_reg_489;
reg   [21:0] indvar_flatten_reg_500;
reg   [7:0] i_op_assign_13_reg_511;
reg   [13:0] i_op_assign_reg_523;
reg   [39:0] p_01304_5_reg_534;
reg   [0:0] relu_en_V_read_reg_2446;
reg   [0:0] mode_V_read_reg_2451;
reg   [7:0] Sy_V_read_reg_2456;
reg   [7:0] Sx_V_read_reg_2462;
reg   [7:0] Ky_V_read_reg_2467;
reg   [7:0] Kx_V_read_reg_2475;
reg   [15:0] CHout_V_read_reg_2482;
reg   [15:0] Win_V_read_reg_2491;
reg   [15:0] Hin_V_read_reg_2497;
reg   [27:0] tmp_reg_2503;
reg   [31:0] gmem_addr_reg_2508;
reg   [27:0] tmp_1_reg_2514;
reg   [27:0] tmp_3_reg_2519;
reg   [13:0] CHin_div_K_V_reg_2524;
wire   [4:0] out_truncate_acc_V_fu_661_p2;
reg   [4:0] out_truncate_acc_V_reg_2533;
wire   [4:0] ret_V_12_fu_671_p2;
reg   [4:0] ret_V_12_reg_2538;
wire   [7:0] select_ln59_fu_735_p3;
reg   [7:0] select_ln59_reg_2543;
wire   [16:0] zext_ln1371_10_fu_755_p1;
reg   [16:0] zext_ln1371_10_reg_2548;
wire   [7:0] select_ln59_1_fu_850_p3;
reg   [7:0] select_ln59_1_reg_2565;
wire    ap_CS_fsm_state2;
wire   [16:0] zext_ln1371_5_fu_869_p1;
reg   [16:0] zext_ln1371_5_reg_2570;
wire   [15:0] grp_fu_787_p2;
reg   [15:0] sdiv_ln1371_1_reg_2586;
wire    ap_CS_fsm_state23;
wire   [45:0] p_cast37_fu_904_p1;
reg   [45:0] p_cast37_reg_2591;
wire    ap_CS_fsm_state24;
wire   [45:0] p_cast35_fu_907_p1;
reg   [45:0] p_cast35_reg_2596;
wire   [46:0] p_cast_fu_910_p1;
reg   [46:0] p_cast_reg_2601;
wire   [15:0] zext_ln68_4_fu_932_p1;
reg   [15:0] zext_ln68_4_reg_2606;
wire   [15:0] zext_ln68_fu_935_p1;
reg   [15:0] zext_ln68_reg_2611;
wire   [15:0] zext_ln68_1_fu_938_p1;
reg   [15:0] zext_ln68_1_reg_2616;
wire   [21:0] zext_ln808_1_fu_941_p1;
reg   [21:0] zext_ln808_1_reg_2621;
wire   [29:0] zext_ln808_2_fu_944_p1;
reg   [29:0] zext_ln808_2_reg_2626;
wire   [39:0] zext_ln808_fu_947_p1;
reg   [39:0] zext_ln808_reg_2631;
wire   [28:0] zext_ln215_fu_950_p1;
reg   [28:0] zext_ln215_reg_2636;
wire   [31:0] zext_ln215_1_fu_954_p1;
reg   [31:0] zext_ln215_1_reg_2641;
wire   [44:0] zext_ln1352_fu_958_p1;
reg   [44:0] zext_ln1352_reg_2647;
wire   [15:0] zext_ln68_2_fu_962_p1;
reg   [15:0] zext_ln68_2_reg_2652;
wire   [15:0] zext_ln68_3_fu_965_p1;
reg   [15:0] zext_ln68_3_reg_2657;
wire   [31:0] rhs_V_2_fu_968_p1;
reg   [31:0] rhs_V_2_reg_2663;
wire   [29:0] zext_ln215_2_fu_971_p1;
reg   [29:0] zext_ln215_2_reg_2669;
wire   [45:0] zext_ln215_3_fu_974_p1;
reg   [45:0] zext_ln215_3_reg_2674;
wire   [29:0] zext_ln215_4_fu_977_p1;
reg   [29:0] zext_ln215_4_reg_2679;
wire   [37:0] zext_ln1352_2_fu_980_p1;
reg   [37:0] zext_ln1352_2_reg_2684;
wire   [44:0] zext_ln1352_1_fu_983_p1;
reg   [44:0] zext_ln1352_1_reg_2689;
wire   [16:0] ret_V_3_fu_989_p2;
reg   [16:0] ret_V_3_reg_2694;
wire   [31:0] empty_15_fu_995_p1;
reg   [31:0] empty_15_reg_2699;
wire   [20:0] zext_ln1352_4_fu_998_p1;
reg   [20:0] zext_ln1352_4_reg_2704;
wire   [21:0] bound_fu_2270_p2;
reg   [21:0] bound_reg_2710;
wire   [29:0] bound4_fu_2277_p2;
reg   [29:0] bound4_reg_2715;
wire   [31:0] bound44_fu_2283_p2;
reg   [31:0] bound44_reg_2720;
wire   [47:0] bound52_fu_1017_p2;
reg   [47:0] bound52_reg_2725;
wire   [0:0] icmp_ln83_fu_1023_p2;
reg   [0:0] icmp_ln83_reg_2730;
wire   [0:0] icmp_ln94_fu_1028_p2;
reg   [0:0] icmp_ln94_reg_2735;
wire   [47:0] add_ln79_fu_1051_p2;
reg   [47:0] add_ln79_reg_2743;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln81_fu_1057_p2;
reg   [0:0] icmp_ln81_reg_2748;
wire   [0:0] icmp_ln79_fu_1046_p2;
wire  signed [15:0] select_ln1598_2_fu_1086_p3;
reg  signed [15:0] select_ln1598_2_reg_2755;
wire  signed [15:0] grp_fu_2304_p3;
reg  signed [15:0] sub_ln1598_reg_2760;
wire   [0:0] select_ln1598_5_fu_1106_p3;
reg   [0:0] select_ln1598_5_reg_2766;
(* use_dsp48 = "no" *) wire  signed [15:0] j_fu_1113_p2;
reg  signed [15:0] j_reg_2772;
wire   [31:0] select_ln1598_8_fu_1129_p3;
reg   [31:0] select_ln1598_8_reg_2777;
wire   [15:0] select_ln81_fu_1137_p3;
reg   [15:0] select_ln81_reg_2782;
wire  signed [15:0] sub_ln1598_1_fu_1166_p2;
reg  signed [15:0] sub_ln1598_1_reg_2792;
wire    ap_CS_fsm_state26;
wire   [15:0] select_ln1598_6_fu_1175_p3;
reg   [15:0] select_ln1598_6_reg_2801;
reg    ap_block_state76_io;
wire   [44:0] zext_ln1598_4_fu_1183_p1;
reg   [44:0] zext_ln1598_4_reg_2808;
wire   [2:0] trunc_ln1598_fu_1186_p1;
reg   [2:0] trunc_ln1598_reg_2813;
wire   [29:0] zext_ln1598_5_fu_1190_p1;
reg   [29:0] zext_ln1598_5_reg_2819;
wire   [37:0] ret_V_10_fu_1203_p2;
reg   [37:0] ret_V_10_reg_2828;
wire    ap_CS_fsm_state82;
reg   [15:0] gmem_addr_read_reg_2833;
wire   [44:0] mul_ln1352_4_fu_1211_p2;
reg   [44:0] mul_ln1352_4_reg_2838;
wire   [15:0] r_V_2_fu_1216_p2;
reg   [15:0] r_V_2_reg_2843;
wire    ap_CS_fsm_state84;
wire  signed [31:0] sext_ln94_1_fu_1223_p1;
reg  signed [31:0] sext_ln94_1_reg_2848;
wire   [0:0] xor_ln105_fu_1231_p2;
reg   [0:0] xor_ln105_reg_2853;
wire   [0:0] icmp_ln90_fu_1324_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state85_pp0_stage0_iter0;
wire    ap_block_state86_pp0_stage0_iter1;
wire    ap_block_state87_pp0_stage0_iter2;
reg    ap_predicate_op528_readreq_state87;
reg    ap_predicate_op531_readreq_state87;
reg    ap_block_state87_io;
wire    ap_block_state88_pp0_stage0_iter3;
wire    ap_block_state89_pp0_stage0_iter4;
wire    ap_block_state90_pp0_stage0_iter5;
wire    ap_block_state91_pp0_stage0_iter6;
wire    ap_block_state92_pp0_stage0_iter7;
wire    ap_block_state93_pp0_stage0_iter8;
reg    ap_predicate_op544_read_state94;
reg    ap_predicate_op545_read_state94;
reg    ap_block_state94_pp0_stage0_iter9;
wire    ap_block_state95_pp0_stage0_iter10;
wire    ap_block_state96_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter2_reg;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter3_reg;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter4_reg;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter5_reg;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter6_reg;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter7_reg;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter9_reg;
reg   [0:0] icmp_ln90_reg_2858_pp0_iter10_reg;
wire   [29:0] add_ln90_fu_1329_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln92_fu_1335_p2;
reg   [0:0] icmp_ln92_reg_2867;
wire   [7:0] select_ln1598_13_fu_1404_p3;
reg   [7:0] select_ln1598_13_reg_2872;
wire   [21:0] mul_ln1598_1_fu_2340_p2;
reg   [21:0] mul_ln1598_1_reg_2877;
wire   [0:0] select_ln1598_17_fu_1465_p3;
reg   [0:0] select_ln1598_17_reg_2882;
wire   [7:0] jj_fu_1472_p2;
reg   [7:0] jj_reg_2887;
wire   [13:0] select_ln1598_18_fu_1484_p3;
reg   [13:0] select_ln1598_18_reg_2892;
wire   [0:0] select_ln1598_20_fu_1546_p3;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter2_reg;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter3_reg;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter4_reg;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter5_reg;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter6_reg;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter7_reg;
reg   [0:0] select_ln1598_20_reg_2897_pp0_iter9_reg;
wire   [31:0] select_ln1598_21_fu_1560_p3;
reg   [31:0] select_ln1598_21_reg_2901;
wire   [7:0] select_ln92_fu_1568_p3;
reg   [7:0] select_ln92_reg_2906;
wire   [29:0] ret_V_6_fu_2345_p2;
reg   [29:0] ret_V_6_reg_2911;
wire   [13:0] cin_fu_1580_p2;
wire   [21:0] select_ln92_1_fu_1592_p3;
wire   [46:0] add_ln180_1_fu_1643_p2;
reg   [46:0] add_ln180_1_reg_2926;
wire   [45:0] add_ln180_2_fu_1670_p2;
reg   [45:0] add_ln180_2_reg_2931;
reg   [127:0] dat_V_reg_2948;
reg   [127:0] wt_V_reg_2953;
wire   [34:0] add_ln700_6_fu_1951_p2;
reg   [34:0] add_ln700_6_reg_2958;
wire   [39:0] add_ln700_7_fu_1960_p2;
reg    ap_enable_reg_pp0_iter11;
wire   [39:0] r_V_fu_1966_p2;
reg   [39:0] r_V_reg_2968;
wire    ap_CS_fsm_state97;
wire   [0:0] icmp_ln895_fu_1981_p2;
reg   [0:0] icmp_ln895_reg_2973;
wire   [0:0] icmp_ln879_fu_1990_p2;
reg   [0:0] icmp_ln879_reg_2978;
wire   [127:0] p_Result_s_17_fu_2187_p2;
reg   [127:0] p_Result_s_17_reg_2983;
wire    ap_CS_fsm_state98;
wire   [0:0] or_ln135_fu_2198_p2;
wire   [44:0] mul_ln1352_9_fu_2224_p2;
reg   [44:0] mul_ln1352_9_reg_2992;
wire   [45:0] add_ln180_fu_2237_p2;
reg   [45:0] add_ln180_reg_2997;
wire    ap_CS_fsm_state99;
wire   [15:0] cout_fu_2252_p2;
reg    ap_block_state106;
wire   [31:0] select_ln81_1_fu_2263_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter1_state86;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg   [47:0] indvar_flatten71_reg_419;
reg   [15:0] i_op_assign_9_reg_431;
reg   [31:0] indvar_flatten47_reg_442;
reg  signed [15:0] i_op_assign_10_reg_454;
reg   [15:0] i_op_assign_11_reg_466;
reg   [7:0] ap_phi_mux_i_op_assign_12_phi_fu_493_p4;
reg   [7:0] ap_phi_mux_i_op_assign_13_phi_fu_515_p4;
reg   [127:0] ap_phi_mux_p_Val2_2_phi_fu_550_p4;
reg   [127:0] ap_phi_reg_pp0_iter10_p_Val2_2_reg_546;
wire   [127:0] ap_phi_reg_pp0_iter0_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter1_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter2_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter3_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter4_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter5_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter6_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter7_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter8_p_Val2_2_reg_546;
reg   [127:0] ap_phi_reg_pp0_iter9_p_Val2_2_reg_546;
reg   [127:0] ap_phi_mux_p_Val2_1_phi_fu_561_p4;
reg   [127:0] ap_phi_reg_pp0_iter10_p_Val2_1_reg_557;
wire   [127:0] ap_phi_reg_pp0_iter0_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter1_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter2_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter3_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter4_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter5_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter6_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter7_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter8_p_Val2_1_reg_557;
reg   [127:0] ap_phi_reg_pp0_iter9_p_Val2_1_reg_557;
wire   [63:0] empty_fu_593_p1;
wire  signed [63:0] sext_ln180_1_fu_1675_p1;
wire   [63:0] zext_ln180_3_fu_1685_p1;
wire   [63:0] zext_ln180_1_fu_2242_p1;
reg   [127:0] p_Val2_s_fu_256;
wire   [30:0] B_V5_fu_583_p4;
wire   [16:0] zext_ln1371_fu_623_p1;
wire   [16:0] add_ln1371_fu_627_p2;
wire   [4:0] rhs_V_fu_647_p1;
wire   [4:0] lhs_V_fu_643_p1;
wire   [4:0] ret_V_11_fu_655_p2;
wire   [4:0] rhs_V_1_fu_651_p1;
wire   [4:0] lhs_V_1_fu_667_p1;
wire   [8:0] zext_ln1371_1_fu_677_p1;
wire   [8:0] add_ln1371_1_fu_681_p2;
wire   [8:0] sub_ln1371_fu_695_p2;
wire   [7:0] trunc_ln1371_1_fu_701_p4;
wire   [0:0] tmp_4_fu_687_p3;
wire   [7:0] sub_ln1371_1_fu_721_p2;
wire   [7:0] trunc_ln1371_2_fu_711_p4;
wire   [7:0] pad_x_V_fu_727_p3;
wire   [8:0] shl_ln1371_1_fu_743_p3;
wire   [16:0] zext_ln1371_9_fu_751_p1;
wire   [16:0] add_ln1371_4_fu_759_p2;
wire   [17:0] zext_ln1371_11_fu_765_p1;
wire   [17:0] zext_ln1371_12_fu_769_p1;
wire   [17:0] sub_ln1371_5_fu_773_p2;
wire  signed [18:0] grp_fu_787_p0;
wire   [8:0] grp_fu_787_p1;
wire   [8:0] zext_ln1371_2_fu_793_p1;
wire   [8:0] add_ln1371_2_fu_796_p2;
wire   [8:0] sub_ln1371_2_fu_810_p2;
wire   [7:0] trunc_ln1371_4_fu_816_p4;
wire   [0:0] tmp_6_fu_802_p3;
wire   [7:0] sub_ln1371_3_fu_836_p2;
wire   [7:0] trunc_ln1371_5_fu_826_p4;
wire   [7:0] pad_y_V_fu_842_p3;
wire   [8:0] shl_ln_fu_857_p3;
wire   [16:0] zext_ln1371_4_fu_865_p1;
wire   [16:0] add_ln1371_3_fu_872_p2;
wire   [17:0] zext_ln1371_6_fu_878_p1;
wire   [17:0] zext_ln1371_8_fu_882_p1;
wire   [17:0] sub_ln1371_4_fu_885_p2;
wire  signed [18:0] grp_fu_898_p0;
wire   [8:0] grp_fu_898_p1;
wire   [15:0] grp_fu_898_p2;
wire   [15:0] trunc_ln214_fu_913_p1;
wire   [15:0] trunc_ln214_1_fu_923_p1;
wire   [15:0] Wout_V_fu_926_p2;
wire   [15:0] Hout_V_fu_917_p2;
wire   [16:0] zext_ln1354_fu_986_p1;
wire   [15:0] bound52_fu_1017_p0;
wire   [31:0] bound52_fu_1017_p1;
wire   [31:0] ret_V_5_fu_2290_p2;
wire   [31:0] zext_ln1598_1_fu_1037_p1;
wire   [15:0] add_ln79_1_fu_1070_p2;
wire   [31:0] mul_ln1352_2_fu_2297_p2;
(* use_dsp48 = "no" *) wire   [31:0] add_ln544_fu_1041_p2;
wire   [0:0] icmp_ln83_1_fu_1101_p2;
wire   [15:0] select_ln1598_fu_1062_p3;
wire   [31:0] zext_ln1598_3_fu_1119_p1;
wire   [31:0] select_ln1598_1_fu_1080_p3;
wire   [31:0] add_ln544_4_fu_1123_p2;
wire   [31:0] select_ln1598_4_fu_1094_p3;
wire   [15:0] grp_fu_1148_p1;
wire  signed [15:0] mul_ln68_fu_2310_p2;
wire  signed [15:0] mul_ln68_1_fu_2316_p2;
wire   [15:0] select_ln1598_3_fu_1154_p3;
wire   [15:0] select_ln1598_7_fu_1160_p3;
wire   [0:0] or_ln1598_fu_1171_p2;
wire   [47:0] grp_fu_1148_p2;
wire   [29:0] ret_V_9_fu_2321_p2;
wire   [29:0] ret_V_10_fu_1203_p0;
wire   [7:0] ret_V_10_fu_1203_p1;
wire   [37:0] mul_ln1352_4_fu_1211_p0;
wire   [7:0] mul_ln1352_4_fu_1211_p1;
wire  signed [16:0] sext_ln544_1_fu_1220_p1;
wire   [0:0] icmp_ln105_fu_1226_p2;
wire   [15:0] zext_ln68_5_fu_1237_p1;
(* use_dsp48 = "no" *) wire  signed [15:0] h_V_fu_1241_p2;
wire  signed [16:0] sext_ln1352_fu_1250_p1;
wire   [0:0] icmp_ln105_1_fu_1254_p2;
wire   [15:0] zext_ln68_6_fu_1265_p1;
wire  signed [15:0] w_V_fu_1269_p2;
wire   [15:0] or_ln105_fu_1274_p2;
wire  signed [16:0] sext_ln544_fu_1280_p1;
wire   [0:0] icmp_ln105_2_fu_1296_p2;
wire   [0:0] xor_ln105_1_fu_1259_p2;
wire   [0:0] xor_ln105_2_fu_1301_p2;
wire   [0:0] or_ln105_1_fu_1307_p2;
wire   [0:0] tmp_7_fu_1288_p3;
wire  signed [31:0] ret_V_8_fu_2326_p2;
wire  signed [31:0] sext_ln94_fu_1284_p1;
wire   [7:0] add_ln90_1_fu_1348_p2;
wire   [15:0] zext_ln68_7_fu_1354_p1;
(* use_dsp48 = "no" *) wire  signed [15:0] add_ln68_2_fu_1358_p2;
wire  signed [31:0] mul_ln1352_7_fu_2333_p2;
wire  signed [16:0] sext_ln1352_1_fu_1375_p1;
wire   [0:0] icmp_ln105_3_fu_1385_p2;
wire   [0:0] xor_ln105_3_fu_1390_p2;
wire   [15:0] or_ln105_3_fu_1416_p2;
wire   [0:0] or_ln105_4_fu_1429_p2;
wire   [0:0] tmp_11_fu_1421_p3;
wire   [0:0] or_ln105_5_fu_1434_p2;
wire   [0:0] or_ln105_2_fu_1313_p2;
(* use_dsp48 = "no" *) wire   [31:0] add_ln544_7_fu_1448_p2;
(* use_dsp48 = "no" *) wire   [31:0] add_ln544_2_fu_1319_p2;
wire   [0:0] icmp_ln94_1_fu_1460_p2;
wire   [7:0] select_ln1598_9_fu_1340_p3;
wire   [0:0] or_ln1598_1_fu_1478_p2;
wire   [15:0] zext_ln68_8_fu_1492_p1;
wire  signed [15:0] add_ln68_3_fu_1496_p2;
wire   [15:0] select_ln1598_10_fu_1363_p3;
wire   [15:0] or_ln105_6_fu_1501_p2;
wire  signed [16:0] sext_ln544_2_fu_1507_p1;
wire   [0:0] icmp_ln105_4_fu_1523_p2;
wire   [0:0] select_ln1598_12_fu_1396_p3;
wire   [0:0] xor_ln105_4_fu_1528_p2;
wire   [0:0] or_ln105_7_fu_1534_p2;
wire   [0:0] tmp_12_fu_1515_p3;
wire   [0:0] or_ln105_8_fu_1540_p2;
wire   [0:0] select_ln1598_15_fu_1440_p3;
wire   [31:0] select_ln1598_11_fu_1379_p3;
wire  signed [31:0] sext_ln94_2_fu_1511_p1;
wire   [31:0] add_ln544_8_fu_1554_p2;
wire   [31:0] select_ln1598_16_fu_1452_p3;
wire   [21:0] add_ln92_1_fu_1586_p2;
wire   [20:0] mul_ln68_2_fu_2350_p2;
wire   [20:0] mul_ln68_3_fu_2363_p2;
wire   [20:0] select_ln1598_14_fu_1607_p3;
wire   [15:0] ret_V_7_fu_1628_p0;
wire   [29:0] ret_V_7_fu_1628_p1;
wire   [45:0] ret_V_7_fu_1628_p2;
wire  signed [45:0] sext_ln1598_fu_1622_p1;
wire   [45:0] add_ln544_3_fu_1633_p2;
wire  signed [46:0] sext_ln180_fu_1639_p1;
wire   [20:0] zext_ln544_fu_1648_p1;
wire   [20:0] select_ln1598_19_fu_1616_p3;
wire   [20:0] add_ln544_5_fu_1651_p2;
wire   [44:0] grp_fu_2356_p3;
wire   [44:0] zext_ln544_1_fu_1657_p1;
(* use_dsp48 = "no" *) wire   [44:0] add_ln544_6_fu_1661_p2;
wire   [45:0] zext_ln180_2_fu_1666_p1;
wire  signed [15:0] trunc_ln647_fu_1695_p1;
wire  signed [15:0] trunc_ln647_1_fu_1699_p1;
wire  signed [15:0] p_Result_1_fu_1711_p4;
wire  signed [15:0] p_Result_5_1_fu_1721_p4;
wire  signed [15:0] p_Result_2_fu_1739_p4;
wire  signed [15:0] p_Result_5_2_fu_1749_p4;
wire  signed [15:0] p_Result_3_fu_1767_p4;
wire  signed [15:0] p_Result_5_3_fu_1777_p4;
wire  signed [15:0] p_Result_4_fu_1795_p4;
wire  signed [15:0] p_Result_5_4_fu_1805_p4;
wire  signed [15:0] p_Result_s_fu_1823_p4;
wire  signed [15:0] p_Result_5_5_fu_1833_p4;
wire  signed [15:0] p_Result_6_fu_1851_p4;
wire  signed [15:0] p_Result_5_6_fu_1861_p4;
wire  signed [15:0] p_Result_7_fu_1879_p4;
wire  signed [15:0] p_Result_5_7_fu_1889_p4;
wire  signed [31:0] mul_ln1352_11_fu_2378_p2;
wire  signed [31:0] mul_ln1352_13_fu_2394_p2;
wire  signed [31:0] mul_ln1352_15_fu_2410_p2;
wire  signed [31:0] mul_ln1352_17_fu_2426_p2;
wire  signed [32:0] grp_fu_2369_p3;
wire  signed [32:0] grp_fu_2385_p3;
wire  signed [33:0] sext_ln700_8_fu_1919_p1;
wire  signed [33:0] sext_ln700_9_fu_1922_p1;
wire   [33:0] add_ln700_2_fu_1925_p2;
wire  signed [32:0] grp_fu_2401_p3;
wire  signed [32:0] grp_fu_2417_p3;
wire  signed [33:0] sext_ln700_11_fu_1935_p1;
wire  signed [33:0] sext_ln700_12_fu_1938_p1;
wire   [33:0] add_ln700_5_fu_1941_p2;
wire  signed [34:0] sext_ln700_10_fu_1931_p1;
wire  signed [34:0] sext_ln700_13_fu_1947_p1;
wire  signed [39:0] sext_ln700_14_fu_1957_p1;
wire   [24:0] tmp_8_fu_1971_p4;
wire   [16:0] zext_ln879_fu_1987_p1;
wire   [39:0] select_ln126_fu_1998_p3;
wire   [0:0] icmp_ln887_fu_2004_p2;
wire   [15:0] trunc_ln68_fu_2010_p1;
wire   [15:0] sum_mac_res_16_V_fu_2014_p3;
wire   [15:0] sum_V_1_fu_2022_p2;
wire   [0:0] tmp_9_fu_2027_p3;
wire   [0:0] ret_V_fu_2035_p2;
wire   [6:0] Lo_assign_fu_2048_p3;
wire   [15:0] select_ln130_fu_2040_p3;
wire   [6:0] or_ln132_fu_2055_p2;
wire   [7:0] zext_ln414_fu_2071_p1;
wire   [0:0] icmp_ln414_fu_2065_p2;
wire   [7:0] zext_ln414_1_fu_2075_p1;
wire   [7:0] xor_ln414_fu_2079_p2;
wire   [7:0] select_ln414_fu_2085_p3;
wire   [7:0] select_ln414_2_fu_2101_p3;
wire   [7:0] select_ln414_1_fu_2093_p3;
wire   [7:0] xor_ln414_1_fu_2109_p2;
wire  signed [127:0] tmp_V_fu_2061_p1;
wire   [127:0] zext_ln414_2_fu_2115_p1;
wire   [127:0] shl_ln414_fu_2127_p2;
reg   [127:0] tmp_10_fu_2133_p4;
wire   [127:0] zext_ln414_3_fu_2119_p1;
wire   [127:0] zext_ln414_4_fu_2123_p1;
wire   [127:0] shl_ln414_1_fu_2151_p2;
wire   [127:0] lshr_ln414_fu_2157_p2;
wire   [127:0] and_ln414_fu_2163_p2;
wire   [127:0] xor_ln414_2_fu_2169_p2;
wire   [127:0] select_ln414_3_fu_2143_p3;
wire   [127:0] and_ln414_1_fu_2175_p2;
wire   [127:0] and_ln414_2_fu_2181_p2;
wire   [0:0] icmp_ln135_fu_2193_p2;
wire   [12:0] tmp_13_fu_2208_p4;
wire   [28:0] ret_V_4_fu_2433_p2;
wire   [15:0] mul_ln1352_9_fu_2224_p0;
wire   [28:0] mul_ln1352_9_fu_2224_p1;
wire   [44:0] add_ln544_1_fu_2229_p2;
wire   [45:0] zext_ln180_fu_2233_p1;
wire   [31:0] add_ln81_1_fu_2257_p2;
wire   [7:0] bound_fu_2270_p0;
wire   [13:0] bound_fu_2270_p1;
wire   [7:0] bound4_fu_2277_p0;
wire   [21:0] bound4_fu_2277_p1;
wire   [15:0] bound44_fu_2283_p0;
wire   [15:0] bound44_fu_2283_p1;
wire   [15:0] ret_V_5_fu_2290_p0;
wire   [15:0] ret_V_5_fu_2290_p1;
wire   [15:0] mul_ln1352_2_fu_2297_p0;
wire   [15:0] mul_ln1352_2_fu_2297_p1;
wire   [7:0] grp_fu_2304_p0;
wire  signed [15:0] grp_fu_2304_p1;
wire   [7:0] grp_fu_2304_p2;
wire   [7:0] mul_ln68_fu_2310_p1;
wire   [7:0] mul_ln68_1_fu_2316_p0;
wire   [15:0] ret_V_9_fu_2321_p0;
wire   [13:0] ret_V_9_fu_2321_p1;
wire   [15:0] ret_V_8_fu_2326_p1;
wire   [15:0] mul_ln1352_7_fu_2333_p1;
wire   [7:0] mul_ln1598_1_fu_2340_p0;
wire   [13:0] mul_ln1598_1_fu_2340_p1;
wire   [15:0] ret_V_6_fu_2345_p0;
wire   [13:0] ret_V_6_fu_2345_p1;
wire   [7:0] mul_ln68_2_fu_2350_p0;
wire   [13:0] mul_ln68_2_fu_2350_p1;
wire   [21:0] grp_fu_2356_p0;
wire   [7:0] grp_fu_2356_p1;
wire   [7:0] mul_ln68_3_fu_2363_p0;
wire   [13:0] mul_ln68_3_fu_2363_p1;
wire   [15:0] ret_V_4_fu_2433_p0;
wire   [12:0] ret_V_4_fu_2433_p1;
reg    grp_fu_787_ap_start;
wire    grp_fu_787_ap_done;
reg    grp_fu_898_ap_start;
wire    grp_fu_898_ap_done;
reg    grp_fu_1148_ap_start;
wire    grp_fu_1148_ap_done;
reg    grp_fu_1148_ce;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
reg   [94:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound44_fu_2283_p00;
wire   [31:0] bound44_fu_2283_p10;
wire   [29:0] bound4_fu_2277_p00;
wire   [29:0] bound4_fu_2277_p10;
wire   [47:0] bound52_fu_1017_p00;
wire   [47:0] bound52_fu_1017_p10;
wire   [21:0] bound_fu_2270_p00;
wire   [21:0] bound_fu_2270_p10;
wire   [47:0] grp_fu_1148_p10;
wire   [29:0] grp_fu_2356_p00;
wire   [18:0] grp_fu_787_p10;
wire   [18:0] grp_fu_898_p10;
wire   [31:0] mul_ln1352_2_fu_2297_p10;
wire   [44:0] mul_ln1352_4_fu_1211_p00;
wire   [44:0] mul_ln1352_9_fu_2224_p10;
wire   [21:0] mul_ln1598_1_fu_2340_p00;
wire   [20:0] mul_ln68_2_fu_2350_p00;
wire   [20:0] mul_ln68_3_fu_2363_p00;
wire   [37:0] ret_V_10_fu_1203_p00;
wire   [28:0] ret_V_4_fu_2433_p10;
wire   [31:0] ret_V_5_fu_2290_p00;
wire   [29:0] ret_V_6_fu_2345_p10;
wire   [45:0] ret_V_7_fu_1628_p10;
reg    ap_condition_874;

// power-on initialization
initial begin
#0 ap_CS_fsm = 95'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

conv_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
conv_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .CHout_V(CHout_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .mode_V(mode_V),
    .relu_en_V(relu_en_V),
    .feature_in_V(feature_in_V),
    .feature_in_precision_V(feature_in_precision_V),
    .W_V(W_V),
    .W_precision_V(W_precision_V),
    .B_V(B_V),
    .B_precision_V(B_precision_V),
    .feature_out_V(feature_out_V),
    .feature_out_precision_V(feature_out_precision_V)
);

conv_AXI_F_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_F_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_F_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_F_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_F_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_F_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_F_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_F_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_F_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_F_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_F_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_F_CACHE_VALUE ))
conv_AXI_F_m_axi_U(
    .AWVALID(m_axi_AXI_F_AWVALID),
    .AWREADY(m_axi_AXI_F_AWREADY),
    .AWADDR(m_axi_AXI_F_AWADDR),
    .AWID(m_axi_AXI_F_AWID),
    .AWLEN(m_axi_AXI_F_AWLEN),
    .AWSIZE(m_axi_AXI_F_AWSIZE),
    .AWBURST(m_axi_AXI_F_AWBURST),
    .AWLOCK(m_axi_AXI_F_AWLOCK),
    .AWCACHE(m_axi_AXI_F_AWCACHE),
    .AWPROT(m_axi_AXI_F_AWPROT),
    .AWQOS(m_axi_AXI_F_AWQOS),
    .AWREGION(m_axi_AXI_F_AWREGION),
    .AWUSER(m_axi_AXI_F_AWUSER),
    .WVALID(m_axi_AXI_F_WVALID),
    .WREADY(m_axi_AXI_F_WREADY),
    .WDATA(m_axi_AXI_F_WDATA),
    .WSTRB(m_axi_AXI_F_WSTRB),
    .WLAST(m_axi_AXI_F_WLAST),
    .WID(m_axi_AXI_F_WID),
    .WUSER(m_axi_AXI_F_WUSER),
    .ARVALID(m_axi_AXI_F_ARVALID),
    .ARREADY(m_axi_AXI_F_ARREADY),
    .ARADDR(m_axi_AXI_F_ARADDR),
    .ARID(m_axi_AXI_F_ARID),
    .ARLEN(m_axi_AXI_F_ARLEN),
    .ARSIZE(m_axi_AXI_F_ARSIZE),
    .ARBURST(m_axi_AXI_F_ARBURST),
    .ARLOCK(m_axi_AXI_F_ARLOCK),
    .ARCACHE(m_axi_AXI_F_ARCACHE),
    .ARPROT(m_axi_AXI_F_ARPROT),
    .ARQOS(m_axi_AXI_F_ARQOS),
    .ARREGION(m_axi_AXI_F_ARREGION),
    .ARUSER(m_axi_AXI_F_ARUSER),
    .RVALID(m_axi_AXI_F_RVALID),
    .RREADY(m_axi_AXI_F_RREADY),
    .RDATA(m_axi_AXI_F_RDATA),
    .RLAST(m_axi_AXI_F_RLAST),
    .RID(m_axi_AXI_F_RID),
    .RUSER(m_axi_AXI_F_RUSER),
    .RRESP(m_axi_AXI_F_RRESP),
    .BVALID(m_axi_AXI_F_BVALID),
    .BREADY(m_axi_AXI_F_BREADY),
    .BRESP(m_axi_AXI_F_BRESP),
    .BID(m_axi_AXI_F_BID),
    .BUSER(m_axi_AXI_F_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(AXI_F_ARVALID),
    .I_ARREADY(AXI_F_ARREADY),
    .I_ARADDR(AXI_F_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(AXI_F_RVALID),
    .I_RREADY(AXI_F_RREADY),
    .I_RDATA(AXI_F_RDATA),
    .I_RID(AXI_F_RID),
    .I_RUSER(AXI_F_RUSER),
    .I_RRESP(AXI_F_RRESP),
    .I_RLAST(AXI_F_RLAST),
    .I_AWVALID(AXI_F_AWVALID),
    .I_AWREADY(AXI_F_AWREADY),
    .I_AWADDR(AXI_F_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(AXI_F_WVALID),
    .I_WREADY(AXI_F_WREADY),
    .I_WDATA(p_Result_s_17_reg_2983),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd65535),
    .I_BVALID(AXI_F_BVALID),
    .I_BREADY(AXI_F_BREADY),
    .I_BRESP(AXI_F_BRESP),
    .I_BID(AXI_F_BID),
    .I_BUSER(AXI_F_BUSER)
);

conv_AXI_W_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_W_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_W_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_W_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_W_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_W_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_W_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_W_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_W_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_W_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_W_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_W_CACHE_VALUE ))
conv_AXI_W_m_axi_U(
    .AWVALID(m_axi_AXI_W_AWVALID),
    .AWREADY(m_axi_AXI_W_AWREADY),
    .AWADDR(m_axi_AXI_W_AWADDR),
    .AWID(m_axi_AXI_W_AWID),
    .AWLEN(m_axi_AXI_W_AWLEN),
    .AWSIZE(m_axi_AXI_W_AWSIZE),
    .AWBURST(m_axi_AXI_W_AWBURST),
    .AWLOCK(m_axi_AXI_W_AWLOCK),
    .AWCACHE(m_axi_AXI_W_AWCACHE),
    .AWPROT(m_axi_AXI_W_AWPROT),
    .AWQOS(m_axi_AXI_W_AWQOS),
    .AWREGION(m_axi_AXI_W_AWREGION),
    .AWUSER(m_axi_AXI_W_AWUSER),
    .WVALID(m_axi_AXI_W_WVALID),
    .WREADY(m_axi_AXI_W_WREADY),
    .WDATA(m_axi_AXI_W_WDATA),
    .WSTRB(m_axi_AXI_W_WSTRB),
    .WLAST(m_axi_AXI_W_WLAST),
    .WID(m_axi_AXI_W_WID),
    .WUSER(m_axi_AXI_W_WUSER),
    .ARVALID(m_axi_AXI_W_ARVALID),
    .ARREADY(m_axi_AXI_W_ARREADY),
    .ARADDR(m_axi_AXI_W_ARADDR),
    .ARID(m_axi_AXI_W_ARID),
    .ARLEN(m_axi_AXI_W_ARLEN),
    .ARSIZE(m_axi_AXI_W_ARSIZE),
    .ARBURST(m_axi_AXI_W_ARBURST),
    .ARLOCK(m_axi_AXI_W_ARLOCK),
    .ARCACHE(m_axi_AXI_W_ARCACHE),
    .ARPROT(m_axi_AXI_W_ARPROT),
    .ARQOS(m_axi_AXI_W_ARQOS),
    .ARREGION(m_axi_AXI_W_ARREGION),
    .ARUSER(m_axi_AXI_W_ARUSER),
    .RVALID(m_axi_AXI_W_RVALID),
    .RREADY(m_axi_AXI_W_RREADY),
    .RDATA(m_axi_AXI_W_RDATA),
    .RLAST(m_axi_AXI_W_RLAST),
    .RID(m_axi_AXI_W_RID),
    .RUSER(m_axi_AXI_W_RUSER),
    .RRESP(m_axi_AXI_W_RRESP),
    .BVALID(m_axi_AXI_W_BVALID),
    .BREADY(m_axi_AXI_W_BREADY),
    .BRESP(m_axi_AXI_W_BRESP),
    .BID(m_axi_AXI_W_BID),
    .BUSER(m_axi_AXI_W_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(AXI_W_ARVALID),
    .I_ARREADY(AXI_W_ARREADY),
    .I_ARADDR(AXI_W_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(AXI_W_RVALID),
    .I_RREADY(AXI_W_RREADY),
    .I_RDATA(AXI_W_RDATA),
    .I_RID(AXI_W_RID),
    .I_RUSER(AXI_W_RUSER),
    .I_RRESP(AXI_W_RRESP),
    .I_RLAST(AXI_W_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(AXI_W_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(AXI_W_WREADY),
    .I_WDATA(128'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd0),
    .I_BVALID(AXI_W_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(AXI_W_BRESP),
    .I_BID(AXI_W_BID),
    .I_BUSER(AXI_W_BUSER)
);

conv_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
conv_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_2508),
    .I_ARID(1'd0),
    .I_ARLEN(empty_15_reg_2699),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

conv_sdiv_19s_9nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
conv_sdiv_19s_9nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_787_ap_start),
    .done(grp_fu_787_ap_done),
    .din0(grp_fu_787_p0),
    .din1(grp_fu_787_p1),
    .ce(1'b1),
    .dout(grp_fu_787_p2)
);

conv_sdiv_19s_9nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
conv_sdiv_19s_9nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_898_ap_start),
    .done(grp_fu_898_ap_done),
    .din0(grp_fu_898_p0),
    .din1(grp_fu_898_p1),
    .ce(1'b1),
    .dout(grp_fu_898_p2)
);

conv_urem_48ns_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 52 ),
    .din0_WIDTH( 48 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
conv_urem_48ns_16cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1148_ap_start),
    .done(grp_fu_1148_ap_done),
    .din0(indvar_flatten71_reg_419),
    .din1(grp_fu_1148_p1),
    .ce(grp_fu_1148_ce),
    .dout(grp_fu_1148_p2)
);

conv_mul_mul_8ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 22 ))
conv_mul_mul_8ns_dEe_U4(
    .din0(bound_fu_2270_p0),
    .din1(bound_fu_2270_p1),
    .dout(bound_fu_2270_p2)
);

conv_mul_mul_8ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 30 ))
conv_mul_mul_8ns_eOg_U5(
    .din0(bound4_fu_2277_p0),
    .din1(bound4_fu_2277_p1),
    .dout(bound4_fu_2277_p2)
);

conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16nsfYi_U6(
    .din0(bound44_fu_2283_p0),
    .din1(bound44_fu_2283_p1),
    .dout(bound44_fu_2283_p2)
);

conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16nsfYi_U7(
    .din0(ret_V_5_fu_2290_p0),
    .din1(ret_V_5_fu_2290_p1),
    .dout(ret_V_5_fu_2290_p2)
);

conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16nsfYi_U8(
    .din0(mul_ln1352_2_fu_2297_p0),
    .din1(mul_ln1352_2_fu_2297_p1),
    .dout(mul_ln1352_2_fu_2297_p2)
);

conv_mac_mul_sub_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
conv_mac_mul_sub_g8j_U9(
    .din0(grp_fu_2304_p0),
    .din1(grp_fu_2304_p1),
    .din2(grp_fu_2304_p2),
    .dout(grp_fu_2304_p3)
);

conv_mul_mul_16s_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
conv_mul_mul_16s_hbi_U10(
    .din0(i_op_assign_10_reg_454),
    .din1(mul_ln68_fu_2310_p1),
    .dout(mul_ln68_fu_2310_p2)
);

conv_mul_mul_8ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_mul_mul_8ns_ibs_U11(
    .din0(mul_ln68_1_fu_2316_p0),
    .din1(j_reg_2772),
    .dout(mul_ln68_1_fu_2316_p2)
);

conv_mul_mul_16nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
conv_mul_mul_16nsjbC_U12(
    .din0(ret_V_9_fu_2321_p0),
    .din1(ret_V_9_fu_2321_p1),
    .dout(ret_V_9_fu_2321_p2)
);

conv_mul_mul_16s_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16s_kbM_U13(
    .din0(h_V_fu_1241_p2),
    .din1(ret_V_8_fu_2326_p1),
    .dout(ret_V_8_fu_2326_p2)
);

conv_mul_mul_16s_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16s_kbM_U14(
    .din0(add_ln68_2_fu_1358_p2),
    .din1(mul_ln1352_7_fu_2333_p1),
    .dout(mul_ln1352_7_fu_2333_p2)
);

conv_mul_mul_8ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 22 ))
conv_mul_mul_8ns_dEe_U15(
    .din0(mul_ln1598_1_fu_2340_p0),
    .din1(mul_ln1598_1_fu_2340_p1),
    .dout(mul_ln1598_1_fu_2340_p2)
);

conv_mul_mul_16nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
conv_mul_mul_16nsjbC_U16(
    .din0(ret_V_6_fu_2345_p0),
    .din1(ret_V_6_fu_2345_p1),
    .dout(ret_V_6_fu_2345_p2)
);

conv_mul_mul_8ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 21 ))
conv_mul_mul_8ns_lbW_U17(
    .din0(mul_ln68_2_fu_2350_p0),
    .din1(mul_ln68_2_fu_2350_p1),
    .dout(mul_ln68_2_fu_2350_p2)
);

conv_mac_muladd_2mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 45 ),
    .dout_WIDTH( 45 ))
conv_mac_muladd_2mb6_U18(
    .din0(grp_fu_2356_p0),
    .din1(grp_fu_2356_p1),
    .din2(mul_ln1352_4_reg_2838),
    .dout(grp_fu_2356_p3)
);

conv_mul_mul_8ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 21 ))
conv_mul_mul_8ns_lbW_U19(
    .din0(mul_ln68_3_fu_2363_p0),
    .din1(mul_ln68_3_fu_2363_p1),
    .dout(mul_ln68_3_fu_2363_p2)
);

conv_mac_muladd_1ncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
conv_mac_muladd_1ncg_U20(
    .din0(trunc_ln647_fu_1695_p1),
    .din1(trunc_ln647_1_fu_1699_p1),
    .din2(mul_ln1352_11_fu_2378_p2),
    .dout(grp_fu_2369_p3)
);

conv_mul_mul_16s_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16s_ocq_U21(
    .din0(p_Result_1_fu_1711_p4),
    .din1(p_Result_5_1_fu_1721_p4),
    .dout(mul_ln1352_11_fu_2378_p2)
);

conv_mac_muladd_1ncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
conv_mac_muladd_1ncg_U22(
    .din0(p_Result_2_fu_1739_p4),
    .din1(p_Result_5_2_fu_1749_p4),
    .din2(mul_ln1352_13_fu_2394_p2),
    .dout(grp_fu_2385_p3)
);

conv_mul_mul_16s_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16s_ocq_U23(
    .din0(p_Result_3_fu_1767_p4),
    .din1(p_Result_5_3_fu_1777_p4),
    .dout(mul_ln1352_13_fu_2394_p2)
);

conv_mac_muladd_1ncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
conv_mac_muladd_1ncg_U24(
    .din0(p_Result_4_fu_1795_p4),
    .din1(p_Result_5_4_fu_1805_p4),
    .din2(mul_ln1352_15_fu_2410_p2),
    .dout(grp_fu_2401_p3)
);

conv_mul_mul_16s_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16s_ocq_U25(
    .din0(p_Result_s_fu_1823_p4),
    .din1(p_Result_5_5_fu_1833_p4),
    .dout(mul_ln1352_15_fu_2410_p2)
);

conv_mac_muladd_1ncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
conv_mac_muladd_1ncg_U26(
    .din0(p_Result_6_fu_1851_p4),
    .din1(p_Result_5_6_fu_1861_p4),
    .din2(mul_ln1352_17_fu_2426_p2),
    .dout(grp_fu_2417_p3)
);

conv_mul_mul_16s_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
conv_mul_mul_16s_ocq_U27(
    .din0(p_Result_7_fu_1879_p4),
    .din1(p_Result_5_7_fu_1889_p4),
    .dout(mul_ln1352_17_fu_2426_p2)
);

conv_mul_mul_16nspcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
conv_mul_mul_16nspcA_U28(
    .din0(ret_V_4_fu_2433_p0),
    .din1(ret_V_4_fu_2433_p1),
    .dout(ret_V_4_fu_2433_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln90_fu_1324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state84)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if ((1'b1 == ap_CS_fsm_state84)) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state86)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_874)) begin
        if (((select_ln1598_20_fu_1546_p3 == 1'd1) & (icmp_ln90_fu_1324_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_Val2_1_reg_557 <= 128'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter0_p_Val2_1_reg_557;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_874)) begin
        if (((select_ln1598_20_fu_1546_p3 == 1'd1) & (icmp_ln90_fu_1324_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_Val2_2_reg_546 <= 128'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter0_p_Val2_2_reg_546;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((or_ln135_reg_2988 == 1'd1) & (1'b0 == AXI_F_BVALID)) & (1'b1 == ap_CS_fsm_state106))) begin
        i_op_assign_10_reg_454 <= select_ln81_reg_2782;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_op_assign_10_reg_454 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((or_ln135_reg_2988 == 1'd1) & (1'b0 == AXI_F_BVALID)) & (1'b1 == ap_CS_fsm_state106))) begin
        i_op_assign_11_reg_466 <= cout_fu_2252_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_op_assign_11_reg_466 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_reg_2858 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_op_assign_12_reg_489 <= select_ln1598_13_reg_2872;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        i_op_assign_12_reg_489 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_reg_2858 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_op_assign_13_reg_511 <= select_ln92_reg_2906;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        i_op_assign_13_reg_511 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((or_ln135_reg_2988 == 1'd1) & (1'b0 == AXI_F_BVALID)) & (1'b1 == ap_CS_fsm_state106))) begin
        i_op_assign_9_reg_431 <= select_ln1598_2_reg_2755;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_op_assign_9_reg_431 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_fu_1324_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_op_assign_reg_523 <= cin_fu_1580_p2;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        i_op_assign_reg_523 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_fu_1324_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten39_reg_478 <= add_ln90_fu_1329_p2;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        indvar_flatten39_reg_478 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((or_ln135_reg_2988 == 1'd1) & (1'b0 == AXI_F_BVALID)) & (1'b1 == ap_CS_fsm_state106))) begin
        indvar_flatten47_reg_442 <= select_ln81_1_fu_2263_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten47_reg_442 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((or_ln135_reg_2988 == 1'd1) & (1'b0 == AXI_F_BVALID)) & (1'b1 == ap_CS_fsm_state106))) begin
        indvar_flatten71_reg_419 <= add_ln79_reg_2743;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten71_reg_419 <= 48'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_fu_1324_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_500 <= select_ln92_1_fu_1592_p3;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        indvar_flatten_reg_500 <= 22'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_reg_2858_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        p_01304_5_reg_534 <= add_ln700_7_fu_1960_p2;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        p_01304_5_reg_534 <= 40'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln135_fu_2198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state98))) begin
        p_Val2_s_fu_256 <= p_Result_s_17_fu_2187_p2;
    end else if ((((or_ln135_fu_2198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        p_Val2_s_fu_256 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        CHin_div_K_V_reg_2524 <= {{add_ln1371_fu_627_p2[16:3]}};
        CHout_V_read_reg_2482 <= CHout_V;
        Hin_V_read_reg_2497 <= Hin_V;
        Kx_V_read_reg_2475 <= Kx_V;
        Ky_V_read_reg_2467 <= Ky_V;
        Sx_V_read_reg_2462 <= Sx_V;
        Sy_V_read_reg_2456 <= Sy_V;
        Win_V_read_reg_2491 <= Win_V;
        gmem_addr_reg_2508[30 : 0] <= empty_fu_593_p1[30 : 0];
        mode_V_read_reg_2451 <= mode_V;
        out_truncate_acc_V_reg_2533 <= out_truncate_acc_V_fu_661_p2;
        relu_en_V_read_reg_2446 <= relu_en_V;
        ret_V_12_reg_2538 <= ret_V_12_fu_671_p2;
        select_ln59_reg_2543 <= select_ln59_fu_735_p3;
        tmp_1_reg_2514 <= {{W_V[31:4]}};
        tmp_3_reg_2519 <= {{feature_in_V[31:4]}};
        tmp_reg_2503 <= {{feature_out_V[31:4]}};
        zext_ln1371_10_reg_2548[15 : 0] <= zext_ln1371_10_fu_755_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_20_reg_2897 == 1'd0) & (icmp_ln90_reg_2858 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln180_1_reg_2926 <= add_ln180_1_fu_1643_p2;
        add_ln180_2_reg_2931 <= add_ln180_2_fu_1670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        add_ln180_reg_2997 <= add_ln180_fu_2237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_reg_2858_pp0_iter9_reg == 1'd0))) begin
        add_ln700_6_reg_2958 <= add_ln700_6_fu_1951_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln79_reg_2743 <= add_ln79_fu_1051_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_phi_reg_pp0_iter10_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter9_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter10_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter9_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter1_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter2_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter1_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter2_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter3_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter2_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter3_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter4_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter3_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_phi_reg_pp0_iter5_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter4_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter5_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter4_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_phi_reg_pp0_iter6_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter5_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter6_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter5_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_phi_reg_pp0_iter7_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter6_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter7_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter6_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_phi_reg_pp0_iter8_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter7_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter8_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter7_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ap_phi_reg_pp0_iter9_p_Val2_1_reg_557 <= ap_phi_reg_pp0_iter8_p_Val2_1_reg_557;
        ap_phi_reg_pp0_iter9_p_Val2_2_reg_546 <= ap_phi_reg_pp0_iter8_p_Val2_2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        bound44_reg_2720 <= bound44_fu_2283_p2;
        bound4_reg_2715 <= bound4_fu_2277_p2;
        bound52_reg_2725 <= bound52_fu_1017_p2;
        bound_reg_2710 <= bound_fu_2270_p2;
        empty_15_reg_2699[15 : 0] <= empty_15_fu_995_p1[15 : 0];
        icmp_ln83_reg_2730 <= icmp_ln83_fu_1023_p2;
        icmp_ln94_reg_2735 <= icmp_ln94_fu_1028_p2;
        p_cast35_reg_2596[27 : 0] <= p_cast35_fu_907_p1[27 : 0];
        p_cast37_reg_2591[27 : 0] <= p_cast37_fu_904_p1[27 : 0];
        p_cast_reg_2601[27 : 0] <= p_cast_fu_910_p1[27 : 0];
        ret_V_3_reg_2694 <= ret_V_3_fu_989_p2;
        rhs_V_2_reg_2663[15 : 0] <= rhs_V_2_fu_968_p1[15 : 0];
        zext_ln1352_1_reg_2689[7 : 0] <= zext_ln1352_1_fu_983_p1[7 : 0];
        zext_ln1352_2_reg_2684[7 : 0] <= zext_ln1352_2_fu_980_p1[7 : 0];
        zext_ln1352_4_reg_2704[13 : 0] <= zext_ln1352_4_fu_998_p1[13 : 0];
        zext_ln1352_reg_2647[15 : 0] <= zext_ln1352_fu_958_p1[15 : 0];
        zext_ln215_1_reg_2641[15 : 0] <= zext_ln215_1_fu_954_p1[15 : 0];
        zext_ln215_2_reg_2669[15 : 0] <= zext_ln215_2_fu_971_p1[15 : 0];
        zext_ln215_3_reg_2674[15 : 0] <= zext_ln215_3_fu_974_p1[15 : 0];
        zext_ln215_4_reg_2679[7 : 0] <= zext_ln215_4_fu_977_p1[7 : 0];
        zext_ln215_reg_2636[15 : 0] <= zext_ln215_fu_950_p1[15 : 0];
        zext_ln68_1_reg_2616[7 : 0] <= zext_ln68_1_fu_938_p1[7 : 0];
        zext_ln68_2_reg_2652[7 : 0] <= zext_ln68_2_fu_962_p1[7 : 0];
        zext_ln68_3_reg_2657[7 : 0] <= zext_ln68_3_fu_965_p1[7 : 0];
        zext_ln68_4_reg_2606[4 : 0] <= zext_ln68_4_fu_932_p1[4 : 0];
        zext_ln68_reg_2611[7 : 0] <= zext_ln68_fu_935_p1[7 : 0];
        zext_ln808_1_reg_2621[13 : 0] <= zext_ln808_1_fu_941_p1[13 : 0];
        zext_ln808_2_reg_2626[13 : 0] <= zext_ln808_2_fu_944_p1[13 : 0];
        zext_ln808_reg_2631[4 : 0] <= zext_ln808_fu_947_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op544_read_state94 == 1'b1))) begin
        dat_V_reg_2948 <= AXI_F_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
        gmem_addr_read_reg_2833 <= gmem_RDATA;
        mul_ln1352_4_reg_2838 <= mul_ln1352_4_fu_1211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_1046_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        icmp_ln81_reg_2748 <= icmp_ln81_fu_1057_p2;
        j_reg_2772 <= j_fu_1113_p2;
        select_ln1598_2_reg_2755 <= select_ln1598_2_fu_1086_p3;
        select_ln1598_5_reg_2766 <= select_ln1598_5_fu_1106_p3;
        select_ln1598_8_reg_2777 <= select_ln1598_8_fu_1129_p3;
        select_ln81_reg_2782 <= select_ln81_fu_1137_p3;
        sub_ln1598_reg_2760 <= grp_fu_2304_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        icmp_ln879_reg_2978 <= icmp_ln879_fu_1990_p2;
        icmp_ln895_reg_2973 <= icmp_ln895_fu_1981_p2;
        r_V_reg_2968 <= r_V_fu_1966_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln90_reg_2858 <= icmp_ln90_fu_1324_p2;
        icmp_ln90_reg_2858_pp0_iter1_reg <= icmp_ln90_reg_2858;
        select_ln1598_20_reg_2897_pp0_iter1_reg <= select_ln1598_20_reg_2897;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln90_reg_2858_pp0_iter10_reg <= icmp_ln90_reg_2858_pp0_iter9_reg;
        icmp_ln90_reg_2858_pp0_iter2_reg <= icmp_ln90_reg_2858_pp0_iter1_reg;
        icmp_ln90_reg_2858_pp0_iter3_reg <= icmp_ln90_reg_2858_pp0_iter2_reg;
        icmp_ln90_reg_2858_pp0_iter4_reg <= icmp_ln90_reg_2858_pp0_iter3_reg;
        icmp_ln90_reg_2858_pp0_iter5_reg <= icmp_ln90_reg_2858_pp0_iter4_reg;
        icmp_ln90_reg_2858_pp0_iter6_reg <= icmp_ln90_reg_2858_pp0_iter5_reg;
        icmp_ln90_reg_2858_pp0_iter7_reg <= icmp_ln90_reg_2858_pp0_iter6_reg;
        icmp_ln90_reg_2858_pp0_iter8_reg <= icmp_ln90_reg_2858_pp0_iter7_reg;
        icmp_ln90_reg_2858_pp0_iter9_reg <= icmp_ln90_reg_2858_pp0_iter8_reg;
        select_ln1598_20_reg_2897_pp0_iter2_reg <= select_ln1598_20_reg_2897_pp0_iter1_reg;
        select_ln1598_20_reg_2897_pp0_iter3_reg <= select_ln1598_20_reg_2897_pp0_iter2_reg;
        select_ln1598_20_reg_2897_pp0_iter4_reg <= select_ln1598_20_reg_2897_pp0_iter3_reg;
        select_ln1598_20_reg_2897_pp0_iter5_reg <= select_ln1598_20_reg_2897_pp0_iter4_reg;
        select_ln1598_20_reg_2897_pp0_iter6_reg <= select_ln1598_20_reg_2897_pp0_iter5_reg;
        select_ln1598_20_reg_2897_pp0_iter7_reg <= select_ln1598_20_reg_2897_pp0_iter6_reg;
        select_ln1598_20_reg_2897_pp0_iter8_reg <= select_ln1598_20_reg_2897_pp0_iter7_reg;
        select_ln1598_20_reg_2897_pp0_iter9_reg <= select_ln1598_20_reg_2897_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_fu_1324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln92_reg_2867 <= icmp_ln92_fu_1335_p2;
        jj_reg_2887 <= jj_fu_1472_p2;
        mul_ln1598_1_reg_2877 <= mul_ln1598_1_fu_2340_p2;
        select_ln1598_17_reg_2882 <= select_ln1598_17_fu_1465_p3;
        select_ln1598_18_reg_2892 <= select_ln1598_18_fu_1484_p3;
        select_ln1598_20_reg_2897 <= select_ln1598_20_fu_1546_p3;
        select_ln1598_21_reg_2901 <= select_ln1598_21_fu_1560_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln135_fu_2198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
        mul_ln1352_9_reg_2992 <= mul_ln1352_9_fu_2224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        or_ln135_reg_2988 <= or_ln135_fu_2198_p2;
        p_Result_s_17_reg_2983 <= p_Result_s_17_fu_2187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        r_V_2_reg_2843 <= r_V_2_fu_1216_p2;
        sext_ln94_1_reg_2848 <= sext_ln94_1_fu_1223_p1;
        xor_ln105_reg_2853 <= xor_ln105_fu_1231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        ret_V_10_reg_2828 <= ret_V_10_fu_1203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln1598_20_fu_1546_p3 == 1'd0) & (icmp_ln90_fu_1324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_6_reg_2911 <= ret_V_6_fu_2345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        sdiv_ln1371_1_reg_2586 <= grp_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln90_fu_1324_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln1598_13_reg_2872 <= select_ln1598_13_fu_1404_p3;
        select_ln92_reg_2906 <= select_ln92_fu_1568_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state76_io) & (1'b1 == ap_CS_fsm_state76))) begin
        select_ln1598_6_reg_2801 <= select_ln1598_6_fu_1175_p3;
        trunc_ln1598_reg_2813 <= trunc_ln1598_fu_1186_p1;
        zext_ln1598_4_reg_2808[31 : 0] <= zext_ln1598_4_fu_1183_p1[31 : 0];
        zext_ln1598_5_reg_2819[15 : 0] <= zext_ln1598_5_fu_1190_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln59_1_reg_2565 <= select_ln59_1_fu_850_p3;
        zext_ln1371_5_reg_2570[15 : 0] <= zext_ln1371_5_fu_869_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        sub_ln1598_1_reg_2792 <= sub_ln1598_1_fu_1166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op545_read_state94 == 1'b1))) begin
        wt_V_reg_2953 <= AXI_W_RDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op528_readreq_state87 == 1'b1))) begin
        AXI_F_ARVALID = 1'b1;
    end else begin
        AXI_F_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == AXI_F_AWREADY) & (1'b1 == ap_CS_fsm_state100))) begin
        AXI_F_AWVALID = 1'b1;
    end else begin
        AXI_F_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((or_ln135_reg_2988 == 1'd1) & (1'b0 == AXI_F_BVALID)) & (or_ln135_reg_2988 == 1'd1) & (1'b1 == ap_CS_fsm_state106))) begin
        AXI_F_BREADY = 1'b1;
    end else begin
        AXI_F_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op544_read_state94 == 1'b1))) begin
        AXI_F_RREADY = 1'b1;
    end else begin
        AXI_F_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == AXI_F_WREADY) & (1'b1 == ap_CS_fsm_state101))) begin
        AXI_F_WVALID = 1'b1;
    end else begin
        AXI_F_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln1598_20_reg_2897_pp0_iter1_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        AXI_F_blk_n_AR = m_axi_AXI_F_ARREADY;
    end else begin
        AXI_F_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        AXI_F_blk_n_AW = m_axi_AXI_F_AWREADY;
    end else begin
        AXI_F_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln135_reg_2988 == 1'd1) & (1'b1 == ap_CS_fsm_state106))) begin
        AXI_F_blk_n_B = m_axi_AXI_F_BVALID;
    end else begin
        AXI_F_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln1598_20_reg_2897_pp0_iter8_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        AXI_F_blk_n_R = m_axi_AXI_F_RVALID;
    end else begin
        AXI_F_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        AXI_F_blk_n_W = m_axi_AXI_F_WREADY;
    end else begin
        AXI_F_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op531_readreq_state87 == 1'b1))) begin
        AXI_W_ARVALID = 1'b1;
    end else begin
        AXI_W_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op545_read_state94 == 1'b1))) begin
        AXI_W_RREADY = 1'b1;
    end else begin
        AXI_W_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln1598_20_reg_2897_pp0_iter1_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        AXI_W_blk_n_AR = m_axi_AXI_W_ARREADY;
    end else begin
        AXI_W_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln1598_20_reg_2897_pp0_iter8_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        AXI_W_blk_n_R = m_axi_AXI_W_RVALID;
    end else begin
        AXI_W_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state86 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state86 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_1046_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_reg_2858 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_op_assign_12_phi_fu_493_p4 = select_ln1598_13_reg_2872;
    end else begin
        ap_phi_mux_i_op_assign_12_phi_fu_493_p4 = i_op_assign_12_reg_489;
    end
end

always @ (*) begin
    if (((icmp_ln90_reg_2858 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_op_assign_13_phi_fu_515_p4 = select_ln92_reg_2906;
    end else begin
        ap_phi_mux_i_op_assign_13_phi_fu_515_p4 = i_op_assign_13_reg_511;
    end
end

always @ (*) begin
    if (((select_ln1598_20_reg_2897_pp0_iter9_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_phi_mux_p_Val2_1_phi_fu_561_p4 = dat_V_reg_2948;
    end else begin
        ap_phi_mux_p_Val2_1_phi_fu_561_p4 = ap_phi_reg_pp0_iter10_p_Val2_1_reg_557;
    end
end

always @ (*) begin
    if (((select_ln1598_20_reg_2897_pp0_iter9_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_phi_mux_p_Val2_2_phi_fu_550_p4 = wt_V_reg_2953;
    end else begin
        ap_phi_mux_p_Val2_2_phi_fu_550_p4 = ap_phi_reg_pp0_iter10_p_Val2_2_reg_546;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_1046_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state76_io) & (empty_21_fu_1194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((empty_21_fu_1194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_1046_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_1148_ap_start = 1'b1;
    end else begin
        grp_fu_1148_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_1148_ce = 1'b0;
    end else begin
        grp_fu_1148_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_787_ap_start = 1'b1;
    end else begin
        grp_fu_787_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_898_ap_start = 1'b1;
    end else begin
        grp_fu_898_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln79_fu_1046_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((1'b0 == ap_block_state76_io) & (empty_21_fu_1194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else if (((1'b0 == ap_block_state76_io) & (empty_21_fu_1194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter11 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter11 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            if (((or_ln135_fu_2198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            if (((1'b1 == AXI_F_AWREADY) & (1'b1 == ap_CS_fsm_state100))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state101 : begin
            if (((1'b1 == AXI_F_WREADY) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            if ((~((or_ln135_reg_2988 == 1'd1) & (1'b0 == AXI_F_BVALID)) & (1'b1 == ap_CS_fsm_state106))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_F_ARADDR = sext_ln180_1_fu_1675_p1;

assign AXI_F_AWADDR = zext_ln180_1_fu_2242_p1;

assign AXI_W_ARADDR = zext_ln180_3_fu_1685_p1;

assign B_V5_fu_583_p4 = {{B_V[31:1]}};

assign Hout_V_fu_917_p2 = (16'd1 + trunc_ln214_fu_913_p1);

assign Lo_assign_fu_2048_p3 = {{trunc_ln1598_reg_2813}, {4'd0}};

assign Wout_V_fu_926_p2 = (16'd1 + trunc_ln214_1_fu_923_p1);

assign add_ln1371_1_fu_681_p2 = ($signed(9'd511) + $signed(zext_ln1371_1_fu_677_p1));

assign add_ln1371_2_fu_796_p2 = ($signed(9'd511) + $signed(zext_ln1371_2_fu_793_p1));

assign add_ln1371_3_fu_872_p2 = (zext_ln1371_5_fu_869_p1 + zext_ln1371_4_fu_865_p1);

assign add_ln1371_4_fu_759_p2 = (zext_ln1371_10_fu_755_p1 + zext_ln1371_9_fu_751_p1);

assign add_ln1371_fu_627_p2 = (17'd7 + zext_ln1371_fu_623_p1);

assign add_ln180_1_fu_1643_p2 = ($signed(sext_ln180_fu_1639_p1) + $signed(p_cast_reg_2601));

assign add_ln180_2_fu_1670_p2 = (zext_ln180_2_fu_1666_p1 + p_cast35_reg_2596);

assign add_ln180_fu_2237_p2 = (zext_ln180_fu_2233_p1 + p_cast37_reg_2591);

assign add_ln544_1_fu_2229_p2 = (mul_ln1352_9_reg_2992 + zext_ln1598_4_reg_2808);

assign add_ln544_2_fu_1319_p2 = ($signed(ret_V_8_fu_2326_p2) + $signed(sext_ln94_fu_1284_p1));

assign add_ln544_3_fu_1633_p2 = ($signed(ret_V_7_fu_1628_p2) + $signed(sext_ln1598_fu_1622_p1));

assign add_ln544_4_fu_1123_p2 = (zext_ln1598_3_fu_1119_p1 + select_ln1598_1_fu_1080_p3);

assign add_ln544_5_fu_1651_p2 = (zext_ln544_fu_1648_p1 + select_ln1598_19_fu_1616_p3);

assign add_ln544_6_fu_1661_p2 = (grp_fu_2356_p3 + zext_ln544_1_fu_1657_p1);

assign add_ln544_7_fu_1448_p2 = ($signed(mul_ln1352_7_fu_2333_p2) + $signed(sext_ln94_1_reg_2848));

assign add_ln544_8_fu_1554_p2 = ($signed(select_ln1598_11_fu_1379_p3) + $signed(sext_ln94_2_fu_1511_p1));

assign add_ln544_fu_1041_p2 = (ret_V_5_fu_2290_p2 + zext_ln1598_1_fu_1037_p1);

assign add_ln68_2_fu_1358_p2 = ($signed(sub_ln1598_reg_2760) + $signed(zext_ln68_7_fu_1354_p1));

assign add_ln68_3_fu_1496_p2 = ($signed(sub_ln1598_1_reg_2792) + $signed(zext_ln68_8_fu_1492_p1));

assign add_ln700_2_fu_1925_p2 = ($signed(sext_ln700_8_fu_1919_p1) + $signed(sext_ln700_9_fu_1922_p1));

assign add_ln700_5_fu_1941_p2 = ($signed(sext_ln700_11_fu_1935_p1) + $signed(sext_ln700_12_fu_1938_p1));

assign add_ln700_6_fu_1951_p2 = ($signed(sext_ln700_10_fu_1931_p1) + $signed(sext_ln700_13_fu_1947_p1));

assign add_ln700_7_fu_1960_p2 = ($signed(sext_ln700_14_fu_1957_p1) + $signed(p_01304_5_reg_534));

assign add_ln79_1_fu_1070_p2 = (16'd1 + i_op_assign_9_reg_431);

assign add_ln79_fu_1051_p2 = (indvar_flatten71_reg_419 + 48'd1);

assign add_ln81_1_fu_2257_p2 = (indvar_flatten47_reg_442 + 32'd1);

assign add_ln90_1_fu_1348_p2 = (ap_phi_mux_i_op_assign_12_phi_fu_493_p4 + 8'd1);

assign add_ln90_fu_1329_p2 = (indvar_flatten39_reg_478 + 30'd1);

assign add_ln92_1_fu_1586_p2 = (22'd1 + indvar_flatten_reg_500);

assign and_ln414_1_fu_2175_p2 = (xor_ln414_2_fu_2169_p2 & p_Val2_s_fu_256);

assign and_ln414_2_fu_2181_p2 = (select_ln414_3_fu_2143_p3 & and_ln414_fu_2163_p2);

assign and_ln414_fu_2163_p2 = (shl_ln414_1_fu_2151_p2 & lshr_ln414_fu_2157_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd87];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (((1'b0 == AXI_W_RVALID) & (ap_predicate_op545_read_state94 == 1'b1)) | ((1'b0 == AXI_F_RVALID) & (ap_predicate_op544_read_state94 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state87_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter9 == 1'b1) & (((1'b0 == AXI_W_RVALID) & (ap_predicate_op545_read_state94 == 1'b1)) | ((1'b0 == AXI_F_RVALID) & (ap_predicate_op544_read_state94 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state87_io)));
end

always @ (*) begin
    ap_block_state106 = ((or_ln135_reg_2988 == 1'd1) & (1'b0 == AXI_F_BVALID));
end

always @ (*) begin
    ap_block_state76_io = ((empty_21_fu_1194_p2 == 1'd1) & (gmem_ARREADY == 1'b0));
end

assign ap_block_state85_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state87_io = (((1'b0 == AXI_W_ARREADY) & (ap_predicate_op531_readreq_state87 == 1'b1)) | ((1'b0 == AXI_F_ARREADY) & (ap_predicate_op528_readreq_state87 == 1'b1)));
end

assign ap_block_state87_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state94_pp0_stage0_iter9 = (((1'b0 == AXI_W_RVALID) & (ap_predicate_op545_read_state94 == 1'b1)) | ((1'b0 == AXI_F_RVALID) & (ap_predicate_op544_read_state94 == 1'b1)));
end

assign ap_block_state95_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_874 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_Val2_1_reg_557 = 'bx;

assign ap_phi_reg_pp0_iter0_p_Val2_2_reg_546 = 'bx;

always @ (*) begin
    ap_predicate_op528_readreq_state87 = ((select_ln1598_20_reg_2897_pp0_iter1_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op531_readreq_state87 = ((select_ln1598_20_reg_2897_pp0_iter1_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op544_read_state94 = ((select_ln1598_20_reg_2897_pp0_iter8_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter8_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op545_read_state94 = ((select_ln1598_20_reg_2897_pp0_iter8_reg == 1'd0) & (icmp_ln90_reg_2858_pp0_iter8_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound44_fu_2283_p0 = bound44_fu_2283_p00;

assign bound44_fu_2283_p00 = Wout_V_fu_926_p2;

assign bound44_fu_2283_p1 = bound44_fu_2283_p10;

assign bound44_fu_2283_p10 = CHout_V_read_reg_2482;

assign bound4_fu_2277_p0 = bound4_fu_2277_p00;

assign bound4_fu_2277_p00 = Ky_V_read_reg_2467;

assign bound4_fu_2277_p1 = bound4_fu_2277_p10;

assign bound4_fu_2277_p10 = bound_fu_2270_p2;

assign bound52_fu_1017_p0 = bound52_fu_1017_p00;

assign bound52_fu_1017_p00 = Hout_V_fu_917_p2;

assign bound52_fu_1017_p1 = bound52_fu_1017_p10;

assign bound52_fu_1017_p10 = bound44_fu_2283_p2;

assign bound52_fu_1017_p2 = (bound52_fu_1017_p0 * bound52_fu_1017_p1);

assign bound_fu_2270_p0 = bound_fu_2270_p00;

assign bound_fu_2270_p00 = Kx_V_read_reg_2475;

assign bound_fu_2270_p1 = bound_fu_2270_p10;

assign bound_fu_2270_p10 = CHin_div_K_V_reg_2524;

assign cin_fu_1580_p2 = (14'd1 + select_ln1598_18_fu_1484_p3);

assign cout_fu_2252_p2 = (select_ln1598_6_reg_2801 + 16'd1);

assign empty_15_fu_995_p1 = CHout_V_read_reg_2482;

assign empty_21_fu_1194_p2 = ((grp_fu_1148_p2 == 48'd0) ? 1'b1 : 1'b0);

assign empty_fu_593_p1 = B_V5_fu_583_p4;

assign grp_fu_1148_p1 = grp_fu_1148_p10;

assign grp_fu_1148_p10 = CHout_V_read_reg_2482;

assign grp_fu_2304_p0 = zext_ln68_2_reg_2652;

assign grp_fu_2304_p1 = ((icmp_ln81_fu_1057_p2[0:0] === 1'b1) ? add_ln79_1_fu_1070_p2 : i_op_assign_9_reg_431);

assign grp_fu_2304_p2 = zext_ln68_reg_2611;

assign grp_fu_2356_p0 = grp_fu_2356_p00;

assign grp_fu_2356_p00 = mul_ln1598_1_reg_2877;

assign grp_fu_2356_p1 = zext_ln215_4_reg_2679;

assign grp_fu_787_p0 = $signed(sub_ln1371_5_fu_773_p2);

assign grp_fu_787_p1 = grp_fu_787_p10;

assign grp_fu_787_p10 = Sx_V;

assign grp_fu_898_p0 = $signed(sub_ln1371_4_fu_885_p2);

assign grp_fu_898_p1 = grp_fu_898_p10;

assign grp_fu_898_p10 = Sy_V_read_reg_2456;

assign h_V_fu_1241_p2 = ($signed(sub_ln1598_reg_2760) + $signed(zext_ln68_5_fu_1237_p1));

assign icmp_ln105_1_fu_1254_p2 = (($signed(sext_ln1352_fu_1250_p1) < $signed(zext_ln1371_5_reg_2570)) ? 1'b1 : 1'b0);

assign icmp_ln105_2_fu_1296_p2 = (($signed(sext_ln544_fu_1280_p1) < $signed(zext_ln1371_10_reg_2548)) ? 1'b1 : 1'b0);

assign icmp_ln105_3_fu_1385_p2 = (($signed(sext_ln1352_1_fu_1375_p1) < $signed(zext_ln1371_5_reg_2570)) ? 1'b1 : 1'b0);

assign icmp_ln105_4_fu_1523_p2 = (($signed(sext_ln544_2_fu_1507_p1) < $signed(zext_ln1371_10_reg_2548)) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_1226_p2 = (($signed(sext_ln544_1_fu_1220_p1) < $signed(zext_ln1371_10_reg_2548)) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_2193_p2 = ((trunc_ln1598_reg_2813 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_2065_p2 = ((Lo_assign_fu_2048_p3 > or_ln132_fu_2055_p2) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1046_p2 = ((indvar_flatten71_reg_419 == bound52_reg_2725) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_1057_p2 = ((indvar_flatten47_reg_442 == bound44_reg_2720) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_1101_p2 = ((i_op_assign_11_reg_466 == CHout_V_read_reg_2482) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_1023_p2 = ((CHout_V_read_reg_2482 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1990_p2 = ((zext_ln879_fu_1987_p1 == ret_V_3_reg_2694) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_2004_p2 = (($signed(select_ln126_fu_1998_p3) < $signed(40'd1099511595008)) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_1981_p2 = (($signed(tmp_8_fu_1971_p4) > $signed(25'd0)) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_1324_p2 = ((indvar_flatten39_reg_478 == bound4_reg_2715) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_1335_p2 = ((indvar_flatten_reg_500 == bound_reg_2710) ? 1'b1 : 1'b0);

assign icmp_ln94_1_fu_1460_p2 = ((i_op_assign_reg_523 == CHin_div_K_V_reg_2524) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_1028_p2 = ((CHin_div_K_V_reg_2524 == 14'd0) ? 1'b1 : 1'b0);

assign j_fu_1113_p2 = (16'd1 + select_ln1598_fu_1062_p3);

assign jj_fu_1472_p2 = (select_ln1598_9_fu_1340_p3 + 8'd1);

assign lhs_V_1_fu_667_p1 = B_precision_V;

assign lhs_V_fu_643_p1 = feature_in_precision_V;

assign lshr_ln414_fu_2157_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln414_4_fu_2123_p1;

assign mul_ln1352_2_fu_2297_p0 = zext_ln215_1_reg_2641;

assign mul_ln1352_2_fu_2297_p1 = mul_ln1352_2_fu_2297_p10;

assign mul_ln1352_2_fu_2297_p10 = add_ln79_1_fu_1070_p2;

assign mul_ln1352_4_fu_1211_p0 = mul_ln1352_4_fu_1211_p00;

assign mul_ln1352_4_fu_1211_p00 = ret_V_10_reg_2828;

assign mul_ln1352_4_fu_1211_p1 = zext_ln1352_1_reg_2689;

assign mul_ln1352_4_fu_1211_p2 = (mul_ln1352_4_fu_1211_p0 * mul_ln1352_4_fu_1211_p1);

assign mul_ln1352_7_fu_2333_p1 = rhs_V_2_reg_2663;

assign mul_ln1352_9_fu_2224_p0 = zext_ln1352_reg_2647;

assign mul_ln1352_9_fu_2224_p1 = mul_ln1352_9_fu_2224_p10;

assign mul_ln1352_9_fu_2224_p10 = ret_V_4_fu_2433_p2;

assign mul_ln1352_9_fu_2224_p2 = (mul_ln1352_9_fu_2224_p0 * mul_ln1352_9_fu_2224_p1);

assign mul_ln1598_1_fu_2340_p0 = mul_ln1598_1_fu_2340_p00;

assign mul_ln1598_1_fu_2340_p00 = select_ln1598_13_fu_1404_p3;

assign mul_ln1598_1_fu_2340_p1 = zext_ln808_1_reg_2621;

assign mul_ln68_1_fu_2316_p0 = zext_ln68_3_reg_2657;

assign mul_ln68_2_fu_2350_p0 = mul_ln68_2_fu_2350_p00;

assign mul_ln68_2_fu_2350_p00 = i_op_assign_13_reg_511;

assign mul_ln68_2_fu_2350_p1 = zext_ln1352_4_reg_2704;

assign mul_ln68_3_fu_2363_p0 = mul_ln68_3_fu_2363_p00;

assign mul_ln68_3_fu_2363_p00 = jj_reg_2887;

assign mul_ln68_3_fu_2363_p1 = zext_ln1352_4_reg_2704;

assign mul_ln68_fu_2310_p1 = zext_ln68_3_reg_2657;

assign or_ln105_1_fu_1307_p2 = (xor_ln105_2_fu_1301_p2 | xor_ln105_1_fu_1259_p2);

assign or_ln105_2_fu_1313_p2 = (tmp_7_fu_1288_p3 | or_ln105_1_fu_1307_p2);

assign or_ln105_3_fu_1416_p2 = (sub_ln1598_1_reg_2792 | add_ln68_2_fu_1358_p2);

assign or_ln105_4_fu_1429_p2 = (xor_ln105_reg_2853 | xor_ln105_3_fu_1390_p2);

assign or_ln105_5_fu_1434_p2 = (tmp_11_fu_1421_p3 | or_ln105_4_fu_1429_p2);

assign or_ln105_6_fu_1501_p2 = (select_ln1598_10_fu_1363_p3 | add_ln68_3_fu_1496_p2);

assign or_ln105_7_fu_1534_p2 = (xor_ln105_4_fu_1528_p2 | select_ln1598_12_fu_1396_p3);

assign or_ln105_8_fu_1540_p2 = (tmp_12_fu_1515_p3 | or_ln105_7_fu_1534_p2);

assign or_ln105_fu_1274_p2 = (w_V_fu_1269_p2 | h_V_fu_1241_p2);

assign or_ln132_fu_2055_p2 = (7'd15 | Lo_assign_fu_2048_p3);

assign or_ln135_fu_2198_p2 = (icmp_ln879_reg_2978 | icmp_ln135_fu_2193_p2);

assign or_ln1598_1_fu_1478_p2 = (select_ln1598_17_fu_1465_p3 | icmp_ln92_fu_1335_p2);

assign or_ln1598_fu_1171_p2 = (select_ln1598_5_reg_2766 | icmp_ln81_reg_2748);

assign out_truncate_acc_V_fu_661_p2 = (ret_V_11_fu_655_p2 - rhs_V_1_fu_651_p1);

assign p_Result_1_fu_1711_p4 = {{ap_phi_mux_p_Val2_1_phi_fu_561_p4[31:16]}};

assign p_Result_2_fu_1739_p4 = {{ap_phi_mux_p_Val2_1_phi_fu_561_p4[47:32]}};

assign p_Result_3_fu_1767_p4 = {{ap_phi_mux_p_Val2_1_phi_fu_561_p4[63:48]}};

assign p_Result_4_fu_1795_p4 = {{ap_phi_mux_p_Val2_1_phi_fu_561_p4[79:64]}};

assign p_Result_5_1_fu_1721_p4 = {{ap_phi_mux_p_Val2_2_phi_fu_550_p4[31:16]}};

assign p_Result_5_2_fu_1749_p4 = {{ap_phi_mux_p_Val2_2_phi_fu_550_p4[47:32]}};

assign p_Result_5_3_fu_1777_p4 = {{ap_phi_mux_p_Val2_2_phi_fu_550_p4[63:48]}};

assign p_Result_5_4_fu_1805_p4 = {{ap_phi_mux_p_Val2_2_phi_fu_550_p4[79:64]}};

assign p_Result_5_5_fu_1833_p4 = {{ap_phi_mux_p_Val2_2_phi_fu_550_p4[95:80]}};

assign p_Result_5_6_fu_1861_p4 = {{ap_phi_mux_p_Val2_2_phi_fu_550_p4[111:96]}};

assign p_Result_5_7_fu_1889_p4 = {{ap_phi_mux_p_Val2_2_phi_fu_550_p4[127:112]}};

assign p_Result_6_fu_1851_p4 = {{ap_phi_mux_p_Val2_1_phi_fu_561_p4[111:96]}};

assign p_Result_7_fu_1879_p4 = {{ap_phi_mux_p_Val2_1_phi_fu_561_p4[127:112]}};

assign p_Result_s_17_fu_2187_p2 = (and_ln414_2_fu_2181_p2 | and_ln414_1_fu_2175_p2);

assign p_Result_s_fu_1823_p4 = {{ap_phi_mux_p_Val2_1_phi_fu_561_p4[95:80]}};

assign p_cast35_fu_907_p1 = tmp_1_reg_2514;

assign p_cast37_fu_904_p1 = tmp_reg_2503;

assign p_cast_fu_910_p1 = tmp_3_reg_2519;

assign pad_x_V_fu_727_p3 = ((tmp_4_fu_687_p3[0:0] === 1'b1) ? sub_ln1371_1_fu_721_p2 : trunc_ln1371_2_fu_711_p4);

assign pad_y_V_fu_842_p3 = ((tmp_6_fu_802_p3[0:0] === 1'b1) ? sub_ln1371_3_fu_836_p2 : trunc_ln1371_5_fu_826_p4);

assign r_V_2_fu_1216_p2 = $signed(gmem_addr_read_reg_2833) >>> zext_ln68_4_reg_2606;

assign r_V_fu_1966_p2 = $signed(p_01304_5_reg_534) >>> zext_ln808_reg_2631;

assign ret_V_10_fu_1203_p0 = ret_V_10_fu_1203_p00;

assign ret_V_10_fu_1203_p00 = ret_V_9_fu_2321_p2;

assign ret_V_10_fu_1203_p1 = zext_ln1352_2_reg_2684;

assign ret_V_10_fu_1203_p2 = (ret_V_10_fu_1203_p0 * ret_V_10_fu_1203_p1);

assign ret_V_11_fu_655_p2 = (rhs_V_fu_647_p1 + lhs_V_fu_643_p1);

assign ret_V_12_fu_671_p2 = (lhs_V_1_fu_667_p1 - rhs_V_1_fu_651_p1);

assign ret_V_3_fu_989_p2 = ($signed(17'd131071) + $signed(zext_ln1354_fu_986_p1));

assign ret_V_4_fu_2433_p0 = zext_ln215_reg_2636;

assign ret_V_4_fu_2433_p1 = ret_V_4_fu_2433_p10;

assign ret_V_4_fu_2433_p10 = tmp_13_fu_2208_p4;

assign ret_V_5_fu_2290_p0 = ret_V_5_fu_2290_p00;

assign ret_V_5_fu_2290_p00 = i_op_assign_9_reg_431;

assign ret_V_5_fu_2290_p1 = zext_ln215_1_reg_2641;

assign ret_V_6_fu_2345_p0 = zext_ln215_2_reg_2669;

assign ret_V_6_fu_2345_p1 = ret_V_6_fu_2345_p10;

assign ret_V_6_fu_2345_p10 = select_ln1598_18_fu_1484_p3;

assign ret_V_7_fu_1628_p0 = zext_ln215_3_reg_2674;

assign ret_V_7_fu_1628_p1 = ret_V_7_fu_1628_p10;

assign ret_V_7_fu_1628_p10 = ret_V_6_reg_2911;

assign ret_V_7_fu_1628_p2 = (ret_V_7_fu_1628_p0 * ret_V_7_fu_1628_p1);

assign ret_V_8_fu_2326_p1 = rhs_V_2_reg_2663;

assign ret_V_9_fu_2321_p0 = zext_ln1598_5_reg_2819;

assign ret_V_9_fu_2321_p1 = zext_ln808_2_reg_2626;

assign ret_V_fu_2035_p2 = (tmp_9_fu_2027_p3 & relu_en_V_read_reg_2446);

assign rhs_V_1_fu_651_p1 = feature_out_precision_V;

assign rhs_V_2_fu_968_p1 = Win_V_read_reg_2491;

assign rhs_V_fu_647_p1 = W_precision_V;

assign select_ln126_fu_1998_p3 = ((icmp_ln895_reg_2973[0:0] === 1'b1) ? 40'd32767 : r_V_reg_2968);

assign select_ln130_fu_2040_p3 = ((ret_V_fu_2035_p2[0:0] === 1'b1) ? 16'd0 : sum_V_1_fu_2022_p2);

assign select_ln1598_10_fu_1363_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? add_ln68_2_fu_1358_p2 : h_V_fu_1241_p2);

assign select_ln1598_11_fu_1379_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? mul_ln1352_7_fu_2333_p2 : ret_V_8_fu_2326_p2);

assign select_ln1598_12_fu_1396_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? xor_ln105_3_fu_1390_p2 : xor_ln105_1_fu_1259_p2);

assign select_ln1598_13_fu_1404_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? add_ln90_1_fu_1348_p2 : ap_phi_mux_i_op_assign_12_phi_fu_493_p4);

assign select_ln1598_14_fu_1607_p3 = ((icmp_ln92_reg_2867[0:0] === 1'b1) ? 21'd0 : mul_ln68_2_fu_2350_p2);

assign select_ln1598_15_fu_1440_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? or_ln105_5_fu_1434_p2 : or_ln105_2_fu_1313_p2);

assign select_ln1598_16_fu_1452_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? add_ln544_7_fu_1448_p2 : add_ln544_2_fu_1319_p2);

assign select_ln1598_17_fu_1465_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? icmp_ln94_reg_2735 : icmp_ln94_1_fu_1460_p2);

assign select_ln1598_18_fu_1484_p3 = ((or_ln1598_1_fu_1478_p2[0:0] === 1'b1) ? 14'd0 : i_op_assign_reg_523);

assign select_ln1598_19_fu_1616_p3 = ((select_ln1598_17_reg_2882[0:0] === 1'b1) ? mul_ln68_3_fu_2363_p2 : select_ln1598_14_fu_1607_p3);

assign select_ln1598_1_fu_1080_p3 = ((icmp_ln81_fu_1057_p2[0:0] === 1'b1) ? mul_ln1352_2_fu_2297_p2 : ret_V_5_fu_2290_p2);

assign select_ln1598_20_fu_1546_p3 = ((select_ln1598_17_fu_1465_p3[0:0] === 1'b1) ? or_ln105_8_fu_1540_p2 : select_ln1598_15_fu_1440_p3);

assign select_ln1598_21_fu_1560_p3 = ((select_ln1598_17_fu_1465_p3[0:0] === 1'b1) ? add_ln544_8_fu_1554_p2 : select_ln1598_16_fu_1452_p3);

assign select_ln1598_2_fu_1086_p3 = ((icmp_ln81_fu_1057_p2[0:0] === 1'b1) ? add_ln79_1_fu_1070_p2 : i_op_assign_9_reg_431);

assign select_ln1598_3_fu_1154_p3 = ((icmp_ln81_reg_2748[0:0] === 1'b1) ? 16'd0 : mul_ln68_fu_2310_p2);

assign select_ln1598_4_fu_1094_p3 = ((icmp_ln81_fu_1057_p2[0:0] === 1'b1) ? mul_ln1352_2_fu_2297_p2 : add_ln544_fu_1041_p2);

assign select_ln1598_5_fu_1106_p3 = ((icmp_ln81_fu_1057_p2[0:0] === 1'b1) ? icmp_ln83_reg_2730 : icmp_ln83_1_fu_1101_p2);

assign select_ln1598_6_fu_1175_p3 = ((or_ln1598_fu_1171_p2[0:0] === 1'b1) ? 16'd0 : i_op_assign_11_reg_466);

assign select_ln1598_7_fu_1160_p3 = ((select_ln1598_5_reg_2766[0:0] === 1'b1) ? mul_ln68_1_fu_2316_p2 : select_ln1598_3_fu_1154_p3);

assign select_ln1598_8_fu_1129_p3 = ((select_ln1598_5_fu_1106_p3[0:0] === 1'b1) ? add_ln544_4_fu_1123_p2 : select_ln1598_4_fu_1094_p3);

assign select_ln1598_9_fu_1340_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_i_op_assign_13_phi_fu_515_p4);

assign select_ln1598_fu_1062_p3 = ((icmp_ln81_fu_1057_p2[0:0] === 1'b1) ? 16'd0 : i_op_assign_10_reg_454);

assign select_ln414_1_fu_2093_p3 = ((icmp_ln414_fu_2065_p2[0:0] === 1'b1) ? zext_ln414_1_fu_2075_p1 : zext_ln414_fu_2071_p1);

assign select_ln414_2_fu_2101_p3 = ((icmp_ln414_fu_2065_p2[0:0] === 1'b1) ? xor_ln414_fu_2079_p2 : zext_ln414_fu_2071_p1);

assign select_ln414_3_fu_2143_p3 = ((icmp_ln414_fu_2065_p2[0:0] === 1'b1) ? tmp_10_fu_2133_p4 : shl_ln414_fu_2127_p2);

assign select_ln414_fu_2085_p3 = ((icmp_ln414_fu_2065_p2[0:0] === 1'b1) ? zext_ln414_fu_2071_p1 : zext_ln414_1_fu_2075_p1);

assign select_ln59_1_fu_850_p3 = ((mode_V_read_reg_2451[0:0] === 1'b1) ? pad_y_V_fu_842_p3 : 8'd0);

assign select_ln59_fu_735_p3 = ((mode_V[0:0] === 1'b1) ? pad_x_V_fu_727_p3 : 8'd0);

assign select_ln81_1_fu_2263_p3 = ((icmp_ln81_reg_2748[0:0] === 1'b1) ? 32'd1 : add_ln81_1_fu_2257_p2);

assign select_ln81_fu_1137_p3 = ((select_ln1598_5_fu_1106_p3[0:0] === 1'b1) ? j_fu_1113_p2 : select_ln1598_fu_1062_p3);

assign select_ln92_1_fu_1592_p3 = ((icmp_ln92_fu_1335_p2[0:0] === 1'b1) ? 22'd1 : add_ln92_1_fu_1586_p2);

assign select_ln92_fu_1568_p3 = ((select_ln1598_17_fu_1465_p3[0:0] === 1'b1) ? jj_fu_1472_p2 : select_ln1598_9_fu_1340_p3);

assign sext_ln1352_1_fu_1375_p1 = add_ln68_2_fu_1358_p2;

assign sext_ln1352_fu_1250_p1 = h_V_fu_1241_p2;

assign sext_ln1598_fu_1622_p1 = $signed(select_ln1598_21_reg_2901);

assign sext_ln180_1_fu_1675_p1 = $signed(add_ln180_1_reg_2926);

assign sext_ln180_fu_1639_p1 = $signed(add_ln544_3_fu_1633_p2);

assign sext_ln544_1_fu_1220_p1 = sub_ln1598_1_reg_2792;

assign sext_ln544_2_fu_1507_p1 = add_ln68_3_fu_1496_p2;

assign sext_ln544_fu_1280_p1 = w_V_fu_1269_p2;

assign sext_ln700_10_fu_1931_p1 = $signed(add_ln700_2_fu_1925_p2);

assign sext_ln700_11_fu_1935_p1 = grp_fu_2401_p3;

assign sext_ln700_12_fu_1938_p1 = grp_fu_2417_p3;

assign sext_ln700_13_fu_1947_p1 = $signed(add_ln700_5_fu_1941_p2);

assign sext_ln700_14_fu_1957_p1 = $signed(add_ln700_6_reg_2958);

assign sext_ln700_8_fu_1919_p1 = grp_fu_2369_p3;

assign sext_ln700_9_fu_1922_p1 = grp_fu_2385_p3;

assign sext_ln94_1_fu_1223_p1 = sub_ln1598_1_reg_2792;

assign sext_ln94_2_fu_1511_p1 = add_ln68_3_fu_1496_p2;

assign sext_ln94_fu_1284_p1 = w_V_fu_1269_p2;

assign shl_ln1371_1_fu_743_p3 = {{select_ln59_fu_735_p3}, {1'd0}};

assign shl_ln414_1_fu_2151_p2 = 128'd340282366920938463463374607431768211455 << zext_ln414_3_fu_2119_p1;

assign shl_ln414_fu_2127_p2 = tmp_V_fu_2061_p1 << zext_ln414_2_fu_2115_p1;

assign shl_ln_fu_857_p3 = {{select_ln59_1_fu_850_p3}, {1'd0}};

assign sub_ln1371_1_fu_721_p2 = (8'd0 - trunc_ln1371_1_fu_701_p4);

assign sub_ln1371_2_fu_810_p2 = (9'd1 - zext_ln1371_2_fu_793_p1);

assign sub_ln1371_3_fu_836_p2 = (8'd0 - trunc_ln1371_4_fu_816_p4);

assign sub_ln1371_4_fu_885_p2 = (zext_ln1371_6_fu_878_p1 - zext_ln1371_8_fu_882_p1);

assign sub_ln1371_5_fu_773_p2 = (zext_ln1371_11_fu_765_p1 - zext_ln1371_12_fu_769_p1);

assign sub_ln1371_fu_695_p2 = (9'd1 - zext_ln1371_1_fu_677_p1);

assign sub_ln1598_1_fu_1166_p2 = (select_ln1598_7_fu_1160_p3 - zext_ln68_1_reg_2616);

assign sum_V_1_fu_2022_p2 = (r_V_2_reg_2843 + sum_mac_res_16_V_fu_2014_p3);

assign sum_mac_res_16_V_fu_2014_p3 = ((icmp_ln887_fu_2004_p2[0:0] === 1'b1) ? 16'd32768 : trunc_ln68_fu_2010_p1);

integer ap_tvar_int_0;

always @ (shl_ln414_fu_2127_p2) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_10_fu_2133_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_2133_p4[ap_tvar_int_0] = shl_ln414_fu_2127_p2[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_11_fu_1421_p3 = or_ln105_3_fu_1416_p2[32'd15];

assign tmp_12_fu_1515_p3 = or_ln105_6_fu_1501_p2[32'd15];

assign tmp_13_fu_2208_p4 = {{select_ln1598_6_reg_2801[15:3]}};

assign tmp_4_fu_687_p3 = add_ln1371_1_fu_681_p2[32'd8];

assign tmp_6_fu_802_p3 = add_ln1371_2_fu_796_p2[32'd8];

assign tmp_7_fu_1288_p3 = or_ln105_fu_1274_p2[32'd15];

assign tmp_8_fu_1971_p4 = {{r_V_fu_1966_p2[39:15]}};

assign tmp_9_fu_2027_p3 = sum_V_1_fu_2022_p2[32'd15];

assign tmp_V_fu_2061_p1 = $signed(select_ln130_fu_2040_p3);

assign trunc_ln1371_1_fu_701_p4 = {{sub_ln1371_fu_695_p2[8:1]}};

assign trunc_ln1371_2_fu_711_p4 = {{add_ln1371_1_fu_681_p2[8:1]}};

assign trunc_ln1371_4_fu_816_p4 = {{sub_ln1371_2_fu_810_p2[8:1]}};

assign trunc_ln1371_5_fu_826_p4 = {{add_ln1371_2_fu_796_p2[8:1]}};

assign trunc_ln1598_fu_1186_p1 = select_ln1598_6_fu_1175_p3[2:0];

assign trunc_ln214_1_fu_923_p1 = sdiv_ln1371_1_reg_2586[15:0];

assign trunc_ln214_fu_913_p1 = grp_fu_898_p2[15:0];

assign trunc_ln647_1_fu_1699_p1 = ap_phi_mux_p_Val2_2_phi_fu_550_p4[15:0];

assign trunc_ln647_fu_1695_p1 = ap_phi_mux_p_Val2_1_phi_fu_561_p4[15:0];

assign trunc_ln68_fu_2010_p1 = select_ln126_fu_1998_p3[15:0];

assign w_V_fu_1269_p2 = ($signed(sub_ln1598_1_reg_2792) + $signed(zext_ln68_6_fu_1265_p1));

assign xor_ln105_1_fu_1259_p2 = (icmp_ln105_1_fu_1254_p2 ^ 1'd1);

assign xor_ln105_2_fu_1301_p2 = (icmp_ln105_2_fu_1296_p2 ^ 1'd1);

assign xor_ln105_3_fu_1390_p2 = (icmp_ln105_3_fu_1385_p2 ^ 1'd1);

assign xor_ln105_4_fu_1528_p2 = (icmp_ln105_4_fu_1523_p2 ^ 1'd1);

assign xor_ln105_fu_1231_p2 = (icmp_ln105_fu_1226_p2 ^ 1'd1);

assign xor_ln414_1_fu_2109_p2 = (select_ln414_fu_2085_p3 ^ 8'd127);

assign xor_ln414_2_fu_2169_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln414_fu_2163_p2);

assign xor_ln414_fu_2079_p2 = (zext_ln414_fu_2071_p1 ^ 8'd127);

assign zext_ln1352_1_fu_983_p1 = Ky_V_read_reg_2467;

assign zext_ln1352_2_fu_980_p1 = Kx_V_read_reg_2475;

assign zext_ln1352_4_fu_998_p1 = CHin_div_K_V_reg_2524;

assign zext_ln1352_fu_958_p1 = Hout_V_fu_917_p2;

assign zext_ln1354_fu_986_p1 = CHout_V_read_reg_2482;

assign zext_ln1371_10_fu_755_p1 = Win_V;

assign zext_ln1371_11_fu_765_p1 = add_ln1371_4_fu_759_p2;

assign zext_ln1371_12_fu_769_p1 = Kx_V;

assign zext_ln1371_1_fu_677_p1 = Kx_V;

assign zext_ln1371_2_fu_793_p1 = Ky_V_read_reg_2467;

assign zext_ln1371_4_fu_865_p1 = shl_ln_fu_857_p3;

assign zext_ln1371_5_fu_869_p1 = Hin_V_read_reg_2497;

assign zext_ln1371_6_fu_878_p1 = add_ln1371_3_fu_872_p2;

assign zext_ln1371_8_fu_882_p1 = Ky_V_read_reg_2467;

assign zext_ln1371_9_fu_751_p1 = shl_ln1371_1_fu_743_p3;

assign zext_ln1371_fu_623_p1 = CHin_V;

assign zext_ln1598_1_fu_1037_p1 = $unsigned(i_op_assign_10_reg_454);

assign zext_ln1598_3_fu_1119_p1 = $unsigned(j_fu_1113_p2);

assign zext_ln1598_4_fu_1183_p1 = select_ln1598_8_reg_2777;

assign zext_ln1598_5_fu_1190_p1 = select_ln1598_6_fu_1175_p3;

assign zext_ln180_1_fu_2242_p1 = add_ln180_reg_2997;

assign zext_ln180_2_fu_1666_p1 = add_ln544_6_fu_1661_p2;

assign zext_ln180_3_fu_1685_p1 = add_ln180_2_reg_2931;

assign zext_ln180_fu_2233_p1 = add_ln544_1_fu_2229_p2;

assign zext_ln215_1_fu_954_p1 = Wout_V_fu_926_p2;

assign zext_ln215_2_fu_971_p1 = Hin_V_read_reg_2497;

assign zext_ln215_3_fu_974_p1 = Win_V_read_reg_2491;

assign zext_ln215_4_fu_977_p1 = Kx_V_read_reg_2475;

assign zext_ln215_fu_950_p1 = Wout_V_fu_926_p2;

assign zext_ln414_1_fu_2075_p1 = or_ln132_fu_2055_p2;

assign zext_ln414_2_fu_2115_p1 = select_ln414_2_fu_2101_p3;

assign zext_ln414_3_fu_2119_p1 = select_ln414_1_fu_2093_p3;

assign zext_ln414_4_fu_2123_p1 = xor_ln414_1_fu_2109_p2;

assign zext_ln414_fu_2071_p1 = Lo_assign_fu_2048_p3;

assign zext_ln544_1_fu_1657_p1 = add_ln544_5_fu_1651_p2;

assign zext_ln544_fu_1648_p1 = select_ln1598_18_reg_2892;

assign zext_ln68_1_fu_938_p1 = select_ln59_reg_2543;

assign zext_ln68_2_fu_962_p1 = Sy_V_read_reg_2456;

assign zext_ln68_3_fu_965_p1 = Sx_V_read_reg_2462;

assign zext_ln68_4_fu_932_p1 = ret_V_12_reg_2538;

assign zext_ln68_5_fu_1237_p1 = ap_phi_mux_i_op_assign_12_phi_fu_493_p4;

assign zext_ln68_6_fu_1265_p1 = ap_phi_mux_i_op_assign_13_phi_fu_515_p4;

assign zext_ln68_7_fu_1354_p1 = add_ln90_1_fu_1348_p2;

assign zext_ln68_8_fu_1492_p1 = jj_fu_1472_p2;

assign zext_ln68_fu_935_p1 = select_ln59_1_reg_2565;

assign zext_ln808_1_fu_941_p1 = CHin_div_K_V_reg_2524;

assign zext_ln808_2_fu_944_p1 = CHin_div_K_V_reg_2524;

assign zext_ln808_fu_947_p1 = out_truncate_acc_V_reg_2533;

assign zext_ln879_fu_1987_p1 = select_ln1598_6_reg_2801;

always @ (posedge ap_clk) begin
    gmem_addr_reg_2508[31] <= 1'b0;
    zext_ln1371_10_reg_2548[16] <= 1'b0;
    zext_ln1371_5_reg_2570[16] <= 1'b0;
    p_cast37_reg_2591[45:28] <= 18'b000000000000000000;
    p_cast35_reg_2596[45:28] <= 18'b000000000000000000;
    p_cast_reg_2601[46:28] <= 19'b0000000000000000000;
    zext_ln68_4_reg_2606[15:5] <= 11'b00000000000;
    zext_ln68_reg_2611[15:8] <= 8'b00000000;
    zext_ln68_1_reg_2616[15:8] <= 8'b00000000;
    zext_ln808_1_reg_2621[21:14] <= 8'b00000000;
    zext_ln808_2_reg_2626[29:14] <= 16'b0000000000000000;
    zext_ln808_reg_2631[39:5] <= 35'b00000000000000000000000000000000000;
    zext_ln215_reg_2636[28:16] <= 13'b0000000000000;
    zext_ln215_1_reg_2641[31:16] <= 16'b0000000000000000;
    zext_ln1352_reg_2647[44:16] <= 29'b00000000000000000000000000000;
    zext_ln68_2_reg_2652[15:8] <= 8'b00000000;
    zext_ln68_3_reg_2657[15:8] <= 8'b00000000;
    rhs_V_2_reg_2663[31:16] <= 16'b0000000000000000;
    zext_ln215_2_reg_2669[29:16] <= 14'b00000000000000;
    zext_ln215_3_reg_2674[45:16] <= 30'b000000000000000000000000000000;
    zext_ln215_4_reg_2679[29:8] <= 22'b0000000000000000000000;
    zext_ln1352_2_reg_2684[37:8] <= 30'b000000000000000000000000000000;
    zext_ln1352_1_reg_2689[44:8] <= 37'b0000000000000000000000000000000000000;
    empty_15_reg_2699[31:16] <= 16'b0000000000000000;
    zext_ln1352_4_reg_2704[20:14] <= 7'b0000000;
    zext_ln1598_4_reg_2808[44:32] <= 13'b0000000000000;
    zext_ln1598_5_reg_2819[29:16] <= 14'b00000000000000;
end

endmodule //conv
