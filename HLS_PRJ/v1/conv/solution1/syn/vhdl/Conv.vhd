-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=15,HLS_SYN_FF=3736,HLS_SYN_LUT=4269,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en_V : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal W : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln57_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en_V_read_reg_1213 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sy_V_read_reg_1218 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V_read_reg_1224 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V_read_reg_1230 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_1236 : STD_LOGIC_VECTOR (7 downto 0);
    signal CHout_V_read_reg_1243 : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V_read_reg_1250 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V_read_reg_1256 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_1261 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1268 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_reg_1273 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_reg_1278 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_reg_1283 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln43_fu_640_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln43_reg_1288 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln43_1_fu_648_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln43_1_reg_1294 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1371_4_fu_667_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1371_4_reg_1300 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1371_9_fu_713_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1371_9_reg_1315 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast26_fu_748_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_cast26_reg_1330 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_cast25_fu_751_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast25_reg_1335 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast24_fu_754_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_cast24_reg_1340 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_cast_fu_757_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_cast_reg_1345 : STD_LOGIC_VECTOR (47 downto 0);
    signal Wout_V_fu_764_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_1350 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_fu_774_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_reg_1355 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_fu_780_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_reg_1360 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_1_fu_783_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_1_reg_1365 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_cast_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_cast_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_2_fu_793_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_2_reg_1382 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_3_fu_796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_3_reg_1387 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_2_fu_799_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_reg_1392 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln215_1_fu_802_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_1_reg_1397 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_11_cast3_fu_805_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_11_cast3_reg_1402 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln215_2_fu_808_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln215_2_reg_1408 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln51_fu_811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_fu_819_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cout_reg_1422 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln73_fu_829_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1598_fu_848_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1598_reg_1439 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_fu_862_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1447 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_1_fu_1192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_reg_1452 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln52_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln68_fu_868_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln68_reg_1457 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_876_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_2_reg_1462 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln1598_1_fu_881_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1598_1_reg_1467 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln1598_2_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1598_2_reg_1472 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_896_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1480 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln68_1_fu_902_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln68_1_reg_1485 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln53_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1598_3_fu_907_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1598_3_reg_1490 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state29_io : BOOLEAN;
    signal ii_fu_917_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_1498 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_V_fu_927_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_reg_1503 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_4_fu_1197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_reg_1508 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln62_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln544_1_fu_954_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln544_1_reg_1518 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_5_fu_962_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_5_reg_1523 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ret_V_10_fu_1202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_10_reg_1528 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln62_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln62_reg_1533 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1598_4_fu_976_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1598_4_reg_1538 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal jj_fu_986_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1546 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1207_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_7_reg_1557 : STD_LOGIC_VECTOR (47 downto 0);
    signal icmp_ln58_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_1_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_1036_p2 : signal is "no";
    signal tmp_reg_1562 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1639_fu_1044_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1639_reg_1567 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal cin_fu_1054_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cin_reg_1575 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal gmem_addr_2_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1352_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1352_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln544_3_fu_1098_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln544_3_reg_1591 : STD_LOGIC_VECTOR (47 downto 0);
    signal gmem_addr_3_reg_1596 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_1607 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tp_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal gmem_addr_1_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal gmem_addr_read_reg_1628 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_1633 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal select_ln74_fu_1185_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_reg_1640 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_15_reg_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_16_reg_295 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul22_reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_17_reg_317 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_3_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul19_reg_340 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_0_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_18_reg_363 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_9_reg_374 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_19_reg_386 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal sum_1_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_11_reg_409 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_op_assign_reg_420 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_12_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_be_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_2_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_1_fu_1111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_fu_1129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_469_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal zext_ln1371_fu_524_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1371_fu_528_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1371_fu_542_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1371_1_fu_548_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_534_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1371_1_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1371_2_fu_558_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1371_1_fu_582_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1371_1_fu_586_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1371_2_fu_600_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1371_4_fu_606_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1371_3_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1371_5_fu_616_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_fu_574_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_fu_632_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_656_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1371_2_fu_663_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1371_2_fu_670_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1371_5_fu_676_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1371_6_fu_680_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1371_4_fu_683_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_696_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_696_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1371_1_fu_702_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1371_8_fu_709_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1371_3_fu_716_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1371_10_fu_722_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1371_11_fu_726_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1371_5_fu_729_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_742_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_742_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_696_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln214_fu_760_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_742_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_770_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_1_fu_825_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln73_fu_833_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_V_2_fu_876_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_2_fu_876_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_4_fu_923_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1352_fu_936_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln544_fu_945_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln544_fu_950_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_5_fu_962_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_fu_962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_5_fu_992_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_996_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln62_fu_1001_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_1006_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln887_2_fu_1023_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_11_cast_fu_1032_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1639_fu_1044_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1639_fu_1044_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_fu_1060_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_8_fu_1064_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of ret_V_8_fu_1064_p2 : signal is "no";
    signal add_ln67_fu_1069_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln544_2_fu_1089_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln544_1_fu_1094_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln67_fu_1103_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal add_ln67_1_fu_1106_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln75_fu_1121_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal add_ln75_fu_1124_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal bitcast_ln74_fu_1139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1142_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln74_fu_1152_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln74_1_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_1192_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_1_fu_1192_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_4_fu_1197_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_10_fu_1202_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_10_fu_1202_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1207_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_479_ce : STD_LOGIC;
    signal grp_fu_696_ap_start : STD_LOGIC;
    signal grp_fu_696_ap_done : STD_LOGIC;
    signal grp_fu_742_ap_start : STD_LOGIC;
    signal grp_fu_742_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_696_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_742_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_10_fu_1202_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_fu_1192_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_2_fu_876_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1639_fu_1044_p00 : STD_LOGIC_VECTOR (47 downto 0);

    component Conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sdiv_19s_9nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_16s_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_muladd_1hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        CHout_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        relu_en_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        W : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Conv_AXILiteS_s_axi_U : component Conv_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        CHout_V => CHout_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        Sx_V => Sx_V,
        Sy_V => Sy_V,
        mode_V => mode_V,
        relu_en_V => relu_en_V,
        feature_in => feature_in,
        W => W,
        bias => bias,
        feature_out => feature_out);

    Conv_gmem_m_axi_U : component Conv_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_1622,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => select_ln74_reg_1640,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Conv_fadd_32ns_32bkb_U1 : component Conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_469_p0,
        din1 => grp_fu_469_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p2);

    Conv_fmul_32ns_32cud_U2 : component Conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gmem_addr_2_read_reg_1602,
        din1 => gmem_addr_3_read_reg_1607,
        ce => ap_const_logic_1,
        dout => grp_fu_475_p2);

    Conv_fcmp_32ns_32dEe_U3 : component Conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_reg_1633,
        din1 => ap_const_lv32_0,
        ce => grp_fu_479_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_479_p2);

    Conv_sdiv_19s_9nseOg_U4 : component Conv_sdiv_19s_9nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_696_ap_start,
        done => grp_fu_696_ap_done,
        din0 => grp_fu_696_p0,
        din1 => grp_fu_696_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_696_p2);

    Conv_sdiv_19s_9nseOg_U5 : component Conv_sdiv_19s_9nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_742_ap_start,
        done => grp_fu_742_ap_done,
        din0 => grp_fu_742_p0,
        din1 => grp_fu_742_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_742_p2);

    Conv_mul_mul_16nsfYi_U6 : component Conv_mul_mul_16nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => ret_V_1_fu_1192_p0,
        din1 => ret_V_1_fu_1192_p1,
        dout => ret_V_1_fu_1192_p2);

    Conv_mul_mul_16s_g8j_U7 : component Conv_mul_mul_16s_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => h_V_fu_927_p2,
        din1 => ret_V_4_fu_1197_p1,
        dout => ret_V_4_fu_1197_p2);

    Conv_mul_mul_16nsfYi_U8 : component Conv_mul_mul_16nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => ret_V_10_fu_1202_p0,
        din1 => ret_V_10_fu_1202_p1,
        dout => ret_V_10_fu_1202_p2);

    Conv_mac_muladd_1hbi_U9 : component Conv_mac_muladd_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => w_V_fu_996_p2,
        din1 => grp_fu_1207_p1,
        din2 => ret_V_5_reg_1523,
        dout => grp_fu_1207_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_op_assign_15_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln52_fu_857_p2 = ap_const_lv1_1))) then 
                i_op_assign_15_reg_284 <= cout_reg_1422;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_op_assign_15_reg_284 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_16_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln53_fu_891_p2 = ap_const_lv1_1))) then 
                i_op_assign_16_reg_295 <= i_reg_1447;
            elsif (((icmp_ln51_fu_814_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_op_assign_16_reg_295 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_17_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_op_assign_17_reg_317 <= ap_const_lv16_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                i_op_assign_17_reg_317 <= j_reg_1480;
            end if; 
        end if;
    end process;

    i_op_assign_18_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln58_fu_981_p2 = ap_const_lv1_1))) then 
                i_op_assign_18_reg_363 <= ii_reg_1498;
            elsif (((icmp_ln53_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i_op_assign_18_reg_363 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_19_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_op_assign_19_reg_386 <= jj_reg_1546;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_op_assign_19_reg_386 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_op_assign_reg_420 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                i_op_assign_reg_420 <= cin_reg_1575;
            end if; 
        end if;
    end process;

    phi_mul19_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                phi_mul19_reg_340 <= ap_const_lv16_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                phi_mul19_reg_340 <= add_ln1598_1_reg_1467;
            end if; 
        end if;
    end process;

    phi_mul22_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln53_fu_891_p2 = ap_const_lv1_1))) then 
                phi_mul22_reg_306 <= add_ln1598_reg_1439;
            elsif (((icmp_ln51_fu_814_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                phi_mul22_reg_306 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    ret_V_11_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                ret_V_11_reg_409 <= add_ln1598_4_reg_1538;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                ret_V_11_reg_409 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    ret_V_12_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                ret_V_12_reg_442 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                ret_V_12_reg_442 <= add_ln1352_reg_1586;
            end if; 
        end if;
    end process;

    ret_V_3_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                ret_V_3_reg_328 <= ap_const_lv32_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                ret_V_3_reg_328 <= add_ln1598_2_reg_1472;
            end if; 
        end if;
    end process;

    ret_V_9_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln58_fu_981_p2 = ap_const_lv1_1))) then 
                ret_V_9_reg_374 <= add_ln1598_3_reg_1490;
            elsif (((icmp_ln53_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                ret_V_9_reg_374 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    sum_0_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln58_fu_981_p2 = ap_const_lv1_1))) then 
                sum_0_reg_351 <= sum_1_reg_397;
            elsif (((icmp_ln53_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                sum_0_reg_351 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_1_be_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln64_fu_1049_p2 = ap_const_lv1_1))) then 
                sum_1_be_reg_453 <= sum_2_reg_431;
            elsif ((((icmp_ln58_fu_981_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31) and (or_ln62_1_fu_1014_p2 = ap_const_lv1_1)) or ((icmp_ln887_fu_1027_p2 = ap_const_lv1_0) and (or_ln62_1_fu_1014_p2 = ap_const_lv1_0) and (icmp_ln58_fu_981_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
                sum_1_be_reg_453 <= sum_1_reg_397;
            end if; 
        end if;
    end process;

    sum_1_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                sum_1_reg_397 <= sum_1_be_reg_453;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                sum_1_reg_397 <= sum_0_reg_351;
            end if; 
        end if;
    end process;

    sum_2_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sum_2_reg_431 <= sum_1_reg_397;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                sum_2_reg_431 <= grp_fu_469_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                CHin_V_read_reg_1261 <= CHin_V;
                CHout_V_read_reg_1243 <= CHout_V;
                Hin_V_read_reg_1256 <= Hin_V;
                Kx_V_read_reg_1236 <= Kx_V;
                Ky_V_read_reg_1230 <= Ky_V;
                Sx_V_read_reg_1224 <= Sx_V;
                Sy_V_read_reg_1218 <= Sy_V;
                Win_V_read_reg_1250 <= Win_V;
                relu_en_V_read_reg_1213 <= relu_en_V;
                select_ln43_1_reg_1294 <= select_ln43_1_fu_648_p3;
                select_ln43_reg_1288 <= select_ln43_fu_640_p3;
                tmp_3_reg_1268 <= feature_out(31 downto 2);
                tmp_4_reg_1273 <= bias(31 downto 2);
                tmp_5_reg_1278 <= W(31 downto 2);
                tmp_6_reg_1283 <= feature_in(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                Wout_V_reg_1350 <= Wout_V_fu_764_p2;
                add_ln51_reg_1355 <= add_ln51_fu_774_p2;
                    p_cast24_reg_1340(29 downto 0) <= p_cast24_fu_754_p1(29 downto 0);
                    p_cast25_reg_1335(29 downto 0) <= p_cast25_fu_751_p1(29 downto 0);
                    p_cast26_reg_1330(29 downto 0) <= p_cast26_fu_748_p1(29 downto 0);
                    p_cast_reg_1345(29 downto 0) <= p_cast_fu_757_p1(29 downto 0);
                    rhs_V_11_cast3_reg_1402(15 downto 0) <= rhs_V_11_cast3_fu_805_p1(15 downto 0);
                    rhs_V_1_cast_reg_1370(15 downto 0) <= rhs_V_1_cast_fu_786_p1(15 downto 0);
                    rhs_V_1_reg_1375(15 downto 0) <= rhs_V_1_fu_790_p1(15 downto 0);
                    rhs_V_2_reg_1392(15 downto 0) <= rhs_V_2_fu_799_p1(15 downto 0);
                    zext_ln215_1_reg_1397(7 downto 0) <= zext_ln215_1_fu_802_p1(7 downto 0);
                    zext_ln215_2_reg_1408(15 downto 0) <= zext_ln215_2_fu_808_p1(15 downto 0);
                    zext_ln51_reg_1413(15 downto 0) <= zext_ln51_fu_811_p1(15 downto 0);
                    zext_ln68_1_reg_1365(7 downto 0) <= zext_ln68_1_fu_783_p1(7 downto 0);
                    zext_ln68_2_reg_1382(7 downto 0) <= zext_ln68_2_fu_793_p1(7 downto 0);
                    zext_ln68_3_reg_1387(7 downto 0) <= zext_ln68_3_fu_796_p1(7 downto 0);
                    zext_ln68_reg_1360(7 downto 0) <= zext_ln68_fu_780_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_1049_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                add_ln1352_reg_1586 <= add_ln1352_fu_1084_p2;
                add_ln544_3_reg_1591 <= add_ln544_3_fu_1098_p2;
                gmem_addr_2_reg_1580 <= sext_ln67_fu_1074_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln1598_1_reg_1467 <= add_ln1598_1_fu_881_p2;
                add_ln1598_2_reg_1472 <= add_ln1598_2_fu_886_p2;
                j_reg_1480 <= j_fu_896_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                add_ln1598_3_reg_1490 <= add_ln1598_3_fu_907_p2;
                ii_reg_1498 <= ii_fu_917_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                add_ln1598_4_reg_1538 <= add_ln1598_4_fu_976_p2;
                jj_reg_1546 <= jj_fu_986_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln1598_reg_1439 <= add_ln1598_fu_848_p2;
                i_reg_1447 <= i_fu_862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln57_fu_912_p2 = ap_const_lv1_1))) then
                add_ln544_1_reg_1518 <= add_ln544_1_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                cin_reg_1575 <= cin_fu_1054_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                cout_reg_1422 <= cout_fu_819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                gmem_addr_1_reg_1622 <= zext_ln75_1_fu_1129_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                gmem_addr_2_read_reg_1602 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                gmem_addr_3_read_reg_1607 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                gmem_addr_3_reg_1596 <= zext_ln67_1_fu_1111_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                gmem_addr_read_reg_1628 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_814_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    gmem_addr_reg_1433(30 downto 0) <= zext_ln73_2_fu_838_p1(32 - 1 downto 0)(30 downto 0);
                    zext_ln73_reg_1427(15 downto 0) <= zext_ln73_fu_829_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln57_fu_912_p2 = ap_const_lv1_0))) then
                h_V_reg_1503 <= h_V_fu_927_p2;
                icmp_ln62_reg_1513 <= icmp_ln62_fu_940_p2;
                ret_V_4_reg_1508 <= ret_V_4_fu_1197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                ret_V_10_reg_1528 <= ret_V_10_fu_1202_p2;
                ret_V_5_reg_1523 <= ret_V_5_fu_962_p2;
                xor_ln62_reg_1533 <= xor_ln62_fu_971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_857_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                ret_V_1_reg_1452 <= ret_V_1_fu_1192_p2;
                sub_ln68_reg_1457 <= sub_ln68_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                ret_V_2_reg_1462 <= ret_V_2_fu_876_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln62_1_fu_1014_p2 = ap_const_lv1_0) and (icmp_ln58_fu_981_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln887_fu_1027_p2 = ap_const_lv1_1))) then
                ret_V_7_reg_1557 <= grp_fu_1207_p3;
                tmp_reg_1562 <= tmp_fu_1036_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                select_ln74_reg_1640 <= select_ln74_fu_1185_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                sub_ln68_1_reg_1485 <= sub_ln68_1_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                sum_reg_1633 <= grp_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp1639_reg_1567 <= tmp1639_fu_1044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                tp_reg_1612 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln1371_4_reg_1300(15 downto 0) <= zext_ln1371_4_fu_667_p1(15 downto 0);
                    zext_ln1371_9_reg_1315(15 downto 0) <= zext_ln1371_9_fu_713_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln1371_4_reg_1300(16) <= '0';
    zext_ln1371_9_reg_1315(16) <= '0';
    p_cast26_reg_1330(48 downto 30) <= "0000000000000000000";
    p_cast25_reg_1335(30) <= '0';
    p_cast24_reg_1340(48 downto 30) <= "0000000000000000000";
    p_cast_reg_1345(47 downto 30) <= "000000000000000000";
    zext_ln68_reg_1360(15 downto 8) <= "00000000";
    zext_ln68_1_reg_1365(15 downto 8) <= "00000000";
    rhs_V_1_cast_reg_1370(31 downto 16) <= "0000000000000000";
    rhs_V_1_reg_1375(31 downto 16) <= "0000000000000000";
    zext_ln68_2_reg_1382(15 downto 8) <= "00000000";
    zext_ln68_3_reg_1387(15 downto 8) <= "00000000";
    rhs_V_2_reg_1392(47 downto 16) <= "00000000000000000000000000000000";
    zext_ln215_1_reg_1397(15 downto 8) <= "00000000";
    rhs_V_11_cast3_reg_1402(47 downto 16) <= "00000000000000000000000000000000";
    zext_ln215_2_reg_1408(23 downto 16) <= "00000000";
    zext_ln51_reg_1413(31 downto 16) <= "0000000000000000";
    zext_ln73_reg_1427(31 downto 16) <= "0000000000000000";
    gmem_addr_reg_1433(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state29, icmp_ln57_fu_912_p2, ap_CS_fsm_state59, ap_CS_fsm_state34, ap_CS_fsm_state41, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state72, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state25, icmp_ln51_fu_814_p2, ap_CS_fsm_state26, icmp_ln52_fu_857_p2, ap_CS_fsm_state28, icmp_ln53_fu_891_p2, ap_block_state29_io, ap_CS_fsm_state31, icmp_ln58_fu_981_p2, or_ln62_1_fu_1014_p2, icmp_ln887_fu_1027_p2, ap_CS_fsm_state33, icmp_ln64_fu_1049_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln51_fu_814_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln52_fu_857_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln53_fu_891_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln57_fu_912_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln57_fu_912_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln58_fu_981_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((or_ln62_1_fu_1014_p2 = ap_const_lv1_0) and (icmp_ln58_fu_981_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln887_fu_1027_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln64_fu_1049_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Wout_V_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(trunc_ln214_fu_760_p1));
    add_ln1352_fu_1084_p2 <= std_logic_vector(unsigned(zext_ln51_reg_1413) + unsigned(ret_V_12_reg_442));
    add_ln1371_1_fu_586_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(zext_ln1371_1_fu_582_p1));
    add_ln1371_2_fu_670_p2 <= std_logic_vector(unsigned(zext_ln1371_4_fu_667_p1) + unsigned(zext_ln1371_2_fu_663_p1));
    add_ln1371_3_fu_716_p2 <= std_logic_vector(unsigned(zext_ln1371_9_fu_713_p1) + unsigned(zext_ln1371_8_fu_709_p1));
    add_ln1371_fu_528_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(zext_ln1371_fu_524_p1));
    add_ln1598_1_fu_881_p2 <= std_logic_vector(unsigned(phi_mul19_reg_340) + unsigned(zext_ln68_3_reg_1387));
    add_ln1598_2_fu_886_p2 <= std_logic_vector(unsigned(ret_V_3_reg_328) + unsigned(zext_ln51_reg_1413));
    add_ln1598_3_fu_907_p2 <= std_logic_vector(unsigned(ret_V_9_reg_374) + unsigned(zext_ln215_1_reg_1397));
    add_ln1598_4_fu_976_p2 <= std_logic_vector(unsigned(ret_V_11_reg_409) + unsigned(zext_ln215_2_reg_1408));
    add_ln1598_fu_848_p2 <= std_logic_vector(unsigned(phi_mul22_reg_306) + unsigned(zext_ln68_2_reg_1382));
    add_ln51_fu_774_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(empty_fu_770_p1));
    add_ln544_1_fu_954_p2 <= std_logic_vector(unsigned(ret_V_2_reg_1462) + unsigned(zext_ln544_fu_950_p1));
    add_ln544_2_fu_1089_p2 <= std_logic_vector(unsigned(zext_ln73_reg_1427) + unsigned(ret_V_12_reg_442));
    add_ln544_3_fu_1098_p2 <= std_logic_vector(unsigned(tmp1639_reg_1567) + unsigned(zext_ln544_1_fu_1094_p1));
    add_ln544_fu_945_p2 <= std_logic_vector(unsigned(zext_ln73_reg_1427) + unsigned(ret_V_3_reg_328));
    add_ln67_1_fu_1106_p2 <= std_logic_vector(unsigned(zext_ln67_fu_1103_p1) + unsigned(p_cast24_reg_1340));
    add_ln67_fu_1069_p2 <= std_logic_vector(unsigned(ret_V_8_fu_1064_p2) + unsigned(p_cast_reg_1345));
    add_ln73_fu_833_p2 <= std_logic_vector(unsigned(zext_ln73_1_fu_825_p1) + unsigned(p_cast25_reg_1335));
    add_ln75_fu_1124_p2 <= std_logic_vector(unsigned(p_cast26_reg_1330) + unsigned(zext_ln75_fu_1121_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);

    ap_block_state29_io_assign_proc : process(icmp_ln57_fu_912_p2, gmem_ARREADY)
    begin
                ap_block_state29_io <= ((gmem_ARREADY = ap_const_logic_0) and (icmp_ln57_fu_912_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25, icmp_ln51_fu_814_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln51_fu_814_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, icmp_ln51_fu_814_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln51_fu_814_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln74_fu_1139_p1 <= sum_reg_1633;
    cin_fu_1054_p2 <= std_logic_vector(unsigned(i_op_assign_reg_420) + unsigned(ap_const_lv16_1));
    cout_fu_819_p2 <= std_logic_vector(unsigned(i_op_assign_15_reg_284) + unsigned(ap_const_lv16_1));
    empty_fu_770_p1 <= grp_fu_742_p2(16 - 1 downto 0);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state29, icmp_ln57_fu_912_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, gmem_ARREADY, gmem_addr_reg_1433, ap_block_state29_io, gmem_addr_2_reg_1580, gmem_addr_3_reg_1596)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            gmem_ARADDR <= gmem_addr_3_reg_1596;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            gmem_ARADDR <= gmem_addr_2_reg_1580;
        elsif (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln57_fu_912_p2 = ap_const_lv1_1))) then 
            gmem_ARADDR <= gmem_addr_reg_1433;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state29, icmp_ln57_fu_912_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, gmem_ARREADY, ap_block_state29_io)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln57_fu_912_p2 = ap_const_lv1_1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state66, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state72, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state41, ap_CS_fsm_state42, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state67, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state29, icmp_ln57_fu_912_p2, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln57_fu_912_p2 = ap_const_lv1_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state59, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1207_p1 <= rhs_V_1_reg_1375(16 - 1 downto 0);

    grp_fu_469_p0_assign_proc : process(sum_0_reg_351, sum_2_reg_431, ap_CS_fsm_state47, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_469_p0 <= sum_0_reg_351;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_469_p0 <= sum_2_reg_431;
        else 
            grp_fu_469_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_469_p1_assign_proc : process(tp_reg_1612, gmem_addr_read_reg_1628, ap_CS_fsm_state47, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_469_p1 <= gmem_addr_read_reg_1628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_469_p1 <= tp_reg_1612;
        else 
            grp_fu_469_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_479_ce_assign_proc : process(ap_CS_fsm_state66, gmem_AWREADY, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
            grp_fu_479_ce <= ap_const_logic_1;
        else 
            grp_fu_479_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_696_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_696_ap_start <= ap_const_logic_1;
        else 
            grp_fu_696_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_696_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1371_4_fu_683_p2),19));

    grp_fu_696_p1 <= grp_fu_696_p10(9 - 1 downto 0);
    grp_fu_696_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_V_read_reg_1224),19));

    grp_fu_742_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_742_ap_start <= ap_const_logic_1;
        else 
            grp_fu_742_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_742_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1371_5_fu_729_p2),19));

    grp_fu_742_p1 <= grp_fu_742_p10(9 - 1 downto 0);
    grp_fu_742_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_V_read_reg_1218),19));
    h_V_fu_927_p2 <= std_logic_vector(unsigned(sub_ln68_reg_1457) + unsigned(zext_ln68_4_fu_923_p1));
    i_fu_862_p2 <= std_logic_vector(unsigned(i_op_assign_16_reg_295) + unsigned(ap_const_lv16_1));
    icmp_ln51_fu_814_p2 <= "1" when (i_op_assign_15_reg_284 = CHout_V_read_reg_1243) else "0";
    icmp_ln52_fu_857_p2 <= "1" when (i_op_assign_16_reg_295 = add_ln51_reg_1355) else "0";
    icmp_ln53_fu_891_p2 <= "1" when (i_op_assign_17_reg_317 = Wout_V_reg_1350) else "0";
    icmp_ln57_fu_912_p2 <= "1" when (i_op_assign_18_reg_363 = Ky_V_read_reg_1230) else "0";
    icmp_ln58_fu_981_p2 <= "1" when (i_op_assign_19_reg_386 = Kx_V_read_reg_1236) else "0";
    icmp_ln62_fu_940_p2 <= "1" when (signed(sext_ln1352_fu_936_p1) < signed(zext_ln1371_9_reg_1315)) else "0";
    icmp_ln64_fu_1049_p2 <= "1" when (i_op_assign_reg_420 = CHin_V_read_reg_1261) else "0";
    icmp_ln74_1_fu_1162_p2 <= "1" when (trunc_ln74_fu_1152_p1 = ap_const_lv23_0) else "0";
    icmp_ln74_fu_1156_p2 <= "0" when (tmp_1_fu_1142_p4 = ap_const_lv8_FF) else "1";
    icmp_ln887_fu_1027_p2 <= "1" when (signed(sext_ln887_2_fu_1023_p1) < signed(zext_ln1371_4_reg_1300)) else "0";
    ii_fu_917_p2 <= std_logic_vector(unsigned(i_op_assign_18_reg_363) + unsigned(ap_const_lv8_1));
    j_fu_896_p2 <= std_logic_vector(unsigned(i_op_assign_17_reg_317) + unsigned(ap_const_lv16_1));
    jj_fu_986_p2 <= std_logic_vector(unsigned(i_op_assign_19_reg_386) + unsigned(ap_const_lv8_1));
    lhs_V_11_cast_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_11_reg_409),32));
    or_ln62_1_fu_1014_p2 <= (xor_ln62_reg_1533 or tmp_9_fu_1006_p3);
    or_ln62_fu_1001_p2 <= (w_V_fu_996_p2 or h_V_reg_1503);
    or_ln74_fu_1168_p2 <= (icmp_ln74_fu_1156_p2 or icmp_ln74_1_fu_1162_p2);
    p_cast24_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1278),49));
    p_cast25_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1273),31));
    p_cast26_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1268),49));
    p_cast_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_1283),48));
    pad_x_V_fu_574_p3 <= 
        sub_ln1371_1_fu_568_p2 when (tmp_7_fu_534_p3(0) = '1') else 
        trunc_ln1371_2_fu_558_p4;
    pad_y_V_fu_632_p3 <= 
        sub_ln1371_3_fu_626_p2 when (tmp_8_fu_592_p3(0) = '1') else 
        trunc_ln1371_5_fu_616_p4;
    ret_V_10_fu_1202_p0 <= ret_V_10_fu_1202_p00(16 - 1 downto 0);
    ret_V_10_fu_1202_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_9_reg_374),32));
    ret_V_10_fu_1202_p1 <= rhs_V_1_reg_1375(16 - 1 downto 0);
    ret_V_1_fu_1192_p0 <= ret_V_1_fu_1192_p00(16 - 1 downto 0);
    ret_V_1_fu_1192_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_16_reg_295),32));
    ret_V_1_fu_1192_p1 <= rhs_V_1_cast_reg_1370(16 - 1 downto 0);
    ret_V_2_fu_876_p0 <= ret_V_2_fu_876_p00(32 - 1 downto 0);
    ret_V_2_fu_876_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_1452),48));
    ret_V_2_fu_876_p1 <= rhs_V_11_cast3_reg_1402(16 - 1 downto 0);
    ret_V_2_fu_876_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_876_p0) * unsigned(ret_V_2_fu_876_p1), 48));
    ret_V_4_fu_1197_p1 <= rhs_V_1_reg_1375(16 - 1 downto 0);
    ret_V_5_fu_962_p0 <= ret_V_4_reg_1508;
    ret_V_5_fu_962_p1 <= rhs_V_2_reg_1392(16 - 1 downto 0);
    ret_V_5_fu_962_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ret_V_5_fu_962_p0) * signed('0' &ret_V_5_fu_962_p1))), 48));
    ret_V_8_fu_1064_p2 <= std_logic_vector(unsigned(zext_ln215_fu_1060_p1) + unsigned(ret_V_7_reg_1557));
    ret_V_fu_1180_p2 <= (rhs_V_fu_1174_p2 and relu_en_V_read_reg_1213);
    rhs_V_11_cast3_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_V_read_reg_1243),48));
    rhs_V_1_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_fu_764_p2),32));
    rhs_V_1_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_V_read_reg_1261),32));
    rhs_V_2_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V_read_reg_1250),48));
    rhs_V_fu_1174_p2 <= (or_ln74_fu_1168_p2 and grp_fu_479_p2);
    select_ln43_1_fu_648_p3 <= 
        pad_y_V_fu_632_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    select_ln43_fu_640_p3 <= 
        pad_x_V_fu_574_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    select_ln74_fu_1185_p3 <= 
        ap_const_lv32_0 when (ret_V_fu_1180_p2(0) = '1') else 
        sum_reg_1633;
        sext_ln1352_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_V_fu_927_p2),17));

        sext_ln67_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_fu_1069_p2),64));

        sext_ln887_2_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_V_fu_996_p2),17));

    shl_ln1371_1_fu_702_p3 <= (select_ln43_1_reg_1294 & ap_const_lv1_0);
    shl_ln_fu_656_p3 <= (select_ln43_reg_1288 & ap_const_lv1_0);
    sub_ln1371_1_fu_568_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln1371_1_fu_548_p4));
    sub_ln1371_2_fu_600_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(zext_ln1371_1_fu_582_p1));
    sub_ln1371_3_fu_626_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln1371_4_fu_606_p4));
    sub_ln1371_4_fu_683_p2 <= std_logic_vector(unsigned(zext_ln1371_5_fu_676_p1) - unsigned(zext_ln1371_6_fu_680_p1));
    sub_ln1371_5_fu_729_p2 <= std_logic_vector(unsigned(zext_ln1371_10_fu_722_p1) - unsigned(zext_ln1371_11_fu_726_p1));
    sub_ln1371_fu_542_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(zext_ln1371_fu_524_p1));
    sub_ln68_1_fu_902_p2 <= std_logic_vector(unsigned(phi_mul19_reg_340) - unsigned(zext_ln68_1_reg_1365));
    sub_ln68_fu_868_p2 <= std_logic_vector(unsigned(phi_mul22_reg_306) - unsigned(zext_ln68_reg_1360));
    tmp1639_fu_1044_p0 <= tmp1639_fu_1044_p00(32 - 1 downto 0);
    tmp1639_fu_1044_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1562),48));
    tmp1639_fu_1044_p1 <= rhs_V_11_cast3_reg_1402(16 - 1 downto 0);
    tmp1639_fu_1044_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1639_fu_1044_p0) * unsigned(tmp1639_fu_1044_p1), 48));
    tmp_1_fu_1142_p4 <= bitcast_ln74_fu_1139_p1(30 downto 23);
    tmp_7_fu_534_p3 <= add_ln1371_fu_528_p2(8 downto 8);
    tmp_8_fu_592_p3 <= add_ln1371_1_fu_586_p2(8 downto 8);
    tmp_9_fu_1006_p3 <= or_ln62_fu_1001_p2(15 downto 15);
    tmp_fu_1036_p2 <= std_logic_vector(unsigned(ret_V_10_reg_1528) + unsigned(lhs_V_11_cast_fu_1032_p1));
    trunc_ln1371_1_fu_548_p4 <= sub_ln1371_fu_542_p2(8 downto 1);
    trunc_ln1371_2_fu_558_p4 <= add_ln1371_fu_528_p2(8 downto 1);
    trunc_ln1371_4_fu_606_p4 <= sub_ln1371_2_fu_600_p2(8 downto 1);
    trunc_ln1371_5_fu_616_p4 <= add_ln1371_1_fu_586_p2(8 downto 1);
    trunc_ln214_fu_760_p1 <= grp_fu_696_p2(16 - 1 downto 0);
    trunc_ln74_fu_1152_p1 <= bitcast_ln74_fu_1139_p1(23 - 1 downto 0);
    w_V_fu_996_p2 <= std_logic_vector(unsigned(sub_ln68_1_reg_1485) + unsigned(zext_ln68_5_fu_992_p1));
    xor_ln62_fu_971_p2 <= (icmp_ln62_reg_1513 xor ap_const_lv1_1);
    zext_ln1371_10_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1371_3_fu_716_p2),18));
    zext_ln1371_11_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V_read_reg_1230),18));
    zext_ln1371_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V),9));
    zext_ln1371_2_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_656_p3),17));
    zext_ln1371_4_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V_read_reg_1250),17));
    zext_ln1371_5_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1371_2_fu_670_p2),18));
    zext_ln1371_6_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_1236),18));
    zext_ln1371_8_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1371_1_fu_702_p3),17));
    zext_ln1371_9_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hin_V_read_reg_1256),17));
    zext_ln1371_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V),9));
    zext_ln215_1_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_1236),16));
    zext_ln215_2_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_V_read_reg_1261),24));
    zext_ln215_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_420),48));
    zext_ln51_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_V_read_reg_1243),32));
    zext_ln544_1_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_2_fu_1089_p2),48));
    zext_ln544_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_fu_945_p2),48));
    zext_ln67_1_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_1_fu_1106_p2),64));
    zext_ln67_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_3_reg_1591),49));
    zext_ln68_1_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_reg_1288),16));
    zext_ln68_2_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_V_read_reg_1218),16));
    zext_ln68_3_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_V_read_reg_1224),16));
    zext_ln68_4_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_18_reg_363),16));
    zext_ln68_5_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_19_reg_386),16));
    zext_ln68_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_1_reg_1294),16));
    zext_ln73_1_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_15_reg_284),31));
    zext_ln73_2_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_fu_833_p2),64));
    zext_ln73_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_15_reg_284),32));
    zext_ln75_1_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_1124_p2),64));
    zext_ln75_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln544_1_reg_1518),49));
end behav;
