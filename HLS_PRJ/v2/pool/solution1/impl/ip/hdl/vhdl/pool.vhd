-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_r_TLAST : OUT STD_LOGIC;
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=447,HLS_SYN_TPT=444,HLS_SYN_MEM=12,HLS_SYN_DSP=18,HLS_SYN_FF=13570,HLS_SYN_LUT=12010,HLS_VERSION=2019_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ch_div_K : STD_LOGIC_VECTOR (31 downto 0);
    signal height_in : STD_LOGIC_VECTOR (31 downto 0);
    signal width_in : STD_LOGIC_VECTOR (31 downto 0);
    signal height_out : STD_LOGIC_VECTOR (31 downto 0);
    signal width_out : STD_LOGIC_VECTOR (31 downto 0);
    signal Kx : STD_LOGIC_VECTOR (31 downto 0);
    signal Ky : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1D54_U0_ap_start : STD_LOGIC;
    signal pool_1D54_U0_start_full_n : STD_LOGIC;
    signal pool_1D54_U0_ap_done : STD_LOGIC;
    signal pool_1D54_U0_ap_continue : STD_LOGIC;
    signal pool_1D54_U0_ap_idle : STD_LOGIC;
    signal pool_1D54_U0_ap_ready : STD_LOGIC;
    signal pool_1D54_U0_start_out : STD_LOGIC;
    signal pool_1D54_U0_start_write : STD_LOGIC;
    signal pool_1D54_U0_in_V_V_TREADY : STD_LOGIC;
    signal pool_1D54_U0_ch_div_K_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1D54_U0_ch_div_K_out_write : STD_LOGIC;
    signal pool_1D54_U0_height_in_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1D54_U0_height_in_out_write : STD_LOGIC;
    signal pool_1D54_U0_height_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1D54_U0_height_out_out_write : STD_LOGIC;
    signal pool_1D54_U0_width_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1D54_U0_width_out_out_write : STD_LOGIC;
    signal pool_1D54_U0_Ky_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_1D54_U0_Ky_out_write : STD_LOGIC;
    signal pool_1D54_U0_stream_tp_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal pool_1D54_U0_stream_tp_V_V_write : STD_LOGIC;
    signal pool_2D_U0_ap_start : STD_LOGIC;
    signal pool_2D_U0_ap_done : STD_LOGIC;
    signal pool_2D_U0_ap_continue : STD_LOGIC;
    signal pool_2D_U0_ap_idle : STD_LOGIC;
    signal pool_2D_U0_ap_ready : STD_LOGIC;
    signal pool_2D_U0_ch_div_K_read : STD_LOGIC;
    signal pool_2D_U0_height_in_read : STD_LOGIC;
    signal pool_2D_U0_width_out_read : STD_LOGIC;
    signal pool_2D_U0_Ky_read : STD_LOGIC;
    signal pool_2D_U0_ch_div_K_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_2D_U0_ch_div_K_out_write : STD_LOGIC;
    signal pool_2D_U0_width_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_2D_U0_width_out_out_write : STD_LOGIC;
    signal pool_2D_U0_stream_tp2_V_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal pool_2D_U0_stream_tp2_V_V_write : STD_LOGIC;
    signal pool_2D_U0_stream_tp_V_V_read : STD_LOGIC;
    signal hs2axis_U0_ap_start : STD_LOGIC;
    signal hs2axis_U0_ap_done : STD_LOGIC;
    signal hs2axis_U0_ap_continue : STD_LOGIC;
    signal hs2axis_U0_ap_idle : STD_LOGIC;
    signal hs2axis_U0_ap_ready : STD_LOGIC;
    signal hs2axis_U0_out_r_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal hs2axis_U0_out_r_TVALID : STD_LOGIC;
    signal hs2axis_U0_out_r_TLAST : STD_LOGIC;
    signal hs2axis_U0_ch_div_K_read : STD_LOGIC;
    signal hs2axis_U0_height_out_read : STD_LOGIC;
    signal hs2axis_U0_width_out_read : STD_LOGIC;
    signal hs2axis_U0_stream_tp2_V_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ch_div_K_c_full_n : STD_LOGIC;
    signal ch_div_K_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_div_K_c_empty_n : STD_LOGIC;
    signal height_in_c_full_n : STD_LOGIC;
    signal height_in_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal height_in_c_empty_n : STD_LOGIC;
    signal height_out_c_full_n : STD_LOGIC;
    signal height_out_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal height_out_c_empty_n : STD_LOGIC;
    signal width_out_c_full_n : STD_LOGIC;
    signal width_out_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal width_out_c_empty_n : STD_LOGIC;
    signal Ky_c_full_n : STD_LOGIC;
    signal Ky_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Ky_c_empty_n : STD_LOGIC;
    signal stream_tp_V_V_full_n : STD_LOGIC;
    signal stream_tp_V_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_tp_V_V_empty_n : STD_LOGIC;
    signal ch_div_K_c7_full_n : STD_LOGIC;
    signal ch_div_K_c7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_div_K_c7_empty_n : STD_LOGIC;
    signal width_out_c8_full_n : STD_LOGIC;
    signal width_out_c8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal width_out_c8_empty_n : STD_LOGIC;
    signal stream_tp2_V_V_full_n : STD_LOGIC;
    signal stream_tp2_V_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_tp2_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_pool_2D_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2D_U0_full_n : STD_LOGIC;
    signal start_for_pool_2D_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2D_U0_empty_n : STD_LOGIC;
    signal start_for_hs2axis_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hs2axis_U0_full_n : STD_LOGIC;
    signal start_for_hs2axis_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hs2axis_U0_empty_n : STD_LOGIC;
    signal pool_2D_U0_start_full_n : STD_LOGIC;
    signal pool_2D_U0_start_write : STD_LOGIC;
    signal hs2axis_U0_start_full_n : STD_LOGIC;
    signal hs2axis_U0_start_write : STD_LOGIC;

    component pool_1D54 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        in_V_V_TVALID : IN STD_LOGIC;
        in_V_V_TREADY : OUT STD_LOGIC;
        ch_div_K : IN STD_LOGIC_VECTOR (31 downto 0);
        height_in : IN STD_LOGIC_VECTOR (31 downto 0);
        width_in : IN STD_LOGIC_VECTOR (31 downto 0);
        Kx : IN STD_LOGIC_VECTOR (31 downto 0);
        height_out : IN STD_LOGIC_VECTOR (31 downto 0);
        width_out : IN STD_LOGIC_VECTOR (31 downto 0);
        Ky : IN STD_LOGIC_VECTOR (31 downto 0);
        ch_div_K_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ch_div_K_out_full_n : IN STD_LOGIC;
        ch_div_K_out_write : OUT STD_LOGIC;
        height_in_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_in_out_full_n : IN STD_LOGIC;
        height_in_out_write : OUT STD_LOGIC;
        height_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_out_out_full_n : IN STD_LOGIC;
        height_out_out_write : OUT STD_LOGIC;
        width_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_out_out_full_n : IN STD_LOGIC;
        width_out_out_write : OUT STD_LOGIC;
        Ky_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ky_out_full_n : IN STD_LOGIC;
        Ky_out_write : OUT STD_LOGIC;
        stream_tp_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        stream_tp_V_V_full_n : IN STD_LOGIC;
        stream_tp_V_V_write : OUT STD_LOGIC );
    end component;


    component pool_2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ch_div_K_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ch_div_K_empty_n : IN STD_LOGIC;
        ch_div_K_read : OUT STD_LOGIC;
        height_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        height_in_empty_n : IN STD_LOGIC;
        height_in_read : OUT STD_LOGIC;
        width_out_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        width_out_empty_n : IN STD_LOGIC;
        width_out_read : OUT STD_LOGIC;
        Ky_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Ky_empty_n : IN STD_LOGIC;
        Ky_read : OUT STD_LOGIC;
        ch_div_K_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ch_div_K_out_full_n : IN STD_LOGIC;
        ch_div_K_out_write : OUT STD_LOGIC;
        width_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_out_out_full_n : IN STD_LOGIC;
        width_out_out_write : OUT STD_LOGIC;
        stream_tp2_V_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        stream_tp2_V_V_full_n : IN STD_LOGIC;
        stream_tp2_V_V_write : OUT STD_LOGIC;
        stream_tp_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        stream_tp_V_V_empty_n : IN STD_LOGIC;
        stream_tp_V_V_read : OUT STD_LOGIC );
    end component;


    component hs2axis IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TLAST : OUT STD_LOGIC;
        ch_div_K_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ch_div_K_empty_n : IN STD_LOGIC;
        ch_div_K_read : OUT STD_LOGIC;
        height_out_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        height_out_empty_n : IN STD_LOGIC;
        height_out_read : OUT STD_LOGIC;
        width_out_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        width_out_empty_n : IN STD_LOGIC;
        width_out_read : OUT STD_LOGIC;
        stream_tp2_V_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        stream_tp2_V_V_empty_n : IN STD_LOGIC;
        stream_tp2_V_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w128_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w128_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_pool_2DdEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hs2axiseOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pool_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ch_div_K : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        Kx : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ky : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pool_AXILiteS_s_axi_U : component pool_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ch_div_K => ch_div_K,
        height_in => height_in,
        width_in => width_in,
        height_out => height_out,
        width_out => width_out,
        Kx => Kx,
        Ky => Ky);

    pool_1D54_U0 : component pool_1D54
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pool_1D54_U0_ap_start,
        start_full_n => pool_1D54_U0_start_full_n,
        ap_done => pool_1D54_U0_ap_done,
        ap_continue => pool_1D54_U0_ap_continue,
        ap_idle => pool_1D54_U0_ap_idle,
        ap_ready => pool_1D54_U0_ap_ready,
        start_out => pool_1D54_U0_start_out,
        start_write => pool_1D54_U0_start_write,
        in_V_V_TDATA => in_V_V_TDATA,
        in_V_V_TVALID => in_V_V_TVALID,
        in_V_V_TREADY => pool_1D54_U0_in_V_V_TREADY,
        ch_div_K => ch_div_K,
        height_in => height_in,
        width_in => width_in,
        Kx => Kx,
        height_out => height_out,
        width_out => width_out,
        Ky => Ky,
        ch_div_K_out_din => pool_1D54_U0_ch_div_K_out_din,
        ch_div_K_out_full_n => ch_div_K_c_full_n,
        ch_div_K_out_write => pool_1D54_U0_ch_div_K_out_write,
        height_in_out_din => pool_1D54_U0_height_in_out_din,
        height_in_out_full_n => height_in_c_full_n,
        height_in_out_write => pool_1D54_U0_height_in_out_write,
        height_out_out_din => pool_1D54_U0_height_out_out_din,
        height_out_out_full_n => height_out_c_full_n,
        height_out_out_write => pool_1D54_U0_height_out_out_write,
        width_out_out_din => pool_1D54_U0_width_out_out_din,
        width_out_out_full_n => width_out_c_full_n,
        width_out_out_write => pool_1D54_U0_width_out_out_write,
        Ky_out_din => pool_1D54_U0_Ky_out_din,
        Ky_out_full_n => Ky_c_full_n,
        Ky_out_write => pool_1D54_U0_Ky_out_write,
        stream_tp_V_V_din => pool_1D54_U0_stream_tp_V_V_din,
        stream_tp_V_V_full_n => stream_tp_V_V_full_n,
        stream_tp_V_V_write => pool_1D54_U0_stream_tp_V_V_write);

    pool_2D_U0 : component pool_2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pool_2D_U0_ap_start,
        ap_done => pool_2D_U0_ap_done,
        ap_continue => pool_2D_U0_ap_continue,
        ap_idle => pool_2D_U0_ap_idle,
        ap_ready => pool_2D_U0_ap_ready,
        ch_div_K_dout => ch_div_K_c_dout,
        ch_div_K_empty_n => ch_div_K_c_empty_n,
        ch_div_K_read => pool_2D_U0_ch_div_K_read,
        height_in_dout => height_in_c_dout,
        height_in_empty_n => height_in_c_empty_n,
        height_in_read => pool_2D_U0_height_in_read,
        width_out_dout => width_out_c_dout,
        width_out_empty_n => width_out_c_empty_n,
        width_out_read => pool_2D_U0_width_out_read,
        Ky_dout => Ky_c_dout,
        Ky_empty_n => Ky_c_empty_n,
        Ky_read => pool_2D_U0_Ky_read,
        ch_div_K_out_din => pool_2D_U0_ch_div_K_out_din,
        ch_div_K_out_full_n => ch_div_K_c7_full_n,
        ch_div_K_out_write => pool_2D_U0_ch_div_K_out_write,
        width_out_out_din => pool_2D_U0_width_out_out_din,
        width_out_out_full_n => width_out_c8_full_n,
        width_out_out_write => pool_2D_U0_width_out_out_write,
        stream_tp2_V_V_din => pool_2D_U0_stream_tp2_V_V_din,
        stream_tp2_V_V_full_n => stream_tp2_V_V_full_n,
        stream_tp2_V_V_write => pool_2D_U0_stream_tp2_V_V_write,
        stream_tp_V_V_dout => stream_tp_V_V_dout,
        stream_tp_V_V_empty_n => stream_tp_V_V_empty_n,
        stream_tp_V_V_read => pool_2D_U0_stream_tp_V_V_read);

    hs2axis_U0 : component hs2axis
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hs2axis_U0_ap_start,
        ap_done => hs2axis_U0_ap_done,
        ap_continue => hs2axis_U0_ap_continue,
        ap_idle => hs2axis_U0_ap_idle,
        ap_ready => hs2axis_U0_ap_ready,
        out_r_TDATA => hs2axis_U0_out_r_TDATA,
        out_r_TVALID => hs2axis_U0_out_r_TVALID,
        out_r_TREADY => out_r_TREADY,
        out_r_TLAST => hs2axis_U0_out_r_TLAST,
        ch_div_K_dout => ch_div_K_c7_dout,
        ch_div_K_empty_n => ch_div_K_c7_empty_n,
        ch_div_K_read => hs2axis_U0_ch_div_K_read,
        height_out_dout => height_out_c_dout,
        height_out_empty_n => height_out_c_empty_n,
        height_out_read => hs2axis_U0_height_out_read,
        width_out_dout => width_out_c8_dout,
        width_out_empty_n => width_out_c8_empty_n,
        width_out_read => hs2axis_U0_width_out_read,
        stream_tp2_V_V_dout => stream_tp2_V_V_dout,
        stream_tp2_V_V_empty_n => stream_tp2_V_V_empty_n,
        stream_tp2_V_V_read => hs2axis_U0_stream_tp2_V_V_read);

    ch_div_K_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_1D54_U0_ch_div_K_out_din,
        if_full_n => ch_div_K_c_full_n,
        if_write => pool_1D54_U0_ch_div_K_out_write,
        if_dout => ch_div_K_c_dout,
        if_empty_n => ch_div_K_c_empty_n,
        if_read => pool_2D_U0_ch_div_K_read);

    height_in_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_1D54_U0_height_in_out_din,
        if_full_n => height_in_c_full_n,
        if_write => pool_1D54_U0_height_in_out_write,
        if_dout => height_in_c_dout,
        if_empty_n => height_in_c_empty_n,
        if_read => pool_2D_U0_height_in_read);

    height_out_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_1D54_U0_height_out_out_din,
        if_full_n => height_out_c_full_n,
        if_write => pool_1D54_U0_height_out_out_write,
        if_dout => height_out_c_dout,
        if_empty_n => height_out_c_empty_n,
        if_read => hs2axis_U0_height_out_read);

    width_out_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_1D54_U0_width_out_out_din,
        if_full_n => width_out_c_full_n,
        if_write => pool_1D54_U0_width_out_out_write,
        if_dout => width_out_c_dout,
        if_empty_n => width_out_c_empty_n,
        if_read => pool_2D_U0_width_out_read);

    Ky_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_1D54_U0_Ky_out_din,
        if_full_n => Ky_c_full_n,
        if_write => pool_1D54_U0_Ky_out_write,
        if_dout => Ky_c_dout,
        if_empty_n => Ky_c_empty_n,
        if_read => pool_2D_U0_Ky_read);

    stream_tp_V_V_U : component fifo_w128_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_1D54_U0_stream_tp_V_V_din,
        if_full_n => stream_tp_V_V_full_n,
        if_write => pool_1D54_U0_stream_tp_V_V_write,
        if_dout => stream_tp_V_V_dout,
        if_empty_n => stream_tp_V_V_empty_n,
        if_read => pool_2D_U0_stream_tp_V_V_read);

    ch_div_K_c7_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_2D_U0_ch_div_K_out_din,
        if_full_n => ch_div_K_c7_full_n,
        if_write => pool_2D_U0_ch_div_K_out_write,
        if_dout => ch_div_K_c7_dout,
        if_empty_n => ch_div_K_c7_empty_n,
        if_read => hs2axis_U0_ch_div_K_read);

    width_out_c8_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_2D_U0_width_out_out_din,
        if_full_n => width_out_c8_full_n,
        if_write => pool_2D_U0_width_out_out_write,
        if_dout => width_out_c8_dout,
        if_empty_n => width_out_c8_empty_n,
        if_read => hs2axis_U0_width_out_read);

    stream_tp2_V_V_U : component fifo_w128_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_2D_U0_stream_tp2_V_V_din,
        if_full_n => stream_tp2_V_V_full_n,
        if_write => pool_2D_U0_stream_tp2_V_V_write,
        if_dout => stream_tp2_V_V_dout,
        if_empty_n => stream_tp2_V_V_empty_n,
        if_read => hs2axis_U0_stream_tp2_V_V_read);

    start_for_pool_2DdEe_U : component start_for_pool_2DdEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool_2D_U0_din,
        if_full_n => start_for_pool_2D_U0_full_n,
        if_write => pool_1D54_U0_start_write,
        if_dout => start_for_pool_2D_U0_dout,
        if_empty_n => start_for_pool_2D_U0_empty_n,
        if_read => pool_2D_U0_ap_ready);

    start_for_hs2axiseOg_U : component start_for_hs2axiseOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hs2axis_U0_din,
        if_full_n => start_for_hs2axis_U0_full_n,
        if_write => pool_1D54_U0_start_write,
        if_dout => start_for_hs2axis_U0_dout,
        if_empty_n => start_for_hs2axis_U0_empty_n,
        if_read => hs2axis_U0_ap_ready);




    ap_done <= hs2axis_U0_ap_done;
    ap_idle <= (pool_2D_U0_ap_idle and pool_1D54_U0_ap_idle and hs2axis_U0_ap_idle);
    ap_ready <= pool_1D54_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= hs2axis_U0_ap_done;
    ap_sync_ready <= pool_1D54_U0_ap_ready;
    hs2axis_U0_ap_continue <= ap_const_logic_1;
    hs2axis_U0_ap_start <= start_for_hs2axis_U0_empty_n;
    hs2axis_U0_start_full_n <= ap_const_logic_1;
    hs2axis_U0_start_write <= ap_const_logic_0;
    in_V_V_TREADY <= pool_1D54_U0_in_V_V_TREADY;
    out_r_TDATA <= hs2axis_U0_out_r_TDATA;
    out_r_TLAST <= hs2axis_U0_out_r_TLAST;
    out_r_TVALID <= hs2axis_U0_out_r_TVALID;
    pool_1D54_U0_ap_continue <= ap_const_logic_1;
    pool_1D54_U0_ap_start <= ap_start;
    pool_1D54_U0_start_full_n <= (start_for_pool_2D_U0_full_n and start_for_hs2axis_U0_full_n);
    pool_2D_U0_ap_continue <= ap_const_logic_1;
    pool_2D_U0_ap_start <= start_for_pool_2D_U0_empty_n;
    pool_2D_U0_start_full_n <= ap_const_logic_1;
    pool_2D_U0_start_write <= ap_const_logic_0;
    start_for_hs2axis_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool_2D_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
