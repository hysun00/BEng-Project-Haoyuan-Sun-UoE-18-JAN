// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pool_HH_
#define _pool_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "pool_1D54.h"
#include "pool_2D.h"
#include "hs2axis.h"
#include "fifo_w32_d2_A.h"
#include "fifo_w32_d3_A.h"
#include "fifo_w128_d8_A.h"
#include "fifo_w128_d2_A.h"
#include "start_for_pool_2DdEe.h"
#include "start_for_hs2axiseOg.h"
#include "pool_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct pool : public sc_module {
    // Port declarations 27
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_lv<128> > in_V_V_TDATA;
    sc_out< sc_lv<128> > out_r_TDATA;
    sc_out< sc_logic > out_r_TLAST;
    sc_in< sc_logic > in_V_V_TVALID;
    sc_out< sc_logic > in_V_V_TREADY;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    pool(sc_module_name name);
    SC_HAS_PROCESS(pool);

    ~pool();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    pool_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* pool_AXILiteS_s_axi_U;
    pool_1D54* pool_1D54_U0;
    pool_2D* pool_2D_U0;
    hs2axis* hs2axis_U0;
    fifo_w32_d2_A* ch_div_K_c_U;
    fifo_w32_d2_A* height_in_c_U;
    fifo_w32_d3_A* height_out_c_U;
    fifo_w32_d2_A* width_out_c_U;
    fifo_w32_d2_A* Ky_c_U;
    fifo_w128_d8_A* stream_tp_V_V_U;
    fifo_w32_d2_A* ch_div_K_c7_U;
    fifo_w32_d2_A* width_out_c8_U;
    fifo_w128_d2_A* stream_tp2_V_V_U;
    start_for_pool_2DdEe* start_for_pool_2DdEe_U;
    start_for_hs2axiseOg* start_for_hs2axiseOg_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > ch_div_K;
    sc_signal< sc_lv<32> > height_in;
    sc_signal< sc_lv<32> > width_in;
    sc_signal< sc_lv<32> > height_out;
    sc_signal< sc_lv<32> > width_out;
    sc_signal< sc_lv<32> > Kx;
    sc_signal< sc_lv<32> > Ky;
    sc_signal< sc_logic > pool_1D54_U0_ap_start;
    sc_signal< sc_logic > pool_1D54_U0_start_full_n;
    sc_signal< sc_logic > pool_1D54_U0_ap_done;
    sc_signal< sc_logic > pool_1D54_U0_ap_continue;
    sc_signal< sc_logic > pool_1D54_U0_ap_idle;
    sc_signal< sc_logic > pool_1D54_U0_ap_ready;
    sc_signal< sc_logic > pool_1D54_U0_start_out;
    sc_signal< sc_logic > pool_1D54_U0_start_write;
    sc_signal< sc_logic > pool_1D54_U0_in_V_V_TREADY;
    sc_signal< sc_lv<32> > pool_1D54_U0_ch_div_K_out_din;
    sc_signal< sc_logic > pool_1D54_U0_ch_div_K_out_write;
    sc_signal< sc_lv<32> > pool_1D54_U0_height_in_out_din;
    sc_signal< sc_logic > pool_1D54_U0_height_in_out_write;
    sc_signal< sc_lv<32> > pool_1D54_U0_height_out_out_din;
    sc_signal< sc_logic > pool_1D54_U0_height_out_out_write;
    sc_signal< sc_lv<32> > pool_1D54_U0_width_out_out_din;
    sc_signal< sc_logic > pool_1D54_U0_width_out_out_write;
    sc_signal< sc_lv<32> > pool_1D54_U0_Ky_out_din;
    sc_signal< sc_logic > pool_1D54_U0_Ky_out_write;
    sc_signal< sc_lv<128> > pool_1D54_U0_stream_tp_V_V_din;
    sc_signal< sc_logic > pool_1D54_U0_stream_tp_V_V_write;
    sc_signal< sc_logic > pool_2D_U0_ap_start;
    sc_signal< sc_logic > pool_2D_U0_ap_done;
    sc_signal< sc_logic > pool_2D_U0_ap_continue;
    sc_signal< sc_logic > pool_2D_U0_ap_idle;
    sc_signal< sc_logic > pool_2D_U0_ap_ready;
    sc_signal< sc_logic > pool_2D_U0_ch_div_K_read;
    sc_signal< sc_logic > pool_2D_U0_height_in_read;
    sc_signal< sc_logic > pool_2D_U0_width_out_read;
    sc_signal< sc_logic > pool_2D_U0_Ky_read;
    sc_signal< sc_lv<32> > pool_2D_U0_ch_div_K_out_din;
    sc_signal< sc_logic > pool_2D_U0_ch_div_K_out_write;
    sc_signal< sc_lv<32> > pool_2D_U0_width_out_out_din;
    sc_signal< sc_logic > pool_2D_U0_width_out_out_write;
    sc_signal< sc_lv<128> > pool_2D_U0_stream_tp2_V_V_din;
    sc_signal< sc_logic > pool_2D_U0_stream_tp2_V_V_write;
    sc_signal< sc_logic > pool_2D_U0_stream_tp_V_V_read;
    sc_signal< sc_logic > hs2axis_U0_ap_start;
    sc_signal< sc_logic > hs2axis_U0_ap_done;
    sc_signal< sc_logic > hs2axis_U0_ap_continue;
    sc_signal< sc_logic > hs2axis_U0_ap_idle;
    sc_signal< sc_logic > hs2axis_U0_ap_ready;
    sc_signal< sc_lv<128> > hs2axis_U0_out_r_TDATA;
    sc_signal< sc_logic > hs2axis_U0_out_r_TVALID;
    sc_signal< sc_logic > hs2axis_U0_out_r_TLAST;
    sc_signal< sc_logic > hs2axis_U0_ch_div_K_read;
    sc_signal< sc_logic > hs2axis_U0_height_out_read;
    sc_signal< sc_logic > hs2axis_U0_width_out_read;
    sc_signal< sc_logic > hs2axis_U0_stream_tp2_V_V_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ch_div_K_c_full_n;
    sc_signal< sc_lv<32> > ch_div_K_c_dout;
    sc_signal< sc_logic > ch_div_K_c_empty_n;
    sc_signal< sc_logic > height_in_c_full_n;
    sc_signal< sc_lv<32> > height_in_c_dout;
    sc_signal< sc_logic > height_in_c_empty_n;
    sc_signal< sc_logic > height_out_c_full_n;
    sc_signal< sc_lv<32> > height_out_c_dout;
    sc_signal< sc_logic > height_out_c_empty_n;
    sc_signal< sc_logic > width_out_c_full_n;
    sc_signal< sc_lv<32> > width_out_c_dout;
    sc_signal< sc_logic > width_out_c_empty_n;
    sc_signal< sc_logic > Ky_c_full_n;
    sc_signal< sc_lv<32> > Ky_c_dout;
    sc_signal< sc_logic > Ky_c_empty_n;
    sc_signal< sc_logic > stream_tp_V_V_full_n;
    sc_signal< sc_lv<128> > stream_tp_V_V_dout;
    sc_signal< sc_logic > stream_tp_V_V_empty_n;
    sc_signal< sc_logic > ch_div_K_c7_full_n;
    sc_signal< sc_lv<32> > ch_div_K_c7_dout;
    sc_signal< sc_logic > ch_div_K_c7_empty_n;
    sc_signal< sc_logic > width_out_c8_full_n;
    sc_signal< sc_lv<32> > width_out_c8_dout;
    sc_signal< sc_logic > width_out_c8_empty_n;
    sc_signal< sc_logic > stream_tp2_V_V_full_n;
    sc_signal< sc_lv<128> > stream_tp2_V_V_dout;
    sc_signal< sc_logic > stream_tp2_V_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_pool_2D_U0_din;
    sc_signal< sc_logic > start_for_pool_2D_U0_full_n;
    sc_signal< sc_lv<1> > start_for_pool_2D_U0_dout;
    sc_signal< sc_logic > start_for_pool_2D_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_hs2axis_U0_din;
    sc_signal< sc_logic > start_for_hs2axis_U0_full_n;
    sc_signal< sc_lv<1> > start_for_hs2axis_U0_dout;
    sc_signal< sc_logic > start_for_hs2axis_U0_empty_n;
    sc_signal< sc_logic > pool_2D_U0_start_full_n;
    sc_signal< sc_logic > pool_2D_U0_start_write;
    sc_signal< sc_logic > hs2axis_U0_start_full_n;
    sc_signal< sc_logic > hs2axis_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_hs2axis_U0_ap_continue();
    void thread_hs2axis_U0_ap_start();
    void thread_hs2axis_U0_start_full_n();
    void thread_hs2axis_U0_start_write();
    void thread_in_V_V_TREADY();
    void thread_out_r_TDATA();
    void thread_out_r_TLAST();
    void thread_out_r_TVALID();
    void thread_pool_1D54_U0_ap_continue();
    void thread_pool_1D54_U0_ap_start();
    void thread_pool_1D54_U0_start_full_n();
    void thread_pool_2D_U0_ap_continue();
    void thread_pool_2D_U0_ap_start();
    void thread_pool_2D_U0_start_full_n();
    void thread_pool_2D_U0_start_write();
    void thread_start_for_hs2axis_U0_din();
    void thread_start_for_pool_2D_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
