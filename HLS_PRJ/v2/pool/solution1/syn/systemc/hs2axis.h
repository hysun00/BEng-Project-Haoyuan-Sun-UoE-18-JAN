// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _hs2axis_HH_
#define _hs2axis_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct hs2axis : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<128> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_logic > out_r_TLAST;
    sc_in< sc_lv<32> > ch_div_K_dout;
    sc_in< sc_logic > ch_div_K_empty_n;
    sc_out< sc_logic > ch_div_K_read;
    sc_in< sc_lv<32> > height_out_dout;
    sc_in< sc_logic > height_out_empty_n;
    sc_out< sc_logic > height_out_read;
    sc_in< sc_lv<32> > width_out_dout;
    sc_in< sc_logic > width_out_empty_n;
    sc_out< sc_logic > width_out_read;
    sc_in< sc_lv<128> > stream_tp2_V_V_dout;
    sc_in< sc_logic > stream_tp2_V_V_empty_n;
    sc_out< sc_logic > stream_tp2_V_V_read;


    // Module declarations
    hs2axis(sc_module_name name);
    SC_HAS_PROCESS(hs2axis);

    ~hs2axis();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<128> > out_V_data_V_1_data_out;
    sc_signal< sc_logic > out_V_data_V_1_vld_in;
    sc_signal< sc_logic > out_V_data_V_1_vld_out;
    sc_signal< sc_logic > out_V_data_V_1_ack_in;
    sc_signal< sc_logic > out_V_data_V_1_ack_out;
    sc_signal< sc_lv<128> > out_V_data_V_1_payload_A;
    sc_signal< sc_lv<128> > out_V_data_V_1_payload_B;
    sc_signal< sc_logic > out_V_data_V_1_sel_rd;
    sc_signal< sc_logic > out_V_data_V_1_sel_wr;
    sc_signal< sc_logic > out_V_data_V_1_sel;
    sc_signal< sc_logic > out_V_data_V_1_load_A;
    sc_signal< sc_logic > out_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_data_V_1_state;
    sc_signal< sc_logic > out_V_data_V_1_state_cmp_full;
    sc_signal< sc_logic > out_V_last_1_data_out;
    sc_signal< sc_logic > out_V_last_1_vld_in;
    sc_signal< sc_logic > out_V_last_1_vld_out;
    sc_signal< sc_logic > out_V_last_1_ack_in;
    sc_signal< sc_logic > out_V_last_1_ack_out;
    sc_signal< sc_logic > out_V_last_1_payload_A;
    sc_signal< sc_logic > out_V_last_1_payload_B;
    sc_signal< sc_logic > out_V_last_1_sel_rd;
    sc_signal< sc_logic > out_V_last_1_sel_wr;
    sc_signal< sc_logic > out_V_last_1_sel;
    sc_signal< sc_logic > out_V_last_1_load_A;
    sc_signal< sc_logic > out_V_last_1_load_B;
    sc_signal< sc_lv<2> > out_V_last_1_state;
    sc_signal< sc_logic > out_V_last_1_state_cmp_full;
    sc_signal< sc_logic > out_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln48_reg_208;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln48_reg_208_pp0_iter1_reg;
    sc_signal< sc_logic > ch_div_K_blk_n;
    sc_signal< sc_logic > height_out_blk_n;
    sc_signal< sc_logic > width_out_blk_n;
    sc_signal< sc_logic > stream_tp2_V_V_blk_n;
    sc_signal< sc_lv<31> > i_0_i_i_reg_133;
    sc_signal< sc_lv<32> > ch_div_K_read_reg_177;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > height_out_read_reg_182;
    sc_signal< sc_lv<32> > width_out_read_reg_187;
    sc_signal< sc_lv<32> > mul_ln48_fu_144_p2;
    sc_signal< sc_lv<32> > mul_ln48_reg_192;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > mul_ln48_1_fu_148_p2;
    sc_signal< sc_lv<32> > mul_ln48_1_reg_197;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > add_ln55_fu_152_p2;
    sc_signal< sc_lv<32> > add_ln55_reg_203;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln48_fu_161_p2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_io;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state7_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > i_fu_166_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_last_fu_172_p2;
    sc_signal< sc_lv<1> > tmp_last_reg_217;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state5;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > zext_ln48_fu_157_p1;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_state8;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln55_fu_152_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state5_pp0_stage0_iter0();
    void thread_ap_block_state6_io();
    void thread_ap_block_state6_pp0_stage0_iter1();
    void thread_ap_block_state7_io();
    void thread_ap_block_state7_pp0_stage0_iter2();
    void thread_ap_block_state8();
    void thread_ap_condition_pp0_exit_iter0_state5();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ch_div_K_blk_n();
    void thread_ch_div_K_read();
    void thread_height_out_blk_n();
    void thread_height_out_read();
    void thread_i_fu_166_p2();
    void thread_icmp_ln48_fu_161_p2();
    void thread_mul_ln48_1_fu_148_p2();
    void thread_mul_ln48_fu_144_p2();
    void thread_out_V_data_V_1_ack_in();
    void thread_out_V_data_V_1_ack_out();
    void thread_out_V_data_V_1_data_out();
    void thread_out_V_data_V_1_load_A();
    void thread_out_V_data_V_1_load_B();
    void thread_out_V_data_V_1_sel();
    void thread_out_V_data_V_1_state_cmp_full();
    void thread_out_V_data_V_1_vld_in();
    void thread_out_V_data_V_1_vld_out();
    void thread_out_V_last_1_ack_in();
    void thread_out_V_last_1_ack_out();
    void thread_out_V_last_1_data_out();
    void thread_out_V_last_1_load_A();
    void thread_out_V_last_1_load_B();
    void thread_out_V_last_1_sel();
    void thread_out_V_last_1_state_cmp_full();
    void thread_out_V_last_1_vld_in();
    void thread_out_V_last_1_vld_out();
    void thread_out_r_TDATA();
    void thread_out_r_TDATA_blk_n();
    void thread_out_r_TLAST();
    void thread_out_r_TVALID();
    void thread_stream_tp2_V_V_blk_n();
    void thread_stream_tp2_V_V_read();
    void thread_tmp_last_fu_172_p2();
    void thread_width_out_blk_n();
    void thread_width_out_read();
    void thread_zext_ln48_fu_157_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
